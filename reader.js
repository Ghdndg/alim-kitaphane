// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∏—Ç–∞–ª–∫–µ
async function checkAccess() {
    try {
        const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
        
        if (!currentUser.id) {
            console.error('‚ùå No user ID found');
            window.location.replace('index.html');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏ –∏–∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        const bookId = urlParams.get('book') || '1';
        
        console.log('üîç Checking access for user:', currentUser.id, 'book:', bookId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ API
        const response = await fetch(`/api/books/${bookId}/access`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${currentUser.token || ''}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            console.error('‚ùå Access denied:', response.status);
            window.location.replace('index.html');
            return;
        }
        
        const data = await response.json();
        console.log('‚úÖ Access granted:', data);
        
        return { user: currentUser, bookId: parseInt(bookId) };
        
    } catch (error) {
        console.error('‚ùå Access check failed:', error);
        window.location.replace('index.html');
        return null;
    }
}

// –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
class ProfessionalReader {
    constructor() {
        this.container = null;
        this.content = null;
        this.currentPage = 1;
        this.totalPages = 1;
        this.pageHeight = 0;
        this.contentHeight = 0;
        this.isAnimating = false;
        this.settings = this.loadSettings();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        this.handleResize = this.handleResize.bind(this);
        this.handleKeyPress = this.handleKeyPress.bind(this);
    }
    
    async init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø (–ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        // const access = await checkAccess();
        // if (!access) return;
        
        this.container = document.getElementById('textContent');
        if (!this.container) {
            console.error('‚ùå Text content container not found');
            return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        await this.loadContent(1); // –ò—Å–ø–æ–ª—å–∑—É–µ–º bookId = 1
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∏—Ç–∞–ª–∫—É
        this.setupEventListeners();
        this.calculateDimensions();
        this.applySettings();
        this.renderCurrentPage();
        this.updateUI();
        
        console.log('üìö Professional reader initialized');
    }
    
    async loadContent(bookId) {
        try {
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ HTML
            // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —á–µ—Ä–µ–∑ API
            this.content = `–ê–ª–∏–º –ú–∏–¥–∞—Ç –∫—ä–∞–ª–µ–º–∏–Ω–∏–Ω—ä –∞—Å–µ—Ä–∏ - "–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π" —Ç–∞—Ä–∏—Ö–∏–π —Ä–æ–º–∞–Ω—ã, –ö—ä—ã—Ä—ã–º –•–∞–Ω–¥—ã—Ä—ã–Ω—ã–Ω—ä –±—É—é–∫ —à–∞—Ö—Å–∏–µ—Ç–ª–µ—Ä–∏–Ω–¥–µ–Ω –±–∏—Å–∏ –∞–∫—ä–∫—ä—ã–Ω–¥–∞. –ë—É —ç—Å–µ—Ä —Å–∞–¥–µ–¥–∂–µ —Ç–∞—Ä–∏—Ö–∏–π –≤–∞–∫—ä–∞–ª–∞—Ä—ã –∞–Ω–ª–∞—Ç–º–∞–π, –±–µ–ª—å–∫–∏ –±–∏—Ä —Ö–∞–ª–∫—ä–Ω—ã–Ω—ä –º–∏–ª–ª–∏–π —Ä—É—Ö—ã–Ω—ã, –∞–¥–µ—Ç–ª–µ—Ä–∏–Ω–∏ –≤–µ –∏—Ö—Ç–∏–∫—ä–∞–¥–ª–∞—Ä—ã–Ω—ã –∫–æ—Å—å—Ç–µ—Ä–µ.

–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π –•–∞–Ω - –ö—ä—ã—Ä—ã–º —Ç–∞—Ä–∏—Ö–∏–Ω–∏–Ω—ä —ç–Ω –±—É—é–∫ —à–∞—Ö—Å–∏–µ—Ç–ª–µ—Ä–∏–Ω–¥–µ–Ω –±–∏—Å–∏. –û–Ω—ã–Ω—ä –∑–∞–º–∞–Ω—ã–Ω–¥–∞ –ö—ä—ã—Ä—ã–º –•–∞–Ω–¥—ã—Ä—ã —ç–≤–¥–∂–∏–Ω–¥–µ —ç–¥–∏. –î–∏–ø–ª–æ–º–∞—Ç–∏—è, —Ç–∏–¥–∂–∞—Ä–µ—Ç –≤–µ —Å–∞–Ω–∞—Ç –∏–Ω–∫–∏—à–∞—Ñ —ç—Ç–º–∏—à—Ç–∏. –ö—ä—ã—Ä—ã–º —Ç–∞—Ç–∞—Ä–ª–∞—Ä—ã –±—É—Ç—é–Ω –¥—é–Ω—å—è–¥–∞ —Ö—é—Ä–º–µ—Ç–ª–µ –∫—ä–∞—Ä–∞–ª—ã—Ä–¥—ã.

–†–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä –±–∏–∑–Ω–∏ XV-XVI –∞—Å—ã—Ä–ª–∞—Ä—ã–Ω–∞ –∞–ª—ã–ø –±–∞—Ä–∞. –û –∑–∞–º–∞–Ω –ö—ä—ã—Ä—ã–º - –®–∏—Ä–∫ –Æ–ª—ã–Ω—ã–Ω—ä –º–∞—Ä—Ö–∏–∑ –Ω–æ–∫—Ç—ä–∞–ª–∞—Ä—ã–Ω–¥–∞–Ω –±–∏—Å–∏ —ç–¥–∏. –ë—É—é–∫ —Ç–∏–¥–∂–∞—Ä–µ—Ç –π–æ–ª–ª–∞—Ä—ã –±—É —Ç–æ–ø—Ä–∞–∫—ä–ª–∞—Ä–Ω—ã –∫–µ—á–∏—Ä–¥–∏. –®–µ—Ä–∫–ª–µ—Ä–¥–µ–Ω –≤–µ –ì—ä–∞—Ä–±–¥–∞–Ω —Ç–¥–∂–∏—Ä–ª–µ—Ä –∫–µ–ª–∏—Ä–¥–∏.

–õ—è–∫–∏–Ω –±—É —Ä–æ–º–∞–Ω–Ω—ã–Ω—ä –∞—Å—ã–ª –∫—ä—ã–º–º–µ—Ç–∏ –æ–Ω–¥–∞ –∫–∏, –æ –±–∏–∑–≥–µ —ç—Å–∫–∏ –ö—ä—ã—Ä—ã–º–Ω—ã–Ω—ä –≥—É–Ω—å–¥–∞–ª—ã–∫—ä —Ö–∞—è—Ç—ã–Ω—ã –∫–æ—Å—å—Ç–µ—Ä–µ. –•–∞–ª–∫—ä –Ω–∞—Å—ã–ª —è—à–∞–π–¥—ã —ç–¥–∏, –Ω–µ —Ñ–∏–∫–∏—Ä —ç—Ç–∏—Ä–¥–∏, –Ω–µ–≥–µ –∏–Ω–∞–Ω—ã—Ä–¥—ã - –±—É—Ç—é–Ω –±—É–Ω–ª–∞—Ä —ç—Å–µ—Ä–¥–µ –∞—á—ã–∫—ä –∫–æ—Å—å—Ç–µ—Ä–∏–ª—å–¥–∏.

–ë–∞—Ö—á–∏—Å–∞—Ä–∞–π —Å–∞—Ä–∞–π—ã –≥—É–Ω—å –¥–æ–≥—ä–≥—ä–∞–Ω–¥–∞ –∞–ª—Ç—ã–Ω –Ω—É—Ä–ª–∞—Ä–¥–∞ —è–ª—Ç—ã—Ä–∞–π —ç–¥–∏. –•–∞–¥–∂–∏ –ì–∏—Ä–∞–π –•–∞–Ω –¥–∏–≤–∞–Ω—Ö–∞–Ω–µ–¥–µ –æ–ª—Ç—É—Ä–µ, –¥–µ–≤–ª–µ—Ç –∏—à–ª–µ—Ä–∏–Ω–∏ –∫–æ—Å—å—Ç–µ—Ä–∏—Ä —ç–¥–∏. –ô–∞–Ω—ã–Ω–¥–∞ –≤—è–∑–∏—Ä–ª–µ—Ä–∏, –Ω—É–∫–µ—Ä–ª–µ—Ä–∏ –≤–µ –∞–ª–∏–º–ª–µ—Ä–∏ —Ç—É—Ä–¥—ã.

"–•–∞–Ω —Ö–∞–∑—Ä–µ—Ç–ª–µ—Ä–∏," –¥–µ–¥–∏ –±–∞—à–≤–µ–∑–∏—Ä–∏ –≠–º–∏–Ω-—ç—Ñ–µ–Ω–¥–∏, "–û—Å–º–∞–Ω–ª—ã –ø–∞–¥–∏—à–∞—Ö—ã–Ω–¥–∞–Ω –º–µ–∫—Ç—É–ø –∫–µ–ª—å–¥–∏. –ê–ª—Ç—ã–Ω –û—Ä–¥–∞–Ω—ã–Ω—ä –∫–∞–ª–¥—ã–∫—ä–ª–∞—Ä—ã –∞–∫—ä—ã–Ω —ç—Ç–º–µ–∫—Ç–µ –¥–µ–≤–∞–º —ç—Ç–µ–ª–µ—Ä."

–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π —ç–ª–∏–Ω–∏ —Å–∞–∫—ä–∞–ª—ã–Ω–∞ —Å—É—Ä—Ç–µ, –¥–µ—Ä–∏–Ω —Ñ–∏–∫–∏—Ä–≥–µ –¥–∞–ª–¥—ã. –ë–∏–ª—å–¥–∏ –∫–∏ –±—É –º–µ—Å–µ–ª–µ–ª–µ—Ä –∫–æ–ø—Ç–∞–Ω –±–µ—Ä–ª–∏ –¥–µ–≤–ª–µ—Ç –∏—á—é–Ω –∑–∞—Ä–∞—Ä–ª—ã. –õ—è–∫–∏–Ω —á—ë–∑—é–º —Ç–∞–ø–º–∞–∫—ä –∫–µ—Ä–µ–∫ —ç–¥–∏.

–°–∞—Ä–∞–π–Ω—ã–Ω—ä –ø–µ–Ω–¥–∂–µ—Ä–µ–ª–µ—Ä–∏–Ω–¥–µ–Ω –ö—ä—ã—Ä—ã–º —Ç–∞–≥—ä–ª–∞—Ä—ã–Ω—ã–Ω—ä –≥–æ–∑–µ–ª–ª–∏–≥–∏ –∫–æ—Ä—é–Ω–µ —ç–¥–∏. –¢–∞–±–∏–∞—Ç–Ω—ã–Ω—ä –±—É –±—É—é–∫—Å—é–∑—é–Ω–µ –±–∞–∫—ä—ã–ø, –•–∞–Ω —Ñ–∏–∫–∏—Ä —ç—Ç–∏—Ä —ç–¥–∏: "–ê–ª–ª–∞—Ö –±–∏–∑–≥–µ –Ω–µ –≥—É–∑–µ–ª—å –±–∏—Ä –µ—Ä –±–µ—Ä–¥–∏. –ë—É —Ç–æ–ø—Ä–∞–∫—ä–ª–∞—Ä–Ω—ã –∫—ä–æ—Ä—É–∞–º–∞–∫—ä –≤–µ –∏–Ω–∫–∏—à–∞—Ñ —ç—Ç—Ç–∏—Ä–º–µ–∫ –±–∏–∑–∏–º –±–æ—Ä–∂—É–º—ã–∑."

–î–∏–≤–∞–Ω—Ö–∞–Ω–µ–Ω–∏–Ω—ä –¥—É–≤–∞—Ä–ª–∞—Ä—ã–Ω–¥–∞ —ç—Å–∫–∏ –•–∞–Ω –∞—Ç–∞–ª–∞—Ä—ã–Ω—ã–Ω—ä —Å—é—Ä–µ—Ç–ª–µ—Ä–∏ –∞—Å—ã–ª–∞ —ç–¥–∏. –≠—Ä –±–∏—Å–∏ –∫–µ–Ω–¥–∏ –∑–∞–º–∞–Ω—ã–Ω–¥–∞ –ö—ä—ã—Ä—ã–º –∏—á—é–Ω —Ö–∞—Ä–ø —ç—Ç–º–∏—à—Ç–∏, —Ö–∞–ª–∫—ä–Ω—ã –∫—ä–æ—Ä—É–º—ã—à—Ç—ã. –®–∏–º–¥–∏ –±—É –±–æ—Ä—á –•–∞–¥–∂–∏ –ì–∏—Ä–∞–π–≥—ä–∞ –¥—é—à–º–∏—à—Ç–∏.

"–í–µ–∑–∏—Ä–∏ –ê–∑–∞–º," –¥–µ–¥–∏ –•–∞–Ω, "—Ö–∞–ª–∫—ä—ã–º—ã–∑–Ω—ã–Ω—ä –∞—Ö–≤–∞–ª—ã–Ω—ã –Ω–∞—Å—ã–ª –∫–æ—Ä–µ—Å–∏–Ω—ä? –•–∞—Å—ã–ª–∞—Ç –µ–º –±–æ–ª–¥—ã –º—É?"

"–ê–ª–ª–∞—Ö–≥—ä–∞ —à—É–∫—é—Ä, –•–∞–Ω —Ö–∞–∑—Ä–µ—Ç–ª–µ—Ä–∏, –±—É –π—ã–ª –±–µ—Ä–∫–µ—Ç–ª–∏ –∫–µ—á—Ç–∏. –ë—É—é–¥–∞–π–ª–∞—Ä –µ–º –æ–ª–¥—ã, –±–∞–≥—ä–ª–∞—Ä –º–µ–π–≤–µ –±–µ—Ä–¥–∏. –•–∞–ª–∫—ä —Ä–∞–∑—ã," –¥–∂–∞–≤–∞–ø –±–µ—Ä–¥–∏ –≠–º–∏–Ω-—ç—Ñ–µ–Ω–¥–∏.

–ë—É —Ö–∞–±–µ—Ä –•–∞–¥–∂–∏ –ì–∏—Ä–∞–π–Ω—ã –∫—É–≤–∞–Ω—Ç–∞–ª—ã. –ß—é–Ω–∫–∏ –±–∏–ª–∏—Ä —ç–¥–∏ –∫–∏ –¥–µ–≤–ª–µ—Ç–Ω–∏–Ω—ä –∞—Å—ã–ª –≥—É—á–∏ - —Ö–∞–ª–∫—ä—ã–Ω—ã–Ω—ä –≥—É–∑–µ–ª—å —è—à–∞–≤—ã. –¢–æ–¥–∂ —Ö–∞–ª–∫—ä —Ä–∞–∑—ã –æ–ª–º–∞—Å–∞, —Ö–∞–Ω–¥–∞—Ä–Ω—ã–Ω—ä –¥–∞ –∏–∫–±–∞–ª–∏ –æ–ª–º–∞–∑.`;
            
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.container.innerHTML = '';
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
            this.createPages();
            
        } catch (error) {
            console.error('‚ùå Failed to load content:', error);
            this.container.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>';
        }
    }
    
    createPages() {
        if (!this.content) return;
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const words = this.content.split(' ');
        const wordsPerPage = this.calculateWordsPerPage();
        
        this.pages = [];
        for (let i = 0; i < words.length; i += wordsPerPage) {
            const pageWords = words.slice(i, i + wordsPerPage);
            this.pages.push(pageWords.join(' '));
        }
        
        this.totalPages = this.pages.length;
        console.log(`üìÑ Created ${this.totalPages} pages`);
    }
    
    calculateWordsPerPage() {
        // –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        let baseWords = 200;
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (this.settings.fontSize <= 14) baseWords += 50;
        if (this.settings.fontSize >= 18) baseWords -= 50;
        
        if (this.settings.textWidth === 'narrow') baseWords -= 30;
        if (this.settings.textWidth === 'wide') baseWords += 30;
        
        if (this.settings.lineHeight <= 1.4) baseWords += 20;
        if (this.settings.lineHeight >= 1.8) baseWords -= 20;
        
        return Math.max(50, baseWords);
    }
    
    calculateDimensions() {
        if (!this.container) return;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const rect = this.container.getBoundingClientRect();
        this.pageHeight = rect.height;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        this.contentHeight = this.pageHeight * this.totalPages;
        
        console.log('üìè Dimensions calculated:', {
            pageHeight: this.pageHeight,
            totalPages: this.totalPages,
            contentHeight: this.contentHeight
        });
    }
    
    renderCurrentPage() {
        if (!this.container || !this.pages || this.currentPage < 1 || this.currentPage > this.totalPages) {
            return;
        }
        
        const pageContent = this.pages[this.currentPage - 1];
        this.container.innerHTML = `<div class="page-content">${pageContent}</div>`;
        
        console.log(`üìñ Rendered page ${this.currentPage}/${this.totalPages}`);
    }
    
    nextPage() {
        if (this.isAnimating || this.currentPage >= this.totalPages) return;
        
        this.isAnimating = true;
        this.currentPage++;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
        this.container.style.transform = 'translateX(-100%)';
        this.container.style.opacity = '0.7';
        
        setTimeout(() => {
            this.renderCurrentPage();
            this.container.style.transform = 'translateX(0)';
            this.container.style.opacity = '1';
            
            setTimeout(() => {
                this.isAnimating = false;
                this.updateUI();
                this.saveProgress();
            }, 150);
        }, 150);
    }
    
    previousPage() {
        if (this.isAnimating || this.currentPage <= 1) return;
        
        this.isAnimating = true;
        this.currentPage--;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
        this.container.style.transform = 'translateX(100%)';
        this.container.style.opacity = '0.7';
        
        setTimeout(() => {
            this.renderCurrentPage();
            this.container.style.transform = 'translateX(0)';
            this.container.style.opacity = '1';
            
            setTimeout(() => {
                this.isAnimating = false;
                this.updateUI();
                this.saveProgress();
            }, 150);
        }, 150);
    }
    
    goToPage(pageNumber) {
        if (this.isAnimating || pageNumber < 1 || pageNumber > this.totalPages) return;
        
        this.currentPage = pageNumber;
        this.renderCurrentPage();
        this.updateUI();
        this.saveProgress();
    }
    
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progress = (this.currentPage / this.totalPages) * 100;
        const progressBar = document.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.style.width = `${progress}%`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        const pageNumbers = document.querySelectorAll('.page-number');
        pageNumbers.forEach(el => {
            el.textContent = `${this.currentPage} / ${this.totalPages}`;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const prevBtn = document.querySelector('.prev-btn');
        const nextBtn = document.querySelector('.next-btn');
        
        if (prevBtn) prevBtn.disabled = this.currentPage <= 1;
        if (nextBtn) nextBtn.disabled = this.currentPage >= this.totalPages;
    }
    
    applySettings() {
        if (!this.container) return;
        
        const pageContent = this.container.querySelector('.page-content');
        if (!pageContent) return;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞
        pageContent.style.fontSize = `${this.settings.fontSize}px`;
        pageContent.style.fontFamily = this.settings.fontFamily;
        pageContent.style.lineHeight = this.settings.lineHeight;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã
        const widthClasses = {
            'narrow': 'text-narrow',
            'medium': 'text-medium', 
            'wide': 'text-wide'
        };
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
        Object.values(widthClasses).forEach(cls => {
            pageContent.classList.remove(cls);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å
        pageContent.classList.add(widthClasses[this.settings.textWidth]);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        const themeClasses = {
            'light': 'theme-light',
            'sepia': 'theme-sepia',
            'dark': 'theme-dark'
        };
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º—ã
        Object.values(themeClasses).forEach(cls => {
            document.body.classList.remove(cls);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        document.body.classList.add(themeClasses[this.settings.theme]);
        
        console.log('üé® Settings applied:', this.settings);
    }
    
    changeFontSize(delta) {
        const newSize = Math.max(12, Math.min(24, this.settings.fontSize + delta));
        if (newSize === this.settings.fontSize) return;
        
        this.settings.fontSize = newSize;
        this.applySettings();
        this.saveSettings();
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        this.createPages();
        this.calculateDimensions();
        this.renderCurrentPage();
        this.updateUI();
        
        console.log(`üî§ Font size changed to ${newSize}px`);
    }
    
    changeFontFamily(family) {
        this.settings.fontFamily = family;
        this.applySettings();
        this.saveSettings();
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.createPages();
        this.calculateDimensions();
        this.renderCurrentPage();
        this.updateUI();
        
        console.log(`üìù Font family changed to ${family}`);
    }
    
    setTextWidth(width) {
        this.settings.textWidth = width;
        this.applySettings();
        this.saveSettings();
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.createPages();
        this.calculateDimensions();
        this.renderCurrentPage();
        this.updateUI();
        
        console.log(`üìè Text width changed to ${width}`);
    }
    
    setLineHeight(height) {
        this.settings.lineHeight = height;
        this.applySettings();
        this.saveSettings();
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.createPages();
        this.calculateDimensions();
        this.renderCurrentPage();
        this.updateUI();
        
        console.log(`üìê Line height changed to ${height}`);
    }
    
    setTheme(theme) {
        this.settings.theme = theme;
        this.applySettings();
        this.saveSettings();
        
        console.log(`üé® Theme changed to ${theme}`);
    }
    
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        const prevBtn = document.querySelector('.prev-btn');
        const nextBtn = document.querySelector('.next-btn');
        
        if (prevBtn) prevBtn.addEventListener('click', () => this.previousPage());
        if (nextBtn) nextBtn.addEventListener('click', () => this.nextPage());
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        document.addEventListener('keydown', this.handleKeyPress);
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', this.handleResize);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        this.setupSettingsHandlers();
    }
    
    setupSettingsHandlers() {
        // –ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
        const fontSizeButtons = document.querySelectorAll('.font-size-btn');
        fontSizeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const delta = btn.dataset.delta ? parseInt(btn.dataset.delta) : 0;
                this.changeFontSize(delta);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —Å–µ–º–µ–π—Å—Ç–≤–∞ —à—Ä–∏—Ñ—Ç–æ–≤
        const fontFamilyButtons = document.querySelectorAll('.font-family-btn');
        fontFamilyButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                this.changeFontFamily(btn.dataset.family);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        const widthButtons = document.querySelectorAll('.width-btn');
        widthButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                this.setTextWidth(btn.dataset.width);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ –º–µ–∂—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        const lineHeightButtons = document.querySelectorAll('.lh-btn');
        lineHeightButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                this.setLineHeight(parseFloat(btn.dataset.height));
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
        const themeButtons = document.querySelectorAll('.theme-btn');
        themeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                this.setTheme(btn.dataset.theme);
            });
        });
    }
    
    handleKeyPress(event) {
        if (this.isAnimating) return;
        
        switch(event.key) {
            case 'ArrowLeft':
            case 'ArrowUp':
                event.preventDefault();
                this.previousPage();
                break;
            case 'ArrowRight':
            case 'ArrowDown':
            case ' ':
                event.preventDefault();
                this.nextPage();
                break;
            case 'Home':
                event.preventDefault();
                this.goToPage(1);
                break;
            case 'End':
                event.preventDefault();
                this.goToPage(this.totalPages);
                break;
        }
    }
    
    handleResize() {
        // –î–µ–±–∞—É–Ω—Å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        clearTimeout(this.resizeTimeout);
        this.resizeTimeout = setTimeout(() => {
            this.calculateDimensions();
            this.createPages();
            this.renderCurrentPage();
            this.updateUI();
        }, 250);
    }
    
    loadSettings() {
        const defaultSettings = {
            fontSize: 16,
            fontFamily: 'Georgia, serif',
            textWidth: 'medium',
            lineHeight: 1.6,
            theme: 'light'
        };
        
        try {
            const saved = localStorage.getItem('readingSettings');
            return saved ? { ...defaultSettings, ...JSON.parse(saved) } : defaultSettings;
        } catch (error) {
            console.error('‚ùå Failed to load settings:', error);
            return defaultSettings;
        }
    }
    
    saveSettings() {
        try {
            localStorage.setItem('readingSettings', JSON.stringify(this.settings));
        } catch (error) {
            console.error('‚ùå Failed to save settings:', error);
        }
    }
    
    saveProgress() {
        try {
            const progress = {
                page: this.currentPage,
                totalPages: this.totalPages,
                timestamp: Date.now()
            };
            localStorage.setItem('readingProgress', JSON.stringify(progress));
        } catch (error) {
            console.error('‚ùå Failed to save progress:', error);
        }
    }
    
    loadProgress() {
        try {
            const saved = localStorage.getItem('readingProgress');
            if (saved) {
                const progress = JSON.parse(saved);
                if (progress.page && progress.page <= this.totalPages) {
                    this.currentPage = progress.page;
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå Failed to load progress:', error);
        }
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Ç–∞–ª–∫–∏
let reader = null;

document.addEventListener('DOMContentLoaded', async () => {
    try {
        reader = new ProfessionalReader();
        await reader.init();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (reader.loadProgress()) {
            reader.renderCurrentPage();
            reader.updateUI();
        }
        
    } catch (error) {
        console.error('‚ùå Failed to initialize reader:', error);
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å HTML
function previousPage() {
    if (reader) reader.previousPage();
}

function nextPage() {
    if (reader) reader.nextPage();
}

function changeFontSize(delta) {
    if (reader) reader.changeFontSize(delta);
}

function changeFontFamily(family) {
    if (reader) reader.changeFontFamily(family);
}

function setTextWidth(width) {
    if (reader) reader.setTextWidth(width);
}

function setLineHeight(height) {
    if (reader) reader.setLineHeight(height);
}

function setTheme(theme) {
    if (reader) reader.setTheme(theme);
}

function openSettings() {
    const modal = document.getElementById('settingsModal');
    if (modal) modal.style.display = 'block';
    document.body.style.overflow = 'hidden';
}

function closeSettings() {
    const modal = document.getElementById('settingsModal');
    if (modal) modal.style.display = 'none';
    document.body.style.overflow = 'auto';
}

function openTableOfContents() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) sidebar.classList.add('open');
}

function closeTableOfContents() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) sidebar.classList.remove('open');
}

function goToChapter(chapterIndex) {
    if (reader) reader.goToPage(chapterIndex + 1);
    closeTableOfContents();
}

function toggleBookmark() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–ª–∞–¥–æ–∫
    console.log('üîñ Bookmark toggled');
}

function scrollToTop() {
    if (reader) reader.goToPage(1);
}
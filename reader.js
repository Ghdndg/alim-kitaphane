// –ü—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π JavaScript –±–µ–∑ TypeScript —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
class YandexStyleReader {
    constructor() {
        this.WORDS_PER_PAGE = 250; // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.STORAGE_KEY = 'yandex-reader-state';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state = {
            bookText: '',
            pages: [],
            currentPageIndex: 0,
            totalPages: 0,
            isUIVisible: false,
            isSettingsVisible: false,
            settings: {
                theme: 'dark',
                fontSize: 18,
                lineHeight: 1.6,
                alignment: 'justify',
                brightness: 100,
                scrollMode: false
            }
        };
        
        this.elements = {};
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async init() {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–∏–¥–µ—Ä–∞...');
            
            this.bindElements();
            this.loadSettings();
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏...');
            await this.loadBookFile();
            
            this.updateLoadingStatus('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
            this.createPages();
            
            this.updateLoadingStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            this.bindEventListeners();
            this.loadProgress();
            
            this.renderCurrentPage();
            this.hideLoading();
            this.showUIBriefly();
            
            console.log('‚úÖ –†–∏–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏: ' + error.message);
        }
    }

    // –°–≤—è–∑—ã–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    bindElements() {
        const elementIds = [
            'loadingScreen', 'loadingStatus', 'readerApp',
            'topBar', 'bottomBar', 'progressFill',
            'pageContent', 'currentPage', 'readingTime',
            'prevBtn', 'nextBtn', 'menuBtn', 'backBtn',
            'leftZone', 'centerZone', 'rightZone',
            'settingsPanel', 'settingsOverlay'
        ];
        
        elementIds.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                this.elements[id] = element;
            } else {
                console.warn(`–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${id}`);
            }
        });
        
        console.log('üîó DOM —ç–ª–µ–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω—ã:', Object.keys(this.elements).length);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏
    async loadBookFile() {
        try {
            console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ Khadzhi-Girai.txt...');
            
            const response = await fetch('Khadzhi-Girai.txt');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            this.state.bookText = await response.text();
            
            if (!this.state.bookText.trim()) {
                throw new Error('–§–∞–π–ª –ø—É—Å—Ç');
            }
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.state.bookText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        } catch (error) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É: ${error.message}`);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
    createPages() {
        console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        const cleanText = this.state.bookText
            .replace(/\r\n/g, '\n')
            .replace(/\n{3,}/g, '\n\n')
            .trim();
        
        // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        const paragraphs = cleanText.split('\n\n').filter(p => p.trim());
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: ${paragraphs.length}`);
        
        this.state.pages = [];
        let currentPageParagraphs = [];
        let currentWordCount = 0;
        
        for (let i = 0; i < paragraphs.length; i++) {
            const paragraph = paragraphs[i].trim();
            const wordCount = this.countWords(paragraph);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (currentWordCount + wordCount > this.WORDS_PER_PAGE && currentPageParagraphs.length > 0) {
                // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                const pageContent = this.formatPageContent(currentPageParagraphs);
                this.state.pages.push({
                    id: this.state.pages.length,
                    content: pageContent,
                    wordCount: currentWordCount
                });
                
                // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                currentPageParagraphs = [paragraph];
                currentWordCount = wordCount;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                currentPageParagraphs.push(paragraph);
                currentWordCount += wordCount;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (i % 20 === 0) {
                this.updateLoadingStatus(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i}/${paragraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...`);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (currentPageParagraphs.length > 0) {
            const pageContent = this.formatPageContent(currentPageParagraphs);
            this.state.pages.push({
                id: this.state.pages.length,
                content: pageContent,
                wordCount: currentWordCount
            });
        }
        
        this.state.totalPages = this.state.pages.length;
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${this.state.totalPages}`);
        console.log(`üìä –°–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ~${this.WORDS_PER_PAGE}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        this.verifyPages(paragraphs);
    }

    // –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
    countWords(text) {
        return text.split(/\s+/).filter(word => word.length > 0).length;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    formatPageContent(paragraphs) {
        return paragraphs.map(paragraph => {
            const text = paragraph.trim();
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–Ω–∏–≥–∏
            if (text === '–•–∞–¥–∂–∏-–ì–∏—Ä–∞–π' || text.includes('–•–∞–¥–∂–∏-–ì–∏—Ä–∞–π')) {
                return `<h1>${text}</h1>`;
            }
            
            // –ê–≤—Ç–æ—Ä
            if (text === '–ê–ª–∏–º –ö—ä—É—Ä—Ç—Å–µ–∏—Ç' || text.includes('–ê–ª–∏–º –ö—ä—É—Ä—Ç—Å–µ–∏—Ç')) {
                return `<div class="author">${text}</div>`;
            }
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã
            if (text.length < 80 && (
                text.startsWith('–ì–ª–∞–≤–∞') ||
                text.startsWith('–ì–õ–ê–í–ê') ||
                /^[–ê-–Ø–Å\s\-\.]{3,50}$/.test(text) ||
                text === text.toUpperCase()
            )) {
                return `<h2>${text}</h2>`;
            }
            
            // –û–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            return `<p>${text}</p>`;
        }).join('');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
    verifyPages(originalParagraphs) {
        const originalWordCount = originalParagraphs.reduce((total, p) => total + this.countWords(p), 0);
        const paginatedWordCount = this.state.pages.reduce((total, page) => total + page.wordCount, 0);
        
        const difference = Math.abs(originalWordCount - paginatedWordCount);
        
        if (difference > 20) {
            console.warn(`‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö: ${difference} —Å–ª–æ–≤`);
        } else {
            console.log('‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å');
        }
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—Ä–∏–≥–∏–Ω–∞–ª ${originalWordCount} —Å–ª–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${paginatedWordCount} —Å–ª–æ–≤`);
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEventListeners() {
        console.log('üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        if (this.elements.prevBtn) {
            this.elements.prevBtn.addEventListener('click', () => this.previousPage());
        }
        if (this.elements.nextBtn) {
            this.elements.nextBtn.addEventListener('click', () => this.nextPage());
        }
        
        // –ó–æ–Ω—ã –∫–∞—Å–∞–Ω–∏—è
        if (this.elements.leftZone) {
            this.elements.leftZone.addEventListener('click', () => this.previousPage());
        }
        if (this.elements.rightZone) {
            this.elements.rightZone.addEventListener('click', () => this.nextPage());
        }
        if (this.elements.centerZone) {
            this.elements.centerZone.addEventListener('click', () => this.toggleUI());
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        if (this.elements.menuBtn) {
            this.elements.menuBtn.addEventListener('click', () => this.toggleSettings());
        }
        if (this.elements.settingsOverlay) {
            this.elements.settingsOverlay.addEventListener('click', () => this.hideSettings());
        }
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        document.addEventListener('keydown', (e) => this.handleKeydown(e));
        
        console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    handleKeydown(e) {
        if (e.target.tagName === 'INPUT') return;
        
        switch (e.key) {
            case 'ArrowLeft':
            case 'PageUp':
                e.preventDefault();
                this.previousPage();
                break;
            case 'ArrowRight':
            case 'PageDown':
            case ' ':
                e.preventDefault();
                this.nextPage();
                break;
            case 'Home':
                this.goToPage(0);
                break;
            case 'End':
                this.goToPage(this.state.totalPages - 1);
                break;
            case 'Escape':
                if (this.state.isSettingsVisible) {
                    this.hideSettings();
                } else if (this.state.isUIVisible) {
                    this.hideUI();
                }
                break;
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    renderCurrentPage() {
        const currentPage = this.state.pages[this.state.currentPageIndex];
        if (!currentPage || !this.elements.pageContent) {
            console.warn('–ù–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }
        
        // –ü–ª–∞–≤–Ω–∞—è —Å–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        this.elements.pageContent.style.opacity = '0.7';
        
        setTimeout(() => {
            this.elements.pageContent.innerHTML = currentPage.content;
            this.elements.pageContent.style.opacity = '1';
            this.updateUI();
            this.saveProgress();
        }, 100);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateUI() {
        const current = this.state.currentPageIndex + 1;
        const total = this.state.totalPages;
        const progress = total > 1 ? (this.state.currentPageIndex / (total - 1)) * 100 : 0;
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å
        if (this.elements.progressFill) {
            this.elements.progressFill.style.width = `${progress}%`;
        }
        
        // –°—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∞—Ö)
        if (this.elements.currentPage) {
            this.elements.currentPage.textContent = Math.round(progress).toString();
        }
        
        // –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è
        if (this.elements.readingTime) {
            const remainingPages = total - current;
            const minutes = Math.ceil(remainingPages * 1.2);
            this.elements.readingTime.textContent = `${minutes} –º–∏–Ω`;
        }
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.elements.prevBtn) {
            this.elements.prevBtn.disabled = this.state.currentPageIndex === 0;
        }
        if (this.elements.nextBtn) {
            this.elements.nextBtn.disabled = this.state.currentPageIndex === total - 1;
        }
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nextPage() {
        if (this.state.currentPageIndex < this.state.totalPages - 1) {
            this.state.currentPageIndex++;
            this.renderCurrentPage();
        }
    }

    previousPage() {
        if (this.state.currentPageIndex > 0) {
            this.state.currentPageIndex--;
            this.renderCurrentPage();
        }
    }

    goToPage(pageIndex) {
        const clampedIndex = Math.max(0, Math.min(pageIndex, this.state.totalPages - 1));
        if (clampedIndex !== this.state.currentPageIndex) {
            this.state.currentPageIndex = clampedIndex;
            this.renderCurrentPage();
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI
    toggleUI() {
        if (this.state.isUIVisible) {
            this.hideUI();
        } else {
            this.showUI();
        }
    }

    showUI() {
        this.state.isUIVisible = true;
        if (this.elements.topBar) this.elements.topBar.classList.add('visible');
        if (this.elements.bottomBar) this.elements.bottomBar.classList.add('visible');
    }

    hideUI() {
        this.state.isUIVisible = false;
        if (this.elements.topBar) this.elements.topBar.classList.remove('visible');
        if (this.elements.bottomBar) this.elements.bottomBar.classList.remove('visible');
    }

    showUIBriefly() {
        this.showUI();
        setTimeout(() => {
            if (!this.state.isSettingsVisible) {
                this.hideUI();
            }
        }, 3000);
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    toggleSettings() {
        if (this.state.isSettingsVisible) {
            this.hideSettings();
        } else {
            this.showSettings();
        }
    }

    showSettings() {
        this.state.isSettingsVisible = true;
        if (this.elements.settingsPanel) this.elements.settingsPanel.classList.add('visible');
        this.showUI();
    }

    hideSettings() {
        this.state.isSettingsVisible = false;
        if (this.elements.settingsPanel) this.elements.settingsPanel.classList.remove('visible');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    loadSettings() {
        try {
            const saved = localStorage.getItem(this.STORAGE_KEY + '-settings');
            if (saved) {
                const settings = JSON.parse(saved);
                Object.assign(this.state.settings, settings);
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
        }
        this.applySettings();
    }

    saveSettings() {
        try {
            localStorage.setItem(this.STORAGE_KEY + '-settings', JSON.stringify(this.state.settings));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
        }
    }

    applySettings() {
        const { theme, fontSize, lineHeight, alignment, brightness } = this.state.settings;
        
        document.body.setAttribute('data-theme', theme);
        document.documentElement.style.filter = `brightness(${brightness}%)`;
        
        if (this.elements.pageContent) {
            this.elements.pageContent.style.fontSize = `${fontSize}px`;
            this.elements.pageContent.style.lineHeight = lineHeight.toString();
            this.elements.pageContent.style.textAlign = alignment;
        }
    }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
    saveProgress() {
        try {
            const progress = {
                pageIndex: this.state.currentPageIndex,
                totalPages: this.state.totalPages,
                timestamp: Date.now()
            };
            localStorage.setItem(this.STORAGE_KEY + '-progress', JSON.stringify(progress));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:', error);
        }
    }

    loadProgress() {
        try {
            const saved = localStorage.getItem(this.STORAGE_KEY + '-progress');
            if (saved) {
                const progress = JSON.parse(saved);
                if (progress.pageIndex < this.state.totalPages) {
                    this.state.currentPageIndex = progress.pageIndex;
                }
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:', error);
        }
    }

    // –£—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
    updateLoadingStatus(message) {
        if (this.elements.loadingStatus) {
            this.elements.loadingStatus.textContent = message;
        }
        console.log('üîÑ', message);
    }

    hideLoading() {
        if (this.elements.loadingScreen) {
            this.elements.loadingScreen.classList.add('hidden');
        }
        if (this.elements.readerApp) {
            this.elements.readerApp.style.display = 'flex';
        }
        
        setTimeout(() => {
            if (this.elements.loadingScreen) {
                this.elements.loadingScreen.style.display = 'none';
            }
        }, 300);
    }

    showError(message) {
        this.updateLoadingStatus(message);
        console.error('‚ùå', message);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üèÅ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ —Ä–∏–¥–µ—Ä–∞...');
    
    try {
        window.reader = new YandexStyleReader();
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        document.body.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: center; height: 100vh; background: #000; color: #fff; font-family: Arial, sans-serif; text-align: center;">
                <div>
                    <h2>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h2>
                    <p>${error.message}</p>
                    <button onclick="location.reload()" style="margin-top: 20px; padding: 10px 20px; background: #007aff; color: white; border: none; border-radius: 8px; cursor: pointer;">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
                </div>
            </div>
        `;
    }
});

/**
 * TypeScript-–ø–æ–¥–æ–±–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ (–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö)
 * interface ReaderState {
 *   bookContent: string;
 *   pages: Page[];
 *   currentPageIndex: number;
 *   totalPages: number;
 *   isUIVisible: boolean;
 *   isSettingsOpen: boolean;
 *   settings: ReaderSettings;
 * }
 * 
 * interface Page {
 *   id: number;
 *   content: string;
 *   wordCount: number;
 * }
 * 
 * interface ReaderSettings {
 *   theme: 'sepia' | 'gray' | 'dark' | 'auto';
 *   fontSize: number;
 *   lineHeight: number;
 *   textAlign: 'left' | 'justify' | 'center';
 *   brightness: number;
 *   scrollMode: boolean;
 * }
 */

/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏–¥–µ—Ä –≤ —Å—Ç–∏–ª–µ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TypeScript-–ø–æ–¥–æ–±–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –ø—Ä—è–º–æ–π DOM —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
 */
class YandexBooksReader {
    /**
     * @type {ReaderState}
     */
    #state = {
        bookContent: '',
        pages: [],
        currentPageIndex: 0,
        totalPages: 0,
        isUIVisible: false,
        isSettingsOpen: false,
        settings: {
            theme: 'dark',
            fontSize: 18,
            lineHeight: 1.6,
            textAlign: 'justify',
            brightness: 100,
            scrollMode: false
        }
    };

    /**
     * @type {Object<string, HTMLElement>}
     */
    #elements = {};

    /**
     * @type {number}
     */
    #wordsPerPage = 280;

    /**
     * @type {string}
     */
    #storageKey = 'yandex-books-reader';

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∏–¥–µ—Ä
     */
    constructor() {
        this.#bindDOMElements();
        this.#init();
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã
     * @private
     */
    #bindDOMElements() {
        const elementSelectors = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            loadingOverlay: 'loadingOverlay',
            loadingStatus: 'loadingStatus',
            readerContainer: 'readerContainer',
            
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å
            topNavigation: 'topNavigation',
            bottomControls: 'bottomControls',
            readingProgress: 'readingProgress',
            progressFill: 'progressFill',
            
            // –ö–æ–Ω—Ç–µ–Ω—Ç
            readingViewport: 'readingViewport',
            pageContent: 'pageContent',
            currentProgress: 'currentProgress',
            readingTime: 'readingTime',
            
            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            prevButton: 'prevButton',
            nextButton: 'nextButton',
            settingsButton: 'settingsButton',
            backButton: 'backButton',
            
            // –ó–æ–Ω—ã –∫–∞—Å–∞–Ω–∏—è
            leftTouchZone: 'leftTouchZone',
            centerTouchZone: 'centerTouchZone',
            rightTouchZone: 'rightTouchZone',
            
            // –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settingsDrawer: 'settingsDrawer',
            settingsBackdrop: 'settingsBackdrop',
            closeSettingsButton: 'closeSettingsButton',
            
            // –ö–æ–Ω—Ç—Ä–æ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
            brightnessSlider: 'brightnessSlider',
            decreaseFontSize: 'decreaseFontSize',
            increaseFontSize: 'increaseFontSize',
            scrollModeToggle: 'scrollModeToggle'
        };

        Object.entries(elementSelectors).forEach(([key, id]) => {
            const element = document.getElementById(id);
            if (element) {
                this.#elements[key] = element;
            } else {
                console.warn(`‚ö†Ô∏è Element not found: ${id}`);
            }
        });

        console.log(`üîó DOM elements bound: ${Object.keys(this.#elements).length}`);
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏–¥–µ—Ä–∞
     * @private
     */
    async #init() {
        try {
            console.log('üöÄ Initializing Yandex Books Reader...');
            
            this.#updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            this.#loadSettings();
            
            this.#updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏...');
            await this.#loadBookFile();
            
            this.#updateLoadingStatus('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
            this.#createPages();
            
            this.#updateLoadingStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            this.#setupEventHandlers();
            this.#loadProgress();
            
            this.#renderCurrentPage();
            this.#hideLoading();
            this.#showUITemporarily();
            
            console.log('‚úÖ Reader initialized successfully');
            console.log(`üìä Total pages: ${this.#state.totalPages}`);
            console.log(`üìù Words per page: ${this.#wordsPerPage}`);
            
        } catch (error) {
            console.error('‚ùå Reader initialization failed:', error);
            this.#showError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∫–Ω–∏–≥–∏
     * @private
     */
    async #loadBookFile() {
        try {
            const response = await fetch('Khadzhi-Girai.txt');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            this.#state.bookContent = await response.text();
            
            if (!this.#state.bookContent.trim()) {
                throw new Error('–§–∞–π–ª –∫–Ω–∏–≥–∏ –ø—É—Å—Ç');
            }
            
            console.log(`üìö Book loaded: ${this.#state.bookContent.length} characters`);
            
        } catch (error) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É: ${error.message}`);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * @private
     */
    #createPages() {
        console.log('üìÑ Creating pages...');
        
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        const normalizedText = this.#preprocessText(this.#state.bookContent);
        const paragraphs = this.#splitTextIntoParagraphs(normalizedText);
        
        this.#state.pages = [];
        let currentPageParagraphs = [];
        let currentWordCount = 0;
        
        console.log(`üìù Processing ${paragraphs.length} paragraphs...`);
        
        // –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        for (let i = 0; i < paragraphs.length; i++) {
            const paragraph = paragraphs[i].trim();
            const paragraphWordCount = this.#countWords(paragraph);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (currentWordCount + paragraphWordCount > this.#wordsPerPage && currentPageParagraphs.length > 0) {
                // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                this.#addPage(currentPageParagraphs, currentWordCount);
                
                // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                currentPageParagraphs = [paragraph];
                currentWordCount = paragraphWordCount;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                currentPageParagraphs.push(paragraph);
                currentWordCount += paragraphWordCount;
            }
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if (i % 25 === 0) {
                this.#updateLoadingStatus(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + 1}/${paragraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...`);
                await this.#delay(1);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        if (currentPageParagraphs.length > 0) {
            this.#addPage(currentPageParagraphs, currentWordCount);
        }
        
        this.#state.totalPages = this.#state.pages.length;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        this.#validatePagination(paragraphs);
        
        console.log(`‚úÖ Pages created: ${this.#state.totalPages}`);
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç
     * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @returns {string} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @private
     */
    #preprocessText(text) {
        return text
            .replace(/\r\n/g, '\n')                // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
            .replace(/\n{3,}/g, '\n\n')           // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
            .replace(/\s+$/gm, '')                // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
            .trim();                              // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    }

    /**
     * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
     * @param {string} text - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @returns {string[]} –ú–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
     * @private
     */
    #splitTextIntoParagraphs(text) {
        return text
            .split('\n\n')
            .filter(paragraph => paragraph.trim().length > 0);
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
     * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
     * @private
     */
    #countWords(text) {
        return text
            .split(/\s+/)
            .filter(word => word.length > 0).length;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     * @param {string[]} paragraphs - –ú–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @param {number} wordCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     * @private
     */
    #addPage(paragraphs, wordCount) {
        const formattedContent = this.#formatPageContent(paragraphs);
        
        /** @type {Page} */
        const page = {
            id: this.#state.pages.length,
            content: formattedContent,
            wordCount: wordCount
        };
        
        this.#state.pages.push(page);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ HTML
     * @param {string[]} paragraphs - –ú–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
     * @returns {string} HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @private
     */
    #formatPageContent(paragraphs) {
        return paragraphs
            .map(paragraph => this.#formatParagraph(paragraph.trim()))
            .join('');
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
     * @param {string} text - –¢–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
     * @returns {string} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
     * @private
     */
    #formatParagraph(text) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–∞–∑–º–µ—Ç–∫—É
        if (this.#isMainTitle(text)) {
            return `<h1>${this.#escapeHtml(text)}</h1>`;
        }
        
        if (this.#isAuthor(text)) {
            return `<div class="author">${this.#escapeHtml(text)}</div>`;
        }
        
        if (this.#isChapterTitle(text)) {
            return `<h2>${this.#escapeHtml(text)}</h2>`;
        }
        
        // –û–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        return `<p>${this.#escapeHtml(text)}</p>`;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫–Ω–∏–≥–∏
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean}
     * @private
     */
    #isMainTitle(text) {
        return text === '–•–∞–¥–∂–∏-–ì–∏—Ä–∞–π' || text.includes('–•–∞–¥–∂–∏-–ì–∏—Ä–∞–π');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean}
     * @private
     */
    #isAuthor(text) {
        return text === '–ê–ª–∏–º –ö—ä—É—Ä—Ç—Å–µ–∏—Ç' || text.includes('–ê–ª–∏–º –ö—ä—É—Ä—Ç—Å–µ–∏—Ç');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≥–ª–∞–≤—ã
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean}
     * @private
     */
    #isChapterTitle(text) {
        return text.length < 80 && (
            text.startsWith('–ì–ª–∞–≤–∞') ||
            text.startsWith('–ì–õ–ê–í–ê') ||
            /^[–ê-–Ø–Å\s\-\.]{3,50}$/.test(text) ||
            text === text.toUpperCase()
        );
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–∏–º–≤–æ–ª—ã
     * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @private
     */
    #escapeHtml(text) {
        const escapeMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        };
        
        return text.replace(/[&<>"']/g, match => escapeMap[match]);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     * @param {string[]} originalParagraphs - –ò—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
     * @private
     */
    #validatePagination(originalParagraphs) {
        const originalWordCount = originalParagraphs.reduce(
            (total, paragraph) => total + this.#countWords(paragraph), 0
        );
        
        const paginatedWordCount = this.#state.pages.reduce(
            (total, page) => total + page.wordCount, 0
        );
        
        const difference = Math.abs(originalWordCount - paginatedWordCount);
        
        if (difference > 25) {
            console.warn(`‚ö†Ô∏è Potential data loss detected: ${difference} words`);
        } else {
            console.log('‚úÖ Pagination completed without significant data loss');
        }
        
        console.log(`üìä Word count - Original: ${originalWordCount}, Paginated: ${paginatedWordCount}`);
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     * @private
     */
    #setupEventHandlers() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        this.#bindNavigationEvents();
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        this.#bindUIControlEvents();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.#bindSettingsEvents();
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        this.#bindKeyboardEvents();
        
        // –ñ–µ—Å—Ç–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.#bindGestureEvents();
        
        console.log('üéÆ Event handlers set up');
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     * @private
     */
    #bindNavigationEvents() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.#elements.prevButton?.addEventListener('click', () => this.#goToPreviousPage());
        this.#elements.nextButton?.addEventListener('click', () => this.#goToNextPage());
        
        // –ó–æ–Ω—ã –∫–∞—Å–∞–Ω–∏—è
        this.#elements.leftTouchZone?.addEventListener('click', () => this.#goToPreviousPage());
        this.#elements.rightTouchZone?.addEventListener('click', () => this.#goToNextPage());
        this.#elements.centerTouchZone?.addEventListener('click', () => this.#toggleUI());
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
     * @private
     */
    #bindUIControlEvents() {
        this.#elements.settingsButton?.addEventListener('click', () => this.#openSettings());
        this.#elements.backButton?.addEventListener('click', () => this.#handleBackAction());
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @private
     */
    #bindSettingsEvents() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        this.#elements.closeSettingsButton?.addEventListener('click', () => this.#closeSettings());
        this.#elements.settingsBackdrop?.addEventListener('click', () => this.#closeSettings());
        
        // –ö–æ–Ω—Ç—Ä–æ–ª—å —è—Ä–∫–æ—Å—Ç–∏
        this.#elements.brightnessSlider?.addEventListener('input', (event) => {
            this.#updateBrightness(parseInt(event.target.value));
        });
        
        // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        this.#elements.decreaseFontSize?.addEventListener('click', () => this.#adjustFontSize(-1));
        this.#elements.increaseFontSize?.addEventListener('click', () => this.#adjustFontSize(1));
        
        // –†–µ–∂–∏–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        this.#elements.scrollModeToggle?.addEventListener('change', (event) => {
            this.#toggleScrollMode(event.target.checked);
        });
        
        // –í—ã–±–æ—Ä —Ç–µ–º—ã
        document.querySelectorAll('.theme-option').forEach(button => {
            button.addEventListener('click', () => {
                const theme = button.dataset.theme;
                if (theme) this.#changeTheme(theme);
            });
        });
        
        // –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        document.querySelectorAll('.spacing-option').forEach(button => {
            button.addEventListener('click', () => {
                const spacing = parseFloat(button.dataset.spacing);
                if (spacing) this.#changeLineHeight(spacing);
            });
        });
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        document.querySelectorAll('.align-option').forEach(button => {
            button.addEventListener('click', () => {
                const alignment = button.dataset.align;
                if (alignment) this.#changeTextAlignment(alignment);
            });
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     * @private
     */
    #bindKeyboardEvents() {
        document.addEventListener('keydown', (event) => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω input
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
                return;
            }
            
            switch (event.key) {
                case 'ArrowLeft':
                case 'PageUp':
                case 'h':
                    event.preventDefault();
                    this.#goToPreviousPage();
                    break;
                    
                case 'ArrowRight':
                case 'PageDown':
                case 'l':
                case ' ':
                    event.preventDefault();
                    this.#goToNextPage();
                    break;
                    
                case 'Home':
                case 'g':
                    event.preventDefault();
                    this.#goToPage(0);
                    break;
                    
                case 'End':
                case 'G':
                    event.preventDefault();
                    this.#goToPage(this.#state.totalPages - 1);
                    break;
                    
                case 'j':
                    event.preventDefault();
                    this.#toggleUI();
                    break;
                    
                case 's':
                    event.preventDefault();
                    this.#toggleSettings();
                    break;
                    
                case 'Escape':
                    if (this.#state.isSettingsOpen) {
                        this.#closeSettings();
                    } else if (this.#state.isUIVisible) {
                        this.#hideUI();
                    }
                    break;
            }
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∂–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
     * @private
     */
    #bindGestureEvents() {
        let touchStartX = 0;
        let touchStartY = 0;
        const swipeThreshold = 50;
        
        this.#elements.readingViewport?.addEventListener('touchstart', (event) => {
            touchStartX = event.touches[0].clientX;
            touchStartY = event.touches[0].clientY;
        });
        
        this.#elements.readingViewport?.addEventListener('touchend', (event) => {
            const touchEndX = event.changedTouches[0].clientX;
            const touchEndY = event.changedTouches[0].clientY;
            
            const deltaX = touchEndX - touchStartX;
            const deltaY = touchEndY - touchStartY;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
            if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > swipeThreshold) {
                if (deltaX > 0) {
                    this.#goToPreviousPage();
                } else {
                    this.#goToNextPage();
                }
            }
        });
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø—Ä—è–º–æ–π DOM —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥)
     * @private
     */
    #renderCurrentPage() {
        const currentPage = this.#state.pages[this.#state.currentPageIndex];
        
        if (!currentPage || !this.#elements.pageContent) {
            console.warn('‚ö†Ô∏è Cannot render page - missing page or content element');
            return;
        }
        
        // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM –±–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ DOM
        this.#performDirectDOMUpdate(currentPage.content);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.#updateInterfaceState();
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.#saveProgress();
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
     * @param {string} content - HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @private
     */
    #performDirectDOMUpdate(content) {
        // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        this.#elements.pageContent.style.opacity = '0.7';
        this.#elements.pageContent.style.transform = 'translateY(8px)';
        
        requestAnimationFrame(() => {
            // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ innerHTML (–±–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ DOM)
            this.#elements.pageContent.innerHTML = content;
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –Ω–æ–≤–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
            this.#applyTypographySettings();
            
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            requestAnimationFrame(() => {
                this.#elements.pageContent.style.opacity = '1';
                this.#elements.pageContent.style.transform = 'translateY(0)';
            });
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     * @private
     */
    #updateInterfaceState() {
        const currentIndex = this.#state.currentPageIndex;
        const totalPages = this.#state.totalPages;
        const progressPercentage = totalPages > 1 ? (currentIndex / (totalPages - 1)) * 100 : 0;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (this.#elements.progressFill) {
            this.#elements.progressFill.style.width = `${progressPercentage}%`;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∞—Ö)
        if (this.#elements.currentProgress) {
            this.#elements.currentProgress.textContent = Math.round(progressPercentage).toString();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è
        if (this.#elements.readingTime) {
            const remainingPages = totalPages - currentIndex - 1;
            const estimatedMinutes = Math.ceil(remainingPages * (this.#wordsPerPage / 220));
            this.#elements.readingTime.textContent = `${estimatedMinutes} –º–∏–Ω`;
        }
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.#elements.prevButton) {
            this.#elements.prevButton.disabled = currentIndex === 0;
        }
        
        if (this.#elements.nextButton) {
            this.#elements.nextButton.disabled = currentIndex === totalPages - 1;
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     * @private
     */
    #goToNextPage() {
        if (this.#state.currentPageIndex < this.#state.totalPages - 1) {
            this.#state.currentPageIndex++;
            this.#renderCurrentPage();
            
            console.log(`üìñ Next page: ${this.#state.currentPageIndex + 1}/${this.#state.totalPages}`);
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     * @private
     */
    #goToPreviousPage() {
        if (this.#state.currentPageIndex > 0) {
            this.#state.currentPageIndex--;
            this.#renderCurrentPage();
            
            console.log(`üìñ Previous page: ${this.#state.currentPageIndex + 1}/${this.#state.totalPages}`);
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     * @param {number} pageIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã (0-based)
     * @private
     */
    #goToPage(pageIndex) {
        const clampedIndex = Math.max(0, Math.min(pageIndex, this.#state.totalPages - 1));
        
        if (clampedIndex !== this.#state.currentPageIndex) {
            this.#state.currentPageIndex = clampedIndex;
            this.#renderCurrentPage();
            
            console.log(`üìñ Go to page: ${this.#state.currentPageIndex + 1}/${this.#state.totalPages}`);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     * @private
     */
    #toggleUI() {
        if (this.#state.isUIVisible) {
            this.#hideUI();
        } else {
            this.#showUI();
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     * @private
     */
    #showUI() {
        this.#state.isUIVisible = true;
        
        this.#elements.topNavigation?.classList.add('visible');
        this.#elements.bottomControls?.classList.add('visible');
        
        console.log('üëÅÔ∏è UI shown');
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     * @private
     */
    #hideUI() {
        this.#state.isUIVisible = false;
        
        this.#elements.topNavigation?.classList.remove('visible');
        this.#elements.bottomControls?.classList.remove('visible');
        
        console.log('üôà UI hidden');
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ä–µ–º–µ–Ω–Ω–æ
     * @private
     */
    #showUITemporarily() {
        this.#showUI();
        
        setTimeout(() => {
            if (!this.#state.isSettingsOpen) {
                this.#hideUI();
            }
        }, 3000);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @private
     */
    #toggleSettings() {
        if (this.#state.isSettingsOpen) {
            this.#closeSettings();
        } else {
            this.#openSettings();
        }
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @private
     */
    #openSettings() {
        this.#state.isSettingsOpen = true;
        
        this.#elements.settingsDrawer?.classList.add('visible');
        this.#showUI(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        this.#updateSettingsInterface();
        
        console.log('‚öôÔ∏è Settings opened');
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @private
     */
    #closeSettings() {
        this.#state.isSettingsOpen = false;
        
        this.#elements.settingsDrawer?.classList.remove('visible');
        
        console.log('‚öôÔ∏è Settings closed');
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @private
     */
    #updateSettingsInterface() {
        // –Ø—Ä–∫–æ—Å—Ç—å
        if (this.#elements.brightnessSlider) {
            this.#elements.brightnessSlider.value = this.#state.settings.brightness.toString();
        }
        
        // –†–µ–∂–∏–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        if (this.#elements.scrollModeToggle) {
            this.#elements.scrollModeToggle.checked = this.#state.settings.scrollMode;
        }
        
        // –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞
        document.querySelectorAll('.theme-option').forEach(option => {
            const isActive = option.dataset.theme === this.#state.settings.theme;
            option.classList.toggle('active', isActive);
        });
        
        // –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        document.querySelectorAll('.spacing-option').forEach(option => {
            const spacing = parseFloat(option.dataset.spacing);
            const isActive = Math.abs(spacing - this.#state.settings.lineHeight) < 0.1;
            option.classList.toggle('active', isActive);
        });
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        document.querySelectorAll('.align-option').forEach(option => {
            const isActive = option.dataset.align === this.#state.settings.textAlign;
            option.classList.toggle('active', isActive);
        });
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
     * @param {string} themeName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
     * @private
     */
    #changeTheme(themeName) {
        this.#state.settings.theme = themeName;
        document.body.setAttribute('data-theme', themeName);
        this.#saveSettings();
        this.#updateSettingsInterface();
        
        console.log(`üé® Theme changed to: ${themeName}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —è—Ä–∫–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
     * @param {number} brightness - –£—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ (30-100)
     * @private
     */
    #updateBrightness(brightness) {
        this.#state.settings.brightness = brightness;
        document.documentElement.style.filter = `brightness(${brightness}%)`;
        this.#saveSettings();
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
     * @param {number} delta - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (-1 –∏–ª–∏ +1)
     * @private
     */
    #adjustFontSize(delta) {
        const newSize = Math.max(14, Math.min(24, this.#state.settings.fontSize + delta));
        
        if (newSize !== this.#state.settings.fontSize) {
            this.#state.settings.fontSize = newSize;
            this.#applyTypographySettings();
            this.#saveSettings();
            
            console.log(`üìè Font size changed to: ${newSize}px`);
        }
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
     * @param {number} lineHeight - –ù–æ–≤—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
     * @private
     */
    #changeLineHeight(lineHeight) {
        this.#state.settings.lineHeight = lineHeight;
        this.#applyTypographySettings();
        this.#saveSettings();
        this.#updateSettingsInterface();
        
        console.log(`üìê Line height changed to: ${lineHeight}`);
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
     * @param {string} alignment - –¢–∏–ø –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
     * @private
     */
    #changeTextAlignment(alignment) {
        this.#state.settings.textAlign = alignment;
        this.#applyTypographySettings();
        this.#saveSettings();
        this.#updateSettingsInterface();
        
        console.log(`üìÑ Text alignment changed to: ${alignment}`);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
     * @param {boolean} enabled - –í–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
     * @private
     */
    #toggleScrollMode(enabled) {
        this.#state.settings.scrollMode = enabled;
        document.body.classList.toggle('scroll-mode', enabled);
        this.#saveSettings();
        
        console.log(`üìú Scroll mode ${enabled ? 'enabled' : 'disabled'}`);
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
     * @private
     */
    #applyTypographySettings() {
        if (!this.#elements.pageContent) return;
        
        const { fontSize, lineHeight, textAlign } = this.#state.settings;
        
        this.#elements.pageContent.style.fontSize = `${fontSize}px`;
        this.#elements.pageContent.style.lineHeight = lineHeight.toString();
        this.#elements.pageContent.style.textAlign = textAlign;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        document.documentElement.style.setProperty('--font-size-base', `${fontSize}px`);
        document.documentElement.style.setProperty('--line-height-base', lineHeight.toString());
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ "–ù–∞–∑–∞–¥"
     * @private
     */
    #handleBackAction() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
        console.log('‚¨ÖÔ∏è Back action');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
     * @private
     */
    #saveSettings() {
        try {
            localStorage.setItem(
                `${this.#storageKey}-settings`,
                JSON.stringify(this.#state.settings)
            );
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to save settings:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
     * @private
     */
    #loadSettings() {
        try {
            const savedSettings = localStorage.getItem(`${this.#storageKey}-settings`);
            
            if (savedSettings) {
                const parsedSettings = JSON.parse(savedSettings);
                Object.assign(this.#state.settings, parsedSettings);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to load settings:', error);
        }
        
        this.#applySettings();
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @private
     */
    #applySettings() {
        // –¢–µ–º–∞
        document.body.setAttribute('data-theme', this.#state.settings.theme);
        
        // –Ø—Ä–∫–æ—Å—Ç—å
        document.documentElement.style.filter = `brightness(${this.#state.settings.brightness}%)`;
        
        // –†–µ–∂–∏–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        document.body.classList.toggle('scroll-mode', this.#state.settings.scrollMode);
        
        // –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞
        this.#applyTypographySettings();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
     * @private
     */
    #saveProgress() {
        try {
            const progressData = {
                pageIndex: this.#state.currentPageIndex,
                totalPages: this.#state.totalPages,
                timestamp: Date.now()
            };
            
            localStorage.setItem(
                `${this.#storageKey}-progress`,
                JSON.stringify(progressData)
            );
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to save progress:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
     * @private
     */
    #loadProgress() {
        try {
            const savedProgress = localStorage.getItem(`${this.#storageKey}-progress`);
            
            if (savedProgress) {
                const progressData = JSON.parse(savedProgress);
                
                if (progressData.pageIndex < this.#state.totalPages) {
                    this.#state.currentPageIndex = progressData.pageIndex;
                    console.log(`üìñ Progress restored: page ${progressData.pageIndex + 1}`);
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to load progress:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
     * @private
     */
    #updateLoadingStatus(message) {
        if (this.#elements.loadingStatus) {
            this.#elements.loadingStatus.textContent = message;
        }
        console.log(`üîÑ ${message}`);
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
     * @private
     */
    #hideLoading() {
        this.#elements.loadingOverlay?.classList.add('hidden');
        
        if (this.#elements.readerContainer) {
            this.#elements.readerContainer.style.display = 'flex';
            this.#elements.readerContainer.classList.add('ready');
        }
        
        setTimeout(() => {
            if (this.#elements.loadingOverlay) {
                this.#elements.loadingOverlay.style.display = 'none';
            }
        }, 500);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     * @private
     */
    #showError(message) {
        this.#updateLoadingStatus(message);
        console.error(`‚ùå ${message}`);
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const spinner = document.querySelector('.loading-spinner');
        if (spinner) {
            spinner.style.display = 'none';
        }
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
     * @param {number} ms - –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
     * @returns {Promise<void>}
     * @private
     */
    #delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

/**
 * –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
 */
class StateSync {
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @static
     */
    static async syncState(state) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('üîÑ State sync:', {
            page: state.currentPageIndex,
            settings: state.settings,
            timestamp: Date.now()
        });
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log('üèÅ DOM loaded, initializing reader...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∏–¥–µ—Ä–∞
        window.yandexBooksReader = new YandexBooksReader();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)
        setInterval(() => {
            if (window.yandexBooksReader) {
                StateSync.syncState(window.yandexBooksReader._state);
            }
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
    } catch (error) {
        console.error('üí• Critical initialization error:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
        document.body.innerHTML = `
            <div style="
                display: flex; 
                align-items: center; 
                justify-content: center; 
                height: 100vh; 
                background: #000; 
                color: #fff; 
                font-family: -apple-system, BlinkMacSystemFont, sans-serif; 
                text-align: center;
                padding: 20px;
            ">
                <div>
                    <h1 style="font-size: 24px; margin-bottom: 16px;">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h1>
                    <p style="margin-bottom: 24px; opacity: 0.8;">${error.message}</p>
                    <button 
                        onclick="location.reload()" 
                        style="
                            padding: 12px 24px; 
                            background: #007aff; 
                            color: white; 
                            border: none; 
                            border-radius: 8px; 
                            cursor: pointer; 
                            font-size: 16px;
                        "
                    >
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }
});

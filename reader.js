// ========================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï
// ========================================

const BOOK_FILE = 'Khadzhi-Girai.txt';
const ITEMS_PER_PAGE = 5; // –ê–±–∑–∞—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
const STORAGE_KEY = 'book_reader_state';

let chapters = [];
let currentChapterIndex = 0;
let currentPageIndex = 0;
let totalPages = 0;
let bookmarkedPages = new Set();
let userSettings = {
    fontSize: 16,
    fontFamily: 'Inter',
    theme: 'light',
    textWidth: 'medium',
    lineHeight: 1.6
};

// ========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ========================================

document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Ç–∞–ª–∫–∏...');
    
    loadSettings();
    applySettings();
    setupEventListeners();
    
    await loadAndParseBook();
    renderCurrentPage();
    updateTableOfContents();
    loadBookmarkState();
    updateProgressBar();
    
    console.log('‚úÖ –ß–∏—Ç–∞–ª–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// ========================================
// –ó–ê–ì–†–£–ó–ö–ê –ò –ü–ê–†–°–ò–ù–ì –ö–ù–ò–ì–ò
// ========================================

async function loadAndParseBook() {
    try {
        console.log('üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏...');
        const response = await fetch(BOOK_FILE);
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
        }
        
        const text = await response.text();
        chapters = parseBook(text);
        
        console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chapters.length} –≥–ª–∞–≤`);
        console.log('–ì–ª–∞–≤—ã:', chapters.map(ch => ch.title));
        
        calculateTotalPages();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª ' + BOOK_FILE);
    }
}

function parseBook(text) {
    const chapterRegex = /^# (.+?)$/gm;
    const chapters = [];
    let match;
    let lastIndex = 0;

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≥–ª–∞–≤—ã
    while ((match = chapterRegex.exec(text)) !== null) {
        const chapterTitle = match[1].trim();
        const startIndex = match.index + match[0].length;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤—ã –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        const nextMatch = chapterRegex.exec(text);
        const endIndex = nextMatch ? nextMatch.index : text.length;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        if (nextMatch) {
            chapterRegex.lastIndex = endIndex;
        }
        
        const chapterContent = text.substring(startIndex, endIndex).trim();
        const paragraphs = parseChapterContent(chapterContent);
        
        chapters.push({
            title: chapterTitle,
            paragraphs: paragraphs
        });
        
        lastIndex = endIndex;
    }

    return chapters;
}

function parseChapterContent(content) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã (–¥–≤–æ–π–Ω—ã–µ –∏–ª–∏ –±–æ–ª—å—à–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤)
    const paragraphRegex = /\n\n+/;
    const rawParagraphs = content.split(paragraphRegex);
    
    return rawParagraphs
        .map(p => p.trim())
        .filter(p => p.length > 0)
        .map(p => p.replace(/\n/g, ' ')); // –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
}

// ========================================
// –†–ê–°–ß–ï–¢ –°–¢–†–ê–ù–ò–¶
// ========================================

function calculateTotalPages() {
    totalPages = 0;
    
    chapters.forEach(chapter => {
        const pageCount = Math.ceil(chapter.paragraphs.length / ITEMS_PER_PAGE);
        totalPages += pageCount;
        chapter.pages = pageCount;
    });
    
    console.log(`üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}`);
}

function getAbsolutePageIndex(chapterIndex, pageIndex) {
    let absoluteIndex = 0;
    
    for (let i = 0; i < chapterIndex; i++) {
        absoluteIndex += chapters[i].pages || 0;
    }
    
    absoluteIndex += pageIndex;
    return absoluteIndex;
}

// ========================================
// –†–ï–ù–î–ï–†–ò–ù–ì –°–¢–†–ê–ù–ò–¶–´
// ========================================

function renderCurrentPage() {
    const bookContent = document.getElementById('bookContent');
    bookContent.innerHTML = '';

    if (chapters.length === 0) {
        bookContent.innerHTML = '<div class="loading"><p>–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p></div>';
        return;
    }

    const chapter = chapters[currentChapterIndex];
    if (!chapter) {
        console.error('‚ùå –ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', currentChapterIndex);
        return;
    }

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≥–ª–∞–≤—ã
    const chapterEl = document.createElement('div');
    chapterEl.className = 'chapter';
    chapterEl.dataset.chapter = currentChapterIndex;

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã
    const titleEl = document.createElement('h2');
    titleEl.className = 'chapter-title';
    titleEl.textContent = chapter.title;
    chapterEl.appendChild(titleEl);

    // –ö–æ–Ω—Ç–µ–Ω—Ç –≥–ª–∞–≤—ã (–∞–±–∑–∞—Ü—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    const bodyEl = document.createElement('div');
    bodyEl.className = 'chapter-body';

    const startIdx = currentPageIndex * ITEMS_PER_PAGE;
    const endIdx = Math.min(startIdx + ITEMS_PER_PAGE, chapter.paragraphs.length);

    for (let i = startIdx; i < endIdx; i++) {
        const pEl = document.createElement('p');
        pEl.textContent = chapter.paragraphs[i];
        bodyEl.appendChild(pEl);
    }

    chapterEl.appendChild(bodyEl);

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–ª–∞–≤—ã)
    if (endIdx < chapter.paragraphs.length || currentChapterIndex < chapters.length - 1) {
        const dividerEl = document.createElement('div');
        dividerEl.className = 'chapter-divider';
        dividerEl.textContent = '* * *';
        chapterEl.appendChild(dividerEl);
    }

    bookContent.appendChild(chapterEl);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    updatePageInfo();
    updateBookmarkButton();

    // –°–∫—Ä–æ–ª–ª–∏–º –≤ –Ω–∞—á–∞–ª–æ
    document.querySelector('.reader-main').scrollTop = 0;
}

function updatePageInfo() {
    const currentAbsolutePage = getAbsolutePageIndex(currentChapterIndex, currentPageIndex) + 1;
    document.getElementById('pageNumber').textContent = currentAbsolutePage;
    document.getElementById('totalPages').textContent = totalPages;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.getElementById('prevPageBtn').disabled = currentAbsolutePage === 1;
    document.getElementById('nextPageBtn').disabled = currentAbsolutePage === totalPages;
}

// ========================================
// –ù–ê–í–ò–ì–ê–¶–ò–Ø
// ========================================

function nextPage() {
    const chapter = chapters[currentChapterIndex];
    const pagesInChapter = Math.ceil(chapter.paragraphs.length / ITEMS_PER_PAGE);

    if (currentPageIndex < pagesInChapter - 1) {
        currentPageIndex++;
    } else if (currentChapterIndex < chapters.length - 1) {
        currentChapterIndex++;
        currentPageIndex = 0;
    }

    saveBookState();
    renderCurrentPage();
    updateProgressBar();
}

function prevPage() {
    if (currentPageIndex > 0) {
        currentPageIndex--;
    } else if (currentChapterIndex > 0) {
        currentChapterIndex--;
        const pagesInChapter = Math.ceil(chapters[currentChapterIndex].paragraphs.length / ITEMS_PER_PAGE);
        currentPageIndex = pagesInChapter - 1;
    }

    saveBookState();
    renderCurrentPage();
    updateProgressBar();
}

function goToChapter(chapterIndex) {
    currentChapterIndex = chapterIndex;
    currentPageIndex = 0;
    saveBookState();
    renderCurrentPage();
    updateProgressBar();
    updateTableOfContents();
    closeModal('tocModal');
}

// ========================================
// –ó–ê–ö–õ–ê–î–ö–ò
// ========================================

function toggleBookmark() {
    const currentAbsolutePage = getAbsolutePageIndex(currentChapterIndex, currentPageIndex);
    
    if (bookmarkedPages.has(currentAbsolutePage)) {
        bookmarkedPages.delete(currentAbsolutePage);
        showNotification('–ó–∞–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
    } else {
        bookmarkedPages.add(currentAbsolutePage);
        showNotification('–ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    updateBookmarkButton();
    saveBookmarkState();
}

function updateBookmarkButton() {
    const bookmarkBtn = document.getElementById('bookmarkBtn');
    const currentAbsolutePage = getAbsolutePageIndex(currentChapterIndex, currentPageIndex);
    
    if (bookmarkedPages.has(currentAbsolutePage)) {
        bookmarkBtn.innerHTML = '<i class="fas fa-bookmark"></i>';
    } else {
        bookmarkBtn.innerHTML = '<i class="far fa-bookmark"></i>';
    }
}

// ========================================
// –û–ì–õ–ê–í–õ–ï–ù–ò–ï
// ========================================

function updateTableOfContents() {
    const tocList = document.getElementById('tocList');
    tocList.innerHTML = '';

    chapters.forEach((chapter, index) => {
        const tocItem = document.createElement('div');
        tocItem.className = 'toc-item';
        if (index === currentChapterIndex) {
            tocItem.classList.add('active');
        }

        tocItem.innerHTML = `
            <strong>${index + 1}.</strong> ${chapter.title}
            <div style="font-size: 12px; opacity: 0.7; margin-top: 4px;">
                ${chapter.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤
            </div>
        `;

        tocItem.addEventListener('click', () => goToChapter(index));
        tocList.appendChild(tocItem);
    });
}

// ========================================
// –ù–ê–°–¢–†–û–ô–ö–ò
// ========================================

function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.getElementById('nextPageBtn').addEventListener('click', nextPage);
    document.getElementById('prevPageBtn').addEventListener('click', prevPage);
    document.getElementById('backBtn').addEventListener('click', () => window.history.back());

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    document.getElementById('tableOfContentsBtn').addEventListener('click', () => openModal('tocModal'));
    document.getElementById('settingsBtn').addEventListener('click', () => openModal('settingsModal'));
    document.getElementById('bookmarkBtn').addEventListener('click', toggleBookmark);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–µ–π
    document.querySelectorAll('.close-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const modal = e.target.closest('.modal');
            closeModal(modal.id);
        });
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    document.getElementById('fontSizeSlider').addEventListener('change', (e) => {
        userSettings.fontSize = parseInt(e.target.value);
        document.getElementById('fontSizeValue').textContent = userSettings.fontSize;
        applySettings();
        saveSettings();
    });

    document.getElementById('fontFamilySelect').addEventListener('change', (e) => {
        userSettings.fontFamily = e.target.value;
        applySettings();
        saveSettings();
    });

    document.getElementById('themeSelect').addEventListener('change', (e) => {
        userSettings.theme = e.target.value;
        applySettings();
        saveSettings();
    });

    document.getElementById('textWidthSelect').addEventListener('change', (e) => {
        userSettings.textWidth = e.target.value;
        applySettings();
        saveSettings();
    });

    document.getElementById('lineHeightSlider').addEventListener('change', (e) => {
        userSettings.lineHeight = parseFloat(e.target.value);
        document.getElementById('lineHeightValue').textContent = userSettings.lineHeight;
        applySettings();
        saveSettings();
    });

    document.getElementById('resetSettingsBtn').addEventListener('click', resetSettings);

    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', handleKeyPress);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–µ–π –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal(modal.id);
            }
        });
    });
}

function applySettings() {
    const root = document.documentElement;
    const body = document.body;
    const bookContent = document.getElementById('bookContent');

    // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    root.style.fontSize = userSettings.fontSize + 'px';

    // –®—Ä–∏—Ñ—Ç
    bookContent.style.fontFamily = userSettings.fontFamily + ', sans-serif';

    // –¢–µ–º–∞
    body.className = '';
    if (userSettings.theme === 'dark') {
        body.classList.add('dark-theme');
    } else if (userSettings.theme === 'sepia') {
        body.classList.add('sepia-theme');
    } else {
        body.classList.add('light-theme');
    }

    // –®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    bookContent.className = 'book-content width-' + userSettings.textWidth;

    // –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    root.style.setProperty('--line-height', userSettings.lineHeight);
    const paragraphs = document.querySelectorAll('.chapter-body p');
    paragraphs.forEach(p => {
        p.style.lineHeight = userSettings.lineHeight;
    });

    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:', userSettings);
}

function resetSettings() {
    userSettings = {
        fontSize: 16,
        fontFamily: 'Inter',
        theme: 'light',
        textWidth: 'medium',
        lineHeight: 1.6
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞—Å—Ç—Ä–æ–µ–∫
    document.getElementById('fontSizeSlider').value = 16;
    document.getElementById('fontSizeValue').textContent = '16';
    document.getElementById('fontFamilySelect').value = 'Inter';
    document.getElementById('themeSelect').value = 'light';
    document.getElementById('textWidthSelect').value = 'medium';
    document.getElementById('lineHeightSlider').value = 1.6;
    document.getElementById('lineHeightValue').textContent = '1.6';

    applySettings();
    saveSettings();
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
}

// ========================================
// –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò
// ========================================

function handleKeyPress(e) {
    if (document.querySelector('.modal:not(.hidden)')) {
        if (e.key === 'Escape') {
            const modal = document.querySelector('.modal:not(.hidden)');
            closeModal(modal.id);
        }
        return;
    }

    switch (e.key) {
        case 'ArrowRight':
            nextPage();
            e.preventDefault();
            break;
        case 'ArrowLeft':
            prevPage();
            e.preventDefault();
            break;
        case 'Escape':
            window.history.back();
            break;
    }

    if (e.ctrlKey || e.metaKey) {
        switch (e.key.toLowerCase()) {
            case 'b':
                toggleBookmark();
                e.preventDefault();
                break;
            case 's':
                openModal('settingsModal');
                e.preventDefault();
                break;
            case 't':
                openModal('tocModal');
                e.preventDefault();
                break;
        }
    }
}

// ========================================
// –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
// ========================================

function openModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.classList.remove('hidden');
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.classList.add('hidden');
}

// ========================================
// –ü–†–û–ì–†–ï–°–° –ë–ê–†
// ========================================

function updateProgressBar() {
    const currentAbsolutePage = getAbsolutePageIndex(currentChapterIndex, currentPageIndex) + 1;
    const percentage = (currentAbsolutePage / totalPages) * 100;
    document.getElementById('progressFill').style.width = percentage + '%';
}

// ========================================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
// ========================================

function showNotification(text) {
    const notification = document.getElementById('bookmarkNotification');
    document.getElementById('notificationText').textContent = text;
    notification.classList.remove('hidden');

    setTimeout(() => {
        notification.classList.add('hidden');
    }, 2000);
}

function showError(message) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', message);
    const bookContent = document.getElementById('bookContent');
    bookContent.innerHTML = `
        <div class="loading" style="color: red;">
            <i class="fas fa-exclamation-circle" style="font-size: 48px;"></i>
            <p>${message}</p>
        </div>
    `;
}

// ========================================
// –õ–û–ö–ê–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï
// ========================================

function saveBookState() {
    const state = {
        chapterIndex: currentChapterIndex,
        pageIndex: currentPageIndex,
        timestamp: new Date().toISOString()
    };
    localStorage.setItem(STORAGE_KEY + '_state', JSON.stringify(state));
}

function loadBookState() {
    const saved = localStorage.getItem(STORAGE_KEY + '_state');
    if (saved) {
        try {
            const state = JSON.parse(saved);
            currentChapterIndex = state.chapterIndex;
            currentPageIndex = state.pageIndex;
            console.log('üìç –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è —á—Ç–µ–Ω–∏—è:', state);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', e);
        }
    }
}

function saveBookmarkState() {
    const bookmarksArray = Array.from(bookmarkedPages);
    localStorage.setItem(STORAGE_KEY + '_bookmarks', JSON.stringify(bookmarksArray));
}

function loadBookmarkState() {
    const saved = localStorage.getItem(STORAGE_KEY + '_bookmarks');
    if (saved) {
        try {
            const bookmarksArray = JSON.parse(saved);
            bookmarkedPages = new Set(bookmarksArray);
            console.log('üîñ –ó–∞–∫–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', bookmarkedPages.size);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫:', e);
        }
    }
}

function saveSettings() {
    localStorage.setItem(STORAGE_KEY + '_settings', JSON.stringify(userSettings));
}

function loadSettings() {
    const saved = localStorage.getItem(STORAGE_KEY + '_settings');
    if (saved) {
        try {
            userSettings = { ...userSettings, ...JSON.parse(saved) };
            console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', userSettings);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞—Å—Ç—Ä–æ–µ–∫
    document.getElementById('fontSizeSlider').value = userSettings.fontSize;
    document.getElementById('fontSizeValue').textContent = userSettings.fontSize;
    document.getElementById('fontFamilySelect').value = userSettings.fontFamily;
    document.getElementById('themeSelect').value = userSettings.theme;
    document.getElementById('textWidthSelect').value = userSettings.textWidth;
    document.getElementById('lineHeightSlider').value = userSettings.lineHeight;
    document.getElementById('lineHeightValue').textContent = userSettings.lineHeight;
}

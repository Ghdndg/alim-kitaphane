/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏–¥–µ—Ä –≤ —Å—Ç–∏–ª–µ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –±–µ–∑ –ø–æ—Ç–µ—Ä—å —Ç–µ–∫—Å—Ç–∞
 */
class YandexBooksReader {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏–¥–µ—Ä–∞
        this.state = {
            bookContent: '',
            pages: [],
            currentPageIndex: 0,
            totalPages: 0,
            isUIVisible: false,
            isSettingsOpen: false,
            settings: {
                theme: 'dark',
                fontSize: 18,
                lineHeight: 1.6,
                textAlign: 'justify',
                brightness: 100,
                scrollMode: false
            }
        };

        this.elements = {};
        this.wordsPerPage = 200; // –£–ú–ï–ù–¨–®–ò–õ–ò –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        this.storageKey = 'yandex-books-reader';
        
        // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.bindDOMElements();
        this.init();
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã
     */
    bindDOMElements() {
        const elementSelectors = {
            loadingOverlay: 'loadingOverlay',
            loadingStatus: 'loadingStatus',
            readerContainer: 'readerContainer',
            topNavigation: 'topNavigation',
            bottomControls: 'bottomControls',
            readingProgress: 'readingProgress',
            progressFill: 'progressFill',
            readingViewport: 'readingViewport',
            pageContent: 'pageContent',
            currentProgress: 'currentProgress',
            readingTime: 'readingTime',
            prevButton: 'prevButton',
            nextButton: 'nextButton',
            settingsButton: 'settingsButton',
            backButton: 'backButton',
            leftTouchZone: 'leftTouchZone',
            centerTouchZone: 'centerTouchZone',
            rightTouchZone: 'rightTouchZone',
            settingsDrawer: 'settingsDrawer',
            settingsBackdrop: 'settingsBackdrop',
            closeSettingsButton: 'closeSettingsButton',
            brightnessSlider: 'brightnessSlider',
            decreaseFontSize: 'decreaseFontSize',
            increaseFontSize: 'increaseFontSize',
            scrollModeToggle: 'scrollModeToggle'
        };

        Object.entries(elementSelectors).forEach(([key, id]) => {
            const element = document.getElementById(id);
            if (element) {
                this.elements[key] = element;
                console.log(`‚úÖ Found element: ${id}`);
            } else {
                console.warn(`‚ö†Ô∏è Element not found: ${id}`);
            }
        });

        console.log(`üîó DOM elements bound: ${Object.keys(this.elements).length}`);
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏–¥–µ—Ä–∞
     */
    async init() {
        try {
            console.log('üöÄ Initializing Yandex Books Reader...');
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            this.loadSettings();
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏...');
            await this.loadBookFile();
            
            this.updateLoadingStatus('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
            this.createPages();
            
            this.updateLoadingStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            this.setupEventHandlers();
            this.loadProgress();
            
            this.renderCurrentPage();
            this.hideLoading();
            this.showUITemporarily();
            
            console.log('‚úÖ Reader initialized successfully');
            console.log(`üìä Total pages: ${this.state.totalPages}`);
            
        } catch (error) {
            console.error('‚ùå Reader initialization failed:', error);
            this.showError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∫–Ω–∏–≥–∏
     */
    async loadBookFile() {
        try {
            console.log('üìö Loading Khadzhi-Girai.txt...');
            
            const response = await fetch('Khadzhi-Girai.txt');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            this.state.bookContent = await response.text();
            
            if (!this.state.bookContent.trim()) {
                throw new Error('–§–∞–π–ª –∫–Ω–∏–≥–∏ –ø—É—Å—Ç');
            }
            
            console.log(`üìö Book loaded: ${this.state.bookContent.length} characters`);
            
        } catch (error) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É: ${error.message}`);
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    createPages() {
        console.log('üìÑ Creating pages...');
        
        // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        const normalizedText = this.preprocessText(this.state.bookContent);
        console.log(`üìù Normalized text length: ${normalizedText.length}`);
        
        // –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫—É—Å–∫–∏ –ø–æ —Å–ª–æ–≤–∞–º
        const allWords = normalizedText.split(/\s+/).filter(word => word.trim().length > 0);
        console.log(`üìù Total words in book: ${allWords.length}`);
        
        this.state.pages = [];
        
        // –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú: –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤
        for (let i = 0; i < allWords.length; i += this.wordsPerPage) {
            const pageWords = allWords.slice(i, i + this.wordsPerPage);
            const pageText = pageWords.join(' ');
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const formattedContent = this.formatSimplePage(pageText, i);
            
            this.state.pages.push({
                id: this.state.pages.length,
                content: formattedContent,
                wordCount: pageWords.length
            });
            
            console.log(`üìÑ Created page ${this.state.pages.length}: ${pageWords.length} words`);
        }
        
        this.state.totalPages = this.state.pages.length;
        
        console.log(`‚úÖ PAGES CREATED: ${this.state.totalPages} pages total`);
        console.log(`üìä Average words per page: ${this.wordsPerPage}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (this.state.totalPages <= 1) {
            console.error('‚ùå CRITICAL: Only 1 page created! This will break navigation!');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü
            this.createMorePages(normalizedText);
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    createMorePages(text) {
        console.log('üîß Force creating more pages...');
        
        // –ï—â–µ –±–æ–ª–µ–µ –º–µ–ª–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);
        console.log(`üìù Found ${sentences.length} sentences`);
        
        this.state.pages = [];
        const sentencesPerPage = Math.max(3, Math.floor(sentences.length / 50)); // –ú–∏–Ω–∏–º—É–º 50 —Å—Ç—Ä–∞–Ω–∏—Ü
        
        for (let i = 0; i < sentences.length; i += sentencesPerPage) {
            const pageSentences = sentences.slice(i, i + sentencesPerPage);
            const pageText = pageSentences.join('. ').trim() + '.';
            
            this.state.pages.push({
                id: this.state.pages.length,
                content: `<p>${this.escapeHtml(pageText)}</p>`,
                wordCount: this.countWords(pageText)
            });
        }
        
        this.state.totalPages = this.state.pages.length;
        console.log(`‚úÖ FORCE CREATED: ${this.state.totalPages} pages`);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    formatSimplePage(text, startIndex) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (startIndex === 0) {
            return `
                <h1>–•–∞–¥–∂–∏-–ì–∏—Ä–∞–π</h1>
                <div class="author">–ê–ª–∏–º –ö—ä—É—Ä—Ç—Å–µ–∏—Ç</div>
                <p>${this.escapeHtml(text)}</p>
            `;
        }
        
        return `<p>${this.escapeHtml(text)}</p>`;
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç
     */
    preprocessText(text) {
        return text
            .replace(/\r\n/g, '\n')
            .replace(/\n{3,}/g, '\n\n')
            .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
            .trim();
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
     */
    countWords(text) {
        return text.split(/\s+/).filter(word => word.length > 0).length;
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–∏–º–≤–æ–ª–æ–≤
     */
    escapeHtml(text) {
        const escapeMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        };
        
        return text.replace(/[&<>"']/g, match => escapeMap[match]);
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        console.log('üéÆ Setting up event handlers...');
        
        this.bindNavigationEvents();
        this.bindUIControlEvents();
        this.bindSettingsEvents();
        this.bindKeyboardEvents();
        this.bindGestureEvents();
        
        console.log('‚úÖ Event handlers set up');
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    bindNavigationEvents() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.elements.prevButton) {
            this.elements.prevButton.addEventListener('click', () => {
                console.log('üîÑ Previous button clicked');
                this.goToPreviousPage();
            });
        }
        
        if (this.elements.nextButton) {
            this.elements.nextButton.addEventListener('click', () => {
                console.log('üîÑ Next button clicked');
                this.goToNextPage();
            });
        }
        
        // –ó–æ–Ω—ã –∫–∞—Å–∞–Ω–∏—è
        if (this.elements.leftTouchZone) {
            this.elements.leftTouchZone.addEventListener('click', () => {
                console.log('üîÑ Left zone clicked');
                this.goToPreviousPage();
            });
        }
        
        if (this.elements.rightTouchZone) {
            this.elements.rightTouchZone.addEventListener('click', () => {
                console.log('üîÑ Right zone clicked');
                this.goToNextPage();
            });
        }
        
        if (this.elements.centerTouchZone) {
            this.elements.centerTouchZone.addEventListener('click', () => {
                console.log('üîÑ Center zone clicked');
                this.toggleUI();
            });
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
     */
    bindUIControlEvents() {
        if (this.elements.settingsButton) {
            this.elements.settingsButton.addEventListener('click', () => this.openSettings());
        }
        
        if (this.elements.backButton) {
            this.elements.backButton.addEventListener('click', () => this.handleBackAction());
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    bindSettingsEvents() {
        if (this.elements.closeSettingsButton) {
            this.elements.closeSettingsButton.addEventListener('click', () => this.closeSettings());
        }
        
        if (this.elements.settingsBackdrop) {
            this.elements.settingsBackdrop.addEventListener('click', () => this.closeSettings());
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    bindKeyboardEvents() {
        document.addEventListener('keydown', (event) => {
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
                return;
            }
            
            switch (event.key) {
                case 'ArrowLeft':
                case 'PageUp':
                case 'h':
                    event.preventDefault();
                    console.log('‚å®Ô∏è Keyboard: Previous page');
                    this.goToPreviousPage();
                    break;
                    
                case 'ArrowRight':
                case 'PageDown':
                case 'l':
                case ' ':
                    event.preventDefault();
                    console.log('‚å®Ô∏è Keyboard: Next page');
                    this.goToNextPage();
                    break;
                    
                case 'Home':
                    event.preventDefault();
                    this.goToPage(0);
                    break;
                    
                case 'End':
                    event.preventDefault();
                    this.goToPage(this.state.totalPages - 1);
                    break;
            }
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∂–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    bindGestureEvents() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø–æ–≤
        let touchStartX = 0;
        
        if (this.elements.readingViewport) {
            this.elements.readingViewport.addEventListener('touchstart', (event) => {
                touchStartX = event.touches[0].clientX;
            });
            
            this.elements.readingViewport.addEventListener('touchend', (event) => {
                const touchEndX = event.changedTouches[0].clientX;
                const deltaX = touchEndX - touchStartX;
                
                if (Math.abs(deltaX) > 50) {
                    if (deltaX > 0) {
                        console.log('üëÜ Swipe: Previous page');
                        this.goToPreviousPage();
                    } else {
                        console.log('üëÜ Swipe: Next page');
                        this.goToNextPage();
                    }
                }
            });
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    renderCurrentPage() {
        console.log(`üìñ Rendering page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        
        const currentPage = this.state.pages[this.state.currentPageIndex];
        
        if (!currentPage) {
            console.error('‚ùå No page to render at index:', this.state.currentPageIndex);
            console.error('‚ùå Available pages:', this.state.pages.length);
            return;
        }
        
        if (!this.elements.pageContent) {
            console.error('‚ùå pageContent element not found');
            return;
        }
        
        // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
        this.performDirectDOMUpdate(currentPage.content);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.updateInterfaceState();
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.saveProgress();
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
     */
    performDirectDOMUpdate(content) {
        if (!this.elements.pageContent) return;
        
        this.elements.pageContent.style.opacity = '0.7';
        
        setTimeout(() => {
            this.elements.pageContent.innerHTML = content;
            this.applyTypographySettings();
            
            setTimeout(() => {
                this.elements.pageContent.style.opacity = '1';
            }, 50);
        }, 100);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    updateInterfaceState() {
        const currentIndex = this.state.currentPageIndex;
        const totalPages = this.state.totalPages;
        const progressPercentage = totalPages > 1 ? (currentIndex / (totalPages - 1)) * 100 : 0;
        
        console.log(`üìä UI Update: Page ${currentIndex + 1}/${totalPages}, Progress: ${Math.round(progressPercentage)}%`);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (this.elements.progressFill) {
            this.elements.progressFill.style.width = `${progressPercentage}%`;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        if (this.elements.currentProgress) {
            this.elements.currentProgress.textContent = Math.round(progressPercentage).toString();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è
        if (this.elements.readingTime) {
            const remainingPages = totalPages - currentIndex - 1;
            const estimatedMinutes = Math.ceil(remainingPages * 0.5); // 30 —Å–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            this.elements.readingTime.textContent = `${estimatedMinutes} –º–∏–Ω`;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.elements.prevButton) {
            this.elements.prevButton.disabled = currentIndex === 0;
            console.log(`üîÑ Prev button disabled: ${currentIndex === 0}`);
        }
        
        if (this.elements.nextButton) {
            this.elements.nextButton.disabled = currentIndex >= totalPages - 1;
            console.log(`üîÑ Next button disabled: ${currentIndex >= totalPages - 1}`);
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    goToNextPage() {
        console.log(`üìñ NEXT: Current ${this.state.currentPageIndex}, Total: ${this.state.totalPages}`);
        
        if (this.state.currentPageIndex < this.state.totalPages - 1) {
            this.state.currentPageIndex++;
            this.renderCurrentPage();
            console.log(`‚úÖ Moved to page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        } else {
            console.log('üö´ Already at last page');
        }
    }

    goToPreviousPage() {
        console.log(`üìñ PREV: Current ${this.state.currentPageIndex}, Total: ${this.state.totalPages}`);
        
        if (this.state.currentPageIndex > 0) {
            this.state.currentPageIndex--;
            this.renderCurrentPage();
            console.log(`‚úÖ Moved to page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        } else {
            console.log('üö´ Already at first page');
        }
    }

    goToPage(pageIndex) {
        const clampedIndex = Math.max(0, Math.min(pageIndex, this.state.totalPages - 1));
        
        if (clampedIndex !== this.state.currentPageIndex) {
            this.state.currentPageIndex = clampedIndex;
            this.renderCurrentPage();
            console.log(`üìñ Jumped to page: ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI
     */
    toggleUI() {
        if (this.state.isUIVisible) {
            this.hideUI();
        } else {
            this.showUI();
        }
    }

    showUI() {
        this.state.isUIVisible = true;
        
        if (this.elements.topNavigation) {
            this.elements.topNavigation.classList.add('visible');
        }
        if (this.elements.bottomControls) {
            this.elements.bottomControls.classList.add('visible');
        }
        
        console.log('üëÅÔ∏è UI shown');
    }

    hideUI() {
        this.state.isUIVisible = false;
        
        if (this.elements.topNavigation) {
            this.elements.topNavigation.classList.remove('visible');
        }
        if (this.elements.bottomControls) {
            this.elements.bottomControls.classList.remove('visible');
        }
        
        console.log('üôà UI hidden');
    }

    showUITemporarily() {
        this.showUI();
        
        setTimeout(() => {
            if (!this.state.isSettingsOpen) {
                this.hideUI();
            }
        }, 3000);
    }

    /**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
openSettings() {
    console.log('‚öôÔ∏è Settings opened');
    
    this.state.isSettingsOpen = true;
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (this.elements.settingsDrawer) {
        this.elements.settingsDrawer.classList.add('visible');
        console.log('‚úÖ Settings panel shown');
    } else {
        console.warn('‚ùå settingsDrawer element not found in DOM');
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        this.createSettingsPanel();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI
    this.showUI();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this.updateSettingsInterface();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
 */
createSettingsPanel() {
    console.log('üîß Creating settings panel dynamically...');
    
    const settingsHTML = `
        <aside class="settings-drawer visible" id="settingsDrawer">
            <div class="settings-backdrop" id="settingsBackdrop"></div>
            
            <div class="settings-panel">
                <header class="settings-header">
                    <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–µ–Ω–∏—è</h3>
                    <button class="close-button" id="closeSettingsButton">‚úï</button>
                </header>
                
                <div class="settings-content">
                    <!-- –Ø—Ä–∫–æ—Å—Ç—å -->
                    <section class="setting-group">
                        <label>–Ø—Ä–∫–æ—Å—Ç—å</label>
                        <div class="brightness-control">
                            <input type="range" id="brightnessSlider" min="30" max="100" value="100">
                        </div>
                    </section>

                    <!-- –¢–µ–º—ã -->
                    <section class="setting-group">
                        <label>–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</label>
                        <div class="theme-options">
                            <button class="theme-option" data-theme="sepia" id="themeSepia">
                                <div class="theme-preview sepia"></div>
                                <span>–°–µ–ø–∏—è</span>
                            </button>
                            <button class="theme-option" data-theme="gray" id="themeGray">
                                <div class="theme-preview gray"></div>
                                <span>–°–µ—Ä—ã–π</span>
                            </button>
                            <button class="theme-option active" data-theme="dark" id="themeDark">
                                <div class="theme-preview dark"></div>
                                <span>–ß–µ—Ä–Ω—ã–π</span>
                            </button>
                        </div>
                    </section>

                    <!-- –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ -->
                    <section class="setting-group">
                        <label>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</label>
                        <div class="font-controls">
                            <button class="font-btn" id="decreaseFontSize">–ê-</button>
                            <button class="font-btn" id="increaseFontSize">–ê+</button>
                        </div>
                    </section>

                    <!-- –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª -->
                    <section class="setting-group">
                        <label>–ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª</label>
                        <div class="spacing-controls">
                            <button class="spacing-btn" id="spacingTight" data-spacing="1.4">–£–∑–∫–∏–π</button>
                            <button class="spacing-btn active" id="spacingNormal" data-spacing="1.6">–ù–æ—Ä–º–∞–ª—å–Ω—ã–π</button>
                            <button class="spacing-btn" id="spacingLoose" data-spacing="2.0">–®–∏—Ä–æ–∫–∏–π</button>
                        </div>
                    </section>
                </div>
            </div>
        </aside>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settingsCSS = `
        .settings-drawer {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            transform: translateY(100%);
            transition: transform 0.3s ease;
            z-index: 200;
        }
        
        .settings-drawer.visible {
            transform: translateY(0);
        }
        
        .settings-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
        }
        
        .settings-panel {
            background: rgba(20, 20, 20, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px 20px 0 0;
            max-height: 70vh;
            overflow: hidden;
            color: #fff;
        }
        
        .settings-header {
            padding: 20px 24px 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .close-button {
            background: none;
            border: none;
            color: #fff;
            font-size: 20px;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
        }
        
        .close-button:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .settings-content {
            padding: 24px;
            max-height: 50vh;
            overflow-y: auto;
        }
        
        .setting-group {
            margin-bottom: 24px;
        }
        
        .setting-group label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 12px;
            color: #fff;
        }
        
        .brightness-control input[type="range"] {
            width: 100%;
            height: 4px;
            border-radius: 2px;
            background: rgba(255, 255, 255, 0.2);
            outline: none;
            -webkit-appearance: none;
        }
        
        .brightness-control input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #007aff;
            cursor: pointer;
        }
        
        .theme-options, .font-controls, .spacing-controls {
            display: flex;
            gap: 12px;
        }
        
        .theme-option, .font-btn, .spacing-btn {
            flex: 1;
            padding: 12px 8px;
            background: none;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s;
            color: #fff;
            font-size: 14px;
        }
        
        .theme-option {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 8px;
        }
        
        .theme-option.active, .font-btn:hover, .spacing-btn.active {
            border-color: #007aff;
            background: rgba(0, 122, 255, 0.1);
        }
        
        .font-btn:hover, .spacing-btn:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .theme-preview {
            width: 36px;
            height: 36px;
            border-radius: 8px;
        }
        
        .theme-preview.sepia { background: #f7f0e6; }
        .theme-preview.gray { background: #f5f5f5; }
        .theme-preview.dark { background: #000; }
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS
    const styleSheet = document.createElement('style');
    styleSheet.textContent = settingsCSS;
    document.head.appendChild(styleSheet);
    
    // –î–æ–±–∞–≤–ª—è–µ–º HTML
    document.body.insertAdjacentHTML('beforeend', settingsHTML);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
    this.elements.settingsDrawer = document.getElementById('settingsDrawer');
    this.elements.settingsBackdrop = document.getElementById('settingsBackdrop');
    this.elements.closeSettingsButton = document.getElementById('closeSettingsButton');
    this.elements.brightnessSlider = document.getElementById('brightnessSlider');
    this.elements.decreaseFontSize = document.getElementById('decreaseFontSize');
    this.elements.increaseFontSize = document.getElementById('increaseFontSize');
    
    // –ü–†–ò–í–Ø–ó–´–í–ê–ï–ú –°–û–ë–´–¢–ò–Ø –î–õ–Ø –í–°–ï–• –ö–ù–û–ü–û–ö
    this.bindDynamicSettingsEvents();
    
    console.log('‚úÖ Settings panel created and shown');
}

/**
 * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
 */
bindDynamicSettingsEvents() {
    console.log('üéÆ Binding dynamic settings events...');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
    this.elements.closeSettingsButton?.addEventListener('click', () => {
        console.log('üîÑ Close settings clicked');
        this.closeSettings();
    });
    
    this.elements.settingsBackdrop?.addEventListener('click', () => {
        console.log('üîÑ Settings backdrop clicked');
        this.closeSettings();
    });
    
    // –Ø—Ä–∫–æ—Å—Ç—å
    this.elements.brightnessSlider?.addEventListener('input', (event) => {
        console.log('üîÑ Brightness changed:', event.target.value);
        this.updateBrightness(parseInt(event.target.value));
    });
    
    // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    this.elements.decreaseFontSize?.addEventListener('click', () => {
        console.log('üîÑ Decrease font size clicked');
        this.adjustFontSize(-2);
    });
    
    this.elements.increaseFontSize?.addEventListener('click', () => {
        console.log('üîÑ Increase font size clicked');
        this.adjustFontSize(2);
    });
    
    // –¢–µ–º—ã
    document.querySelectorAll('.theme-option').forEach(button => {
        button.addEventListener('click', () => {
            console.log('üîÑ Theme clicked:', button.dataset.theme);
            this.changeTheme(button.dataset.theme);
        });
    });
    
    // –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    document.querySelectorAll('.spacing-btn').forEach(button => {
        button.addEventListener('click', () => {
            console.log('üîÑ Spacing clicked:', button.dataset.spacing);
            this.changeLineHeight(parseFloat(button.dataset.spacing));
        });
    });
    
    console.log('‚úÖ Dynamic settings events bound');
}

/**
 * –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
updateBrightness(brightness) {
    this.state.settings.brightness = brightness;
    document.documentElement.style.filter = `brightness(${brightness}%)`;
    this.saveSettings();
    console.log(`üîÜ Brightness set to: ${brightness}%`);
}

adjustFontSize(delta) {
    const newSize = Math.max(14, Math.min(24, this.state.settings.fontSize + delta));
    
    if (newSize !== this.state.settings.fontSize) {
        this.state.settings.fontSize = newSize;
        this.applyTypographySettings();
        this.saveSettings();
        console.log(`üìè Font size changed to: ${newSize}px`);
    }
}

changeTheme(themeName) {
    this.state.settings.theme = themeName;
    document.body.setAttribute('data-theme', themeName);
    this.saveSettings();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
    document.querySelectorAll('.theme-option').forEach(option => {
        option.classList.toggle('active', option.dataset.theme === themeName);
    });
    
    console.log(`üé® Theme changed to: ${themeName}`);
}

changeLineHeight(lineHeight) {
    this.state.settings.lineHeight = lineHeight;
    this.applyTypographySettings();
    this.saveSettings();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.spacing-btn').forEach(btn => {
        const spacing = parseFloat(btn.dataset.spacing);
        btn.classList.toggle('active', Math.abs(spacing - lineHeight) < 0.1);
    });
    
    console.log(`üìê Line height changed to: ${lineHeight}`);
}


/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
closeSettings() {
    console.log('‚öôÔ∏è Settings closed');
    
    this.state.isSettingsOpen = false;
    
    if (this.elements.settingsDrawer) {
        this.elements.settingsDrawer.classList.remove('visible');
        
        // –£–¥–∞–ª—è–µ–º –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            if (this.elements.settingsDrawer && !this.state.isSettingsOpen) {
                this.elements.settingsDrawer.remove();
                this.elements.settingsDrawer = null;
            }
        }, 300);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
updateSettingsInterface() {
    console.log('üîÑ Updating settings interface');
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
}


    handleBackAction() {
        console.log('‚¨ÖÔ∏è Back action');
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
     */
    applyTypographySettings() {
        if (!this.elements.pageContent) return;
        
        const { fontSize, lineHeight, textAlign } = this.state.settings;
        
        this.elements.pageContent.style.fontSize = `${fontSize}px`;
        this.elements.pageContent.style.lineHeight = lineHeight.toString();
        this.elements.pageContent.style.textAlign = textAlign;
    }

    /**
     * –†–∞–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (–∑–∞–≥–ª—É—à–∫–∏)
     */
    saveSettings() {
        try {
            localStorage.setItem(`${this.storageKey}-settings`, JSON.stringify(this.state.settings));
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to save settings:', error);
        }
    }

    loadSettings() {
        try {
            const savedSettings = localStorage.getItem(`${this.storageKey}-settings`);
            if (savedSettings) {
                Object.assign(this.state.settings, JSON.parse(savedSettings));
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to load settings:', error);
        }
        this.applySettings();
    }

    applySettings() {
        document.body.setAttribute('data-theme', this.state.settings.theme);
        this.applyTypographySettings();
    }

    saveProgress() {
        try {
            const progressData = {
                pageIndex: this.state.currentPageIndex,
                totalPages: this.state.totalPages,
                timestamp: Date.now()
            };
            localStorage.setItem(`${this.storageKey}-progress`, JSON.stringify(progressData));
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to save progress:', error);
        }
    }

    loadProgress() {
        try {
            const savedProgress = localStorage.getItem(`${this.storageKey}-progress`);
            if (savedProgress) {
                const progressData = JSON.parse(savedProgress);
                if (progressData.pageIndex < this.state.totalPages) {
                    this.state.currentPageIndex = progressData.pageIndex;
                    console.log(`üìñ Progress restored: page ${progressData.pageIndex + 1}`);
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to load progress:', error);
        }
    }

    /**
     * –£—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateLoadingStatus(message) {
        if (this.elements.loadingStatus) {
            this.elements.loadingStatus.textContent = message;
        }
        console.log(`üîÑ ${message}`);
    }

    hideLoading() {
        if (this.elements.loadingOverlay) {
            this.elements.loadingOverlay.classList.add('hidden');
        }
        
        if (this.elements.readerContainer) {
            this.elements.readerContainer.style.display = 'flex';
            this.elements.readerContainer.classList.add('ready');
        }
        
        setTimeout(() => {
            if (this.elements.loadingOverlay) {
                this.elements.loadingOverlay.style.display = 'none';
            }
        }, 500);
    }

    showError(message) {
        this.updateLoadingStatus(message);
        console.error(`‚ùå ${message}`);
        
        const spinner = document.querySelector('.loading-spinner');
        if (spinner) {
            spinner.style.display = 'none';
        }
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log('üèÅ DOM loaded, initializing reader...');
    
    try {
        window.yandexBooksReader = new YandexBooksReader();
    } catch (error) {
        console.error('üí• Critical initialization error:', error);
        
        document.body.innerHTML = `
            <div style="
                display: flex; 
                align-items: center; 
                justify-content: center; 
                height: 100vh; 
                background: #000; 
                color: #fff; 
                font-family: -apple-system, BlinkMacSystemFont, sans-serif; 
                text-align: center;
                padding: 20px;
            ">
                <div>
                    <h1 style="font-size: 24px; margin-bottom: 16px;">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h1>
                    <p style="margin-bottom: 24px; opacity: 0.8;">${error.message}</p>
                    <button 
                        onclick="location.reload()" 
                        style="
                            padding: 12px 24px; 
                            background: #007aff; 
                            color: white; 
                            border: none; 
                            border-radius: 8px; 
                            cursor: pointer; 
                            font-size: 16px;
                        "
                    >
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }
});

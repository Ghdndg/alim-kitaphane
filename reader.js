class BookReader {
    constructor() {
        this.bookText = '';
        this.pages = [];
        this.currentPageIndex = 0;
        this.totalPages = 0;
        this.isUIVisible = false;
        
        this.settings = {
            theme: 'dark',
            fontSize: 18,
            lineHeight: 1.6,
            wordsPerPage: 300
        };
        
        this.elements = {
            loadingScreen: document.getElementById('loadingScreen'),
            loadingStatus: document.getElementById('loadingStatus'),
            readerInterface: document.getElementById('readerInterface'),
            pageContent: document.getElementById('pageContent'),
            currentPage: document.getElementById('currentPage'),
            totalPages: document.getElementById('totalPages'),
            progressFill: document.getElementById('progressFill'),
            readingTime: document.getElementById('readingTime'),
            pageInput: document.getElementById('pageInput'),
            prevBtn: document.getElementById('prevBtn'),
            nextBtn: document.getElementById('nextBtn'),
            settingsModal: document.getElementById('settingsModal')
        };
        
        this.init();
    }
    
    async init() {
        try {
            this.loadSettings();
            await this.loadBookFile();
            this.createPages();
            this.bindEvents();
            this.loadProgress();
            this.renderCurrentPage();
            this.hideLoading();
            this.showUIBriefly();
            
            console.log('üìñ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${this.totalPages}`);
            console.log(`üìù –°–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${this.settings.wordsPerPage}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª Khadzhi-Girai.txt');
        }
    }
    
    async loadBookFile() {
        this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏...');
        
        try {
            const response = await fetch('Khadzhi-Girai.txt');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            this.bookText = await response.text();
            
            if (!this.bookText.trim()) {
                throw new Error('–§–∞–π–ª –ø—É—Å—Ç');
            }
            
            console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${this.bookText.length}`);
        } catch (error) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: ${error.message}`);
        }
    }
    
    createPages() {
        this.updateLoadingStatus('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
        
        // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        const cleanText = this.bookText
            .replace(/\r\n/g, '\n')
            .replace(/\n{3,}/g, '\n\n')
            .trim();
        
        // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        const paragraphs = cleanText.split('\n\n').filter(p => p.trim());
        
        this.pages = [];
        let currentPageParagraphs = [];
        let currentWordCount = 0;
        
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ${paragraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...`);
        
        for (let i = 0; i < paragraphs.length; i++) {
            const paragraph = paragraphs[i].trim();
            const wordCount = this.countWords(paragraph);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (currentWordCount + wordCount > this.settings.wordsPerPage && currentPageParagraphs.length > 0) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                this.pages.push(this.formatPage(currentPageParagraphs));
                console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${this.pages.length}: ${currentWordCount} —Å–ª–æ–≤`);
                
                // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                currentPageParagraphs = [paragraph];
                currentWordCount = wordCount;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                currentPageParagraphs.push(paragraph);
                currentWordCount += wordCount;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (i % 10 === 0) {
                this.updateLoadingStatus(`–û–±—Ä–∞–±–æ—Ç–∫–∞... ${i + 1}/${paragraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤`);
                await this.delay(1);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (currentPageParagraphs.length > 0) {
            this.pages.push(this.formatPage(currentPageParagraphs));
            console.log(`üìÑ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${this.pages.length}: ${currentWordCount} —Å–ª–æ–≤`);
        }
        
        this.totalPages = this.pages.length;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        this.verifyDataIntegrity(paragraphs);
    }
    
    countWords(text) {
        return text.split(/\s+/).filter(word => word.length > 0).length;
    }
    
    formatPage(paragraphs) {
        return paragraphs.map(paragraph => {
            const text = paragraph.trim();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if (this.isMainTitle(text)) {
                return `<h1>${text}</h1>`;
            } else if (this.isAuthor(text)) {
                return `<div class="author">${text}</div>`;
            } else if (this.isChapterTitle(text)) {
                return `<h2>${text}</h2>`;
            } else {
                return `<p>${text}</p>`;
            }
        }).join('');
    }
    
    isMainTitle(text) {
        return text === '–•–∞–¥–∂–∏-–ì–∏—Ä–∞–π' || text.includes('–•–∞–¥–∂–∏-–ì–∏—Ä–∞–π');
    }
    
    isAuthor(text) {
        return text === '–ê–ª–∏–º –ö—ä—É—Ä—Ç—Å–µ–∏—Ç' || text.includes('–ê–ª–∏–º –ö—ä—É—Ä—Ç—Å–µ–∏—Ç');
    }
    
    isChapterTitle(text) {
        return text.length < 80 && (
            text.startsWith('–ì–ª–∞–≤–∞') ||
            text.startsWith('–ì–õ–ê–í–ê') ||
            /^[–ê-–Ø–Å\s\-\.]{3,50}$/.test(text) ||
            text === text.toUpperCase()
        );
    }
    
    verifyDataIntegrity(originalParagraphs) {
        const originalWordCount = originalParagraphs.reduce((total, p) => total + this.countWords(p), 0);
        
        let pagesWordCount = 0;
        this.pages.forEach(page => {
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = page;
            const pageText = tempDiv.textContent || tempDiv.innerText || '';
            pagesWordCount += this.countWords(pageText);
        });
        
        const lostWords = originalWordCount - pagesWordCount;
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:`);
        console.log(`   –ò—Å—Ö–æ–¥–Ω—ã—Ö —Å–ª–æ–≤: ${originalWordCount}`);
        console.log(`   –°–ª–æ–≤ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö: ${pagesWordCount}`);
        console.log(`   –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–ª–æ–≤: ${lostWords}`);
        
        if (Math.abs(lostWords) > 10) {
            console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞—è –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö');
        } else {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–µ–∑ –ø–æ—Ç–µ—Ä—å');
        }
    }
    
    renderCurrentPage() {
        if (!this.pages[this.currentPageIndex]) return;
        
        this.elements.pageContent.innerHTML = this.pages[this.currentPageIndex];
        this.updateUI();
    }
    
    updateUI() {
        const current = this.currentPageIndex + 1;
        const total = this.totalPages;
        
        this.elements.currentPage.textContent = current;
        this.elements.totalPages.textContent = total;
        this.elements.pageInput.value = current;
        this.elements.pageInput.max = total;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        const progress = total > 1 ? (this.currentPageIndex / (total - 1)) * 100 : 0;
        this.elements.progressFill.style.width = `${progress}%`;
        
        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è
        const remainingPages = total - current;
        const estimatedMinutes = Math.ceil(remainingPages * (this.settings.wordsPerPage / 200));
        this.elements.readingTime.textContent = `${estimatedMinutes} –º–∏–Ω`;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.elements.prevBtn.disabled = this.currentPageIndex === 0;
        this.elements.nextBtn.disabled = this.currentPageIndex === total - 1;
        
        this.saveProgress();
    }
    
    nextPage() {
        if (this.currentPageIndex < this.totalPages - 1) {
            this.currentPageIndex++;
            this.renderCurrentPage();
        }
    }
    
    prevPage() {
        if (this.currentPageIndex > 0) {
            this.currentPageIndex--;
            this.renderCurrentPage();
        }
    }
    
    goToPage(pageNumber) {
        const pageIndex = Math.max(0, Math.min(pageNumber - 1, this.totalPages - 1));
        if (pageIndex !== this.currentPageIndex) {
            this.currentPageIndex = pageIndex;
            this.renderCurrentPage();
        }
    }
    
    updateLoadingStatus(message) {
        this.elements.loadingStatus.textContent = message;
    }
    
    hideLoading() {
        this.elements.loadingScreen.classList.add('hidden');
        this.elements.readerInterface.style.display = 'flex';
        setTimeout(() => {
            this.elements.loadingScreen.style.display = 'none';
        }, 500);
    }
    
    showError(message) {
        this.elements.loadingStatus.textContent = message;
        this.elements.loadingScreen.querySelector('.spinner').style.display = 'none';
    }
    
    showUIBriefly() {
        // UI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∫—Ä—ã—Ç–∏—è UI
        }, 3000);
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    loadSettings() {
        try {
            const saved = localStorage.getItem('bookReaderSettings');
            if (saved) {
                Object.assign(this.settings, JSON.parse(saved));
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
        }
        
        this.applySettings();
    }
    
    saveSettings() {
        try {
            localStorage.setItem('bookReaderSettings', JSON.stringify(this.settings));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
        }
    }
    
    applySettings() {
        document.body.setAttribute('data-theme', this.settings.theme);
        
        if (this.elements.pageContent) {
            this.elements.pageContent.style.fontSize = `${this.settings.fontSize}px`;
            this.elements.pageContent.style.lineHeight = this.settings.lineHeight;
        }
    }
    
    updateSetting(key, value) {
        this.settings[key] = value;
        this.applySettings();
        this.saveSettings();
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
        if (key === 'wordsPerPage') {
            const currentProgress = this.currentPageIndex / (this.totalPages - 1);
            this.createPages();
            this.currentPageIndex = Math.round(currentProgress * (this.totalPages - 1));
            this.renderCurrentPage();
        }
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
    saveProgress() {
        try {
            localStorage.setItem('bookReaderProgress', JSON.stringify({
                pageIndex: this.currentPageIndex,
                totalPages: this.totalPages,
                timestamp: Date.now()
            }));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:', error);
        }
    }
    
    loadProgress() {
        try {
            const saved = localStorage.getItem('bookReaderProgress');
            if (saved) {
                const progress = JSON.parse(saved);
                if (progress.pageIndex < this.totalPages) {
                    this.currentPageIndex = progress.pageIndex;
                }
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:', error);
        }
    }
    
    bindEvents() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
        this.elements.prevBtn.addEventListener('click', () => this.prevPage());
        this.elements.nextBtn.addEventListener('click', () => this.nextPage());
        
        // –ó–æ–Ω—ã –∫–∞—Å–∞–Ω–∏—è
        document.getElementById('prevZone').addEventListener('click', () => this.prevPage());
        document.getElementById('nextZone').addEventListener('click', () => this.nextPage());
        document.getElementById('menuZone').addEventListener('click', () => this.toggleSettings());
        
        // –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.elements.pageInput.addEventListener('change', (e) => {
            this.goToPage(parseInt(e.target.value) || 1);
        });
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        document.getElementById('progressBar').addEventListener('click', (e) => {
            const rect = e.currentTarget.getBoundingClientRect();
            const ratio = (e.clientX - rect.left) / rect.width;
            const targetPage = Math.ceil(ratio * this.totalPages);
            this.goToPage(targetPage);
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        document.getElementById('settingsBtn').addEventListener('click', () => this.toggleSettings());
        document.getElementById('closeBtn').addEventListener('click', () => this.hideSettings());
        
        // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.elements.settingsModal.addEventListener('click', (e) => {
            if (e.target === this.elements.settingsModal) {
                this.hideSettings();
            }
        });
        
        // –ö–Ω–æ–ø–∫–∏ —Ç–µ–º
        document.querySelectorAll('.theme-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.theme-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.updateSetting('theme', btn.dataset.theme);
            });
        });
        
        // –°–ª–∞–π–¥–µ—Ä—ã
        this.bindSlider('fontSizeSlider', 'fontSizeValue', 'fontSize', (value) => `${value}px`);
        this.bindSlider('lineHeightSlider', 'lineHeightValue', 'lineHeight', (value) => value.toFixed(1));
        this.bindSlider('wordsPerPageSlider', 'wordsPerPageValue', 'wordsPerPage', (value) => value.toString());
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.target.tagName === 'INPUT') return;
            
            switch (e.key) {
                case 'ArrowLeft':
                case 'PageUp':
                    e.preventDefault();
                    this.prevPage();
                    break;
                case 'ArrowRight':
                case 'PageDown':
                case ' ':
                    e.preventDefault();
                    this.nextPage();
                    break;
                case 'Home':
                    e.preventDefault();
                    this.goToPage(1);
                    break;
                case 'End':
                    e.preventDefault();
                    this.goToPage(this.totalPages);
                    break;
                case 'Escape':
                    if (this.elements.settingsModal.classList.contains('visible')) {
                        this.hideSettings();
                    }
                    break;
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–∞–π–¥–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.updateSettingsUI();
    }
    
    bindSlider(sliderId, valueId, settingKey, formatter) {
        const slider = document.getElementById(sliderId);
        const valueDisplay = document.getElementById(valueId);
        
        slider.addEventListener('input', (e) => {
            const value = settingKey === 'lineHeight' ? parseFloat(e.target.value) : parseInt(e.target.value);
            valueDisplay.textContent = formatter(value);
            this.updateSetting(settingKey, value);
        });
    }
    
    updateSettingsUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
        document.getElementById('fontSizeSlider').value = this.settings.fontSize;
        document.getElementById('fontSizeValue').textContent = `${this.settings.fontSize}px`;
        
        document.getElementById('lineHeightSlider').value = this.settings.lineHeight;
        document.getElementById('lineHeightValue').textContent = this.settings.lineHeight.toFixed(1);
        
        document.getElementById('wordsPerPageSlider').value = this.settings.wordsPerPage;
        document.getElementById('wordsPerPageValue').textContent = this.settings.wordsPerPage.toString();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
        document.querySelectorAll('.theme-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.theme === this.settings.theme);
        });
    }
    
    toggleSettings() {
        if (this.elements.settingsModal.classList.contains('visible')) {
            this.hideSettings();
        } else {
            this.showSettings();
        }
    }
    
    showSettings() {
        this.elements.settingsModal.classList.add('visible');
        this.updateSettingsUI();
    }
    
    hideSettings() {
        this.elements.settingsModal.classList.remove('visible');
    }
    
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new BookReader();
});

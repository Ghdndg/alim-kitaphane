/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏–¥–µ—Ä –≤ —Å—Ç–∏–ª–µ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –±–µ–∑ –ø–æ—Ç–µ—Ä—å —Ç–µ–∫—Å—Ç–∞
 */
class YandexBooksReader {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏–¥–µ—Ä–∞
        this.state = {
            bookContent: '',
            pages: [],
            currentPageIndex: 0,
            totalPages: 0,
            isUIVisible: false,
            isSettingsOpen: false,
            settings: {
                theme: 'dark',
                fontSize: 18,
                lineHeight: 1.6,
                textAlign: 'justify',
                brightness: 100,
            }
        };

        this.elements = {};
        this.wordsPerPage = 200; // –£–ú–ï–ù–¨–®–ò–õ–ò –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        this.storageKey = 'yandex-books-reader';
        
        // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.bindDOMElements();
        this.init();
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã
     */
    bindDOMElements() {
        const elementSelectors = {
            loadingOverlay: 'loadingOverlay',
            loadingStatus: 'loadingStatus',
            readerContainer: 'readerContainer',
            topNavigation: 'topNavigation',
            bottomControls: 'bottomControls',
            readingProgress: 'readingProgress',
            progressFill: 'progressFill',
            readingViewport: 'readingViewport',
            pageContent: 'pageContent',
            currentProgress: 'currentProgress',
            readingTime: 'readingTime',
            prevButton: 'prevButton',
            nextButton: 'nextButton',
            settingsButton: 'settingsButton',
            backButton: 'backButton',
            leftTouchZone: 'leftTouchZone',
            centerTouchZone: 'centerTouchZone',
            rightTouchZone: 'rightTouchZone',
            settingsDrawer: 'settingsDrawer',
            settingsBackdrop: 'settingsBackdrop',
            closeSettingsButton: 'closeSettingsButton',
            brightnessSlider: 'brightnessSlider',
            decreaseFontSize: 'decreaseFontSize',
            increaseFontSize: 'increaseFontSize',
        };

        Object.entries(elementSelectors).forEach(([key, id]) => {
            const element = document.getElementById(id);
            if (element) {
                this.elements[key] = element;
                console.log(`‚úÖ Found element: ${id}`);
            } else {
                console.warn(`‚ö†Ô∏è Element not found: ${id}`);
            }
        });

        console.log(`üîó DOM elements bound: ${Object.keys(this.elements).length}`);
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏–¥–µ—Ä–∞
     */
    async init() {
        try {
            console.log('üöÄ Initializing Yandex Books Reader...');
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            this.loadSettings();
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏...');
            await this.loadBookFile();
            
            this.updateLoadingStatus('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
            this.createPages();
            
            this.updateLoadingStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            this.setupEventHandlers();
            this.loadProgress();
            
            this.renderCurrentPage();
            this.hideLoading();
            this.showUITemporarily();
            
            console.log('‚úÖ Reader initialized successfully');
            console.log(`üìä Total pages: ${this.state.totalPages}`);
            
        } catch (error) {
            console.error('‚ùå Reader initialization failed:', error);
            this.showError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∫–Ω–∏–≥–∏
     */
    async loadBookFile() {
        try {
            console.log('üìö Loading Khadzhi-Girai.txt...');
            
            const response = await fetch('Khadzhi-Girai.txt');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            this.state.bookContent = await response.text();
            
            if (!this.state.bookContent.trim()) {
                throw new Error('–§–∞–π–ª –∫–Ω–∏–≥–∏ –ø—É—Å—Ç');
            }
            
            console.log(`üìö Book loaded: ${this.state.bookContent.length} characters`);
            
        } catch (error) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É: ${error.message}`);
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü: –ø–æ–¥–≥–æ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–µ –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
     */
    createPages() {
        console.log('üìÑ Creating pages with measured layout...');
        
        const normalizedText = this.preprocessText(this.state.bookContent);
        const words = normalizedText.split(/\s+/).filter(Boolean);
        this.state.pages = [];

        // –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–º–∏ –∂–µ —Å—Ç–∏–ª—è–º–∏, —á—Ç–æ –∏ —É .page-content
        const measureEl = this.createMeasureElement();
        const maxHeight = this.getMaxContentHeight();

        let index = 0;
        let pageNumber = 0;
        
        console.log(`üìè Max content height: ${maxHeight}px`);
        
        while (index < words.length) {
            // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
            let best = Math.min(500, words.length - index); // –ù–∞—á–∏–Ω–∞–µ–º —Å 500 —Å–ª–æ–≤
            let found = false;
            let attempts = 0;
            const maxAttempts = 25; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
            // –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
            while (best > 0 && attempts < maxAttempts) {
                const sliceText = words.slice(index, index + best).join(' ');
                const html = this.formatSimplePage(sliceText, pageNumber === 0 ? 0 : index);
                measureEl.innerHTML = html;
                
                // –ñ–¥–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                measureEl.offsetHeight;
                
                const actualHeight = measureEl.scrollHeight;
                console.log(`üîç Testing ${best} words: height ${actualHeight}px vs max ${maxHeight}px`);
                
                if (actualHeight <= maxHeight) {
                    found = true;
                    // –ï—Å–ª–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–ª–æ–≤
                    const nextBest = Math.min(best + 50, words.length - index);
                    const nextSliceText = words.slice(index, index + nextBest).join(' ');
                    const nextHtml = this.formatSimplePage(nextSliceText, pageNumber === 0 ? 0 : index);
                    measureEl.innerHTML = nextHtml;
                    measureEl.offsetHeight;
                    const nextHeight = measureEl.scrollHeight;
                    
                    if (nextHeight <= maxHeight) {
                        best = nextBest;
                        console.log(`‚úÖ Can fit more: ${best} words, height ${nextHeight}px`);
                    }
                    break;
                }
                
                // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
                if (actualHeight > maxHeight * 2.0) {
                    best = Math.max(1, Math.floor(best * 0.5)); // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 50%
                } else if (actualHeight > maxHeight * 1.5) {
                    best = Math.max(1, Math.floor(best * 0.7)); // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 30%
                } else if (actualHeight > maxHeight * 1.2) {
                    best = Math.max(1, Math.floor(best * 0.85)); // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 15%
                } else {
                    best = Math.max(1, Math.floor(best * 0.95)); // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 5%
                }
                attempts++;
            }
            
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –±–µ—Ä–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ
            if (!found) {
                best = 1;
            }

            const pageText = words.slice(index, index + best).join(' ');
            const formatted = this.formatSimplePage(pageText, pageNumber === 0 ? 0 : index);
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ—Ç—ã
            measureEl.innerHTML = formatted;
            measureEl.offsetHeight;
            let finalHeight = measureEl.scrollHeight;
            let finalBest = best;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–ª–æ–≤
            if (finalHeight < maxHeight * 0.9 && index + best < words.length) {
                console.log(`üîß Page has ${Math.round((1 - finalHeight/maxHeight) * 100)}% free space, trying to add more words...`);
                
                let additionalWords = 0;
                let testBest = best;
                
                // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ 5 —Å–ª–æ–≤ –∑–∞ —Ä–∞–∑ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                while (testBest < words.length - index && additionalWords < 200) {
                    testBest += 5;
                    const testSliceText = words.slice(index, index + testBest).join(' ');
                    const testHtml = this.formatSimplePage(testSliceText, pageNumber === 0 ? 0 : index);
                    measureEl.innerHTML = testHtml;
                    measureEl.offsetHeight;
                    const testHeight = measureEl.scrollHeight;
                    
                    if (testHeight <= maxHeight) {
                        finalBest = testBest;
                        finalHeight = testHeight;
                        additionalWords += 5;
                        console.log(`‚úÖ Added ${additionalWords} more words, height: ${testHeight}px (${Math.round(testHeight/maxHeight * 100)}% filled)`);
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ 1 —Å–ª–æ–≤—É
                        testBest -= 5;
                        while (testBest < words.length - index && testBest < best + additionalWords + 20) {
                            testBest += 1;
                            const singleTestSliceText = words.slice(index, index + testBest).join(' ');
                            const singleTestHtml = this.formatSimplePage(singleTestSliceText, pageNumber === 0 ? 0 : index);
                            measureEl.innerHTML = singleTestHtml;
                            measureEl.offsetHeight;
                            const singleTestHeight = measureEl.scrollHeight;
                            
                            if (singleTestHeight <= maxHeight) {
                                finalBest = testBest;
                                finalHeight = singleTestHeight;
                                additionalWords = testBest - best;
                                console.log(`‚úÖ Added ${additionalWords} more words (1 by 1), height: ${singleTestHeight}px (${Math.round(singleTestHeight/maxHeight * 100)}% filled)`);
                            } else {
                                break;
                            }
                        }
                        break;
                    }
                }
            }
            
            const finalPageText = words.slice(index, index + finalBest).join(' ');
            const finalFormatted = this.formatSimplePage(finalPageText, pageNumber === 0 ? 0 : index);
            
            this.state.pages.push({
                id: pageNumber, 
                content: finalFormatted, 
                wordCount: finalBest,
                actualHeight: finalHeight
            });
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 85%, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–ª–æ–≤
            if (finalHeight < maxHeight * 0.85 && index + finalBest < words.length) {
                console.log(`üîß Final optimization: page only ${Math.round(finalHeight/maxHeight * 100)}% filled, trying to add more...`);
                
                let extraWords = 0;
                let testFinalBest = finalBest;
                
                // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ 1 —Å–ª–æ–≤—É –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 90% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                while (testFinalBest < words.length - index && finalHeight < maxHeight * 0.9 && extraWords < 50) {
                    testFinalBest += 1;
                    const extraTestSliceText = words.slice(index, index + testFinalBest).join(' ');
                    const extraTestHtml = this.formatSimplePage(extraTestSliceText, pageNumber === 0 ? 0 : index);
                    measureEl.innerHTML = extraTestHtml;
                    measureEl.offsetHeight;
                    const extraTestHeight = measureEl.scrollHeight;
                    
                    if (extraTestHeight <= maxHeight) {
                        finalBest = testFinalBest;
                        finalHeight = extraTestHeight;
                        extraWords += 1;
                    } else {
                        break;
                    }
                }
                
                if (extraWords > 0) {
                    console.log(`‚úÖ Final optimization added ${extraWords} more words, final height: ${finalHeight}px (${Math.round(finalHeight/maxHeight * 100)}% filled)`);
                }
            }
            
            console.log(`üìÑ Created page ${pageNumber + 1}: ${finalBest} words, height: ${finalHeight}px/${maxHeight}px (${Math.round(finalHeight/maxHeight * 100)}% filled)`);
            pageNumber += 1;
            index += finalBest;

            // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if (best === 0) {
                console.error('‚ùå CRITICAL: No words fit on page, breaking loop');
                break;
            }
        }

        measureEl.remove();
        this.state.totalPages = this.state.pages.length;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        const diff = this.validateTextIntegrity(normalizedText, words);
        if (Math.abs(diff) > 0) {
            console.warn(`‚ö†Ô∏è Integrity diff = ${diff}. Recreating pages in strict mode...`);
            this.createPagesStrict(words);
        } else {
            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ—Ç–µ—Ä—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            console.log('‚úÖ Main algorithm works, but switching to strict mode for better quality...');
            this.createPagesStrict(words);
        }
        
        console.log(`‚úÖ PAGES CREATED: ${this.state.totalPages} pages total`);

        if (this.state.totalPages === 0) {
            // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            this.state.pages = [{ id: 0, content: '<p></p>', wordCount: 0 }];
            this.state.totalPages = 1;
        }
    }

    /** –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤ + —Ç–æ—á–Ω–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä—å */
    createPagesStrict(words) {
        console.log('üìÑ STRICT MODE: Creating pages with main paragraph detection...');
        
        const normalizedText = this.preprocessText(this.state.bookContent);
        const paragraphs = this.splitIntoParagraphs(normalizedText);
        const mainParagraphs = this.identifyMainParagraphs(paragraphs);
        
        console.log(`üìä Found ${paragraphs.length} paragraphs, ${mainParagraphs.length} main paragraphs`);
        
        const measureEl = this.createMeasureElement();
        const maxHeight = this.getMaxContentHeight();
        this.state.pages = [];
        
        let currentPageContent = '';
        let currentPageWords = 0;
        let pageNumber = 0;
        
        for (let i = 0; i < paragraphs.length; i++) {
            const paragraph = paragraphs[i];
            const isMain = mainParagraphs.includes(i);
            const paragraphWords = paragraph.split(/\s+/).filter(Boolean);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–±–∑–∞—Ü —Å —É—á–µ—Ç–æ–º –µ–≥–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
            const formattedParagraph = this.formatParagraph(paragraph, isMain, pageNumber === 0 && i === 0);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∞–±–∑–∞—Ü –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const testContent = currentPageContent + (currentPageContent ? '\n\n' : '') + formattedParagraph;
            const testHtml = this.formatSimplePage(testContent, pageNumber === 0 ? 0 : currentPageWords);
            measureEl.innerHTML = testHtml;
            measureEl.offsetHeight;
            
            if (measureEl.scrollHeight <= maxHeight) {
                // –ê–±–∑–∞—Ü –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                currentPageContent = testContent;
                currentPageWords += paragraphWords.length;
            } else {
                // –ê–±–∑–∞—Ü –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if (currentPageContent.trim()) {
                    this.state.pages.push({
                        id: pageNumber,
                        content: this.formatSimplePage(currentPageContent, pageNumber === 0 ? 0 : currentPageWords - paragraphWords.length),
                        wordCount: currentPageWords - paragraphWords.length
                    });
                    pageNumber++;
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–º–µ—Å—Ç–∏—Ç—å –∞–±–∑–∞—Ü –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                currentPageContent = formattedParagraph;
                currentPageWords = paragraphWords.length;
                
                // –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ —Ç–æ—á–Ω–æ –ø–æ —Å–ª–æ–≤–∞–º
                if (measureEl.scrollHeight > maxHeight) {
                    const splitResult = this.splitLongParagraphStrict(paragraph, isMain, pageNumber === 0, measureEl, maxHeight);
                    currentPageContent = splitResult.content;
                    currentPageWords = splitResult.wordCount;
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (currentPageContent.trim()) {
            this.state.pages.push({
                id: pageNumber,
                content: this.formatSimplePage(currentPageContent, pageNumber === 0 ? 0 : currentPageWords),
                wordCount: currentPageWords
            });
        }
        
        measureEl.remove();
        this.state.totalPages = this.state.pages.length;
        
        // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        const diff = this.validateTextIntegrity(normalizedText, normalizedText.split(/\s+/).filter(Boolean));
        if (Math.abs(diff) > 0) {
            console.warn(`‚ö†Ô∏è Paragraph mode integrity diff = ${diff}. Falling back to word-by-word mode...`);
            this.createPagesWordByWord(words);
        }
        
        console.log(`‚úÖ STRICT PAGES CREATED: ${this.state.totalPages} pages total`);
    }

    /** –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã */
    splitIntoParagraphs(text) {
        return text
            .split(/\n\s*\n/)
            .map(p => p.trim())
            .filter(p => p.length > 0);
    }

    /** –í—ã—è–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–µ –∞–±–∑–∞—Ü—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –¥–ª–∏–Ω–µ */
    identifyMainParagraphs(paragraphs) {
        const mainParagraphs = [];
        const mainKeywords = [
            '—Ö–∞–¥–∂–∏', '–≥–∏—Ä–∞–π', '–∫—Ä—ã–º', '—Ö–∞–Ω', '—Ç–∞—Ç–∞—Ä', '–∏—Å—Ç–æ—Ä–∏—è', '–±–∏–æ–≥—Ä–∞—Ñ–∏—è',
            '—Ä–æ–¥–∏–ª—Å—è', '—É–º–µ—Ä', '–ø—Ä–∞–≤–∏–ª', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', '–¥–∏–Ω–∞—Å—Ç–∏—è', '–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å',
            '–±–∞–±–∞–º', '–º–∏–¥–∞—Ç', '–∫—ä—É—Ä—Ç—Å–µ–∏—Ç', '–∞–π–¥—ã–Ω', '—Ö–∞—Ç—ã—Ä–∞—Å—ã–Ω–∞', '–±–∞–≥—ä—ã—à–ª–∞–π—ã–º',
            '–ª–∞–≥—ä–∞–±—ã', '—ç–¥–∏', '–º–µ–ª–µ–∫', '—è–Ω—ä—ã', '—è—Ä–∞—Ç—ã–ª–≥—ä–∞–Ω', '—ç—Å–µ—Ä–Ω–∏–Ω—ä', '–∫—ä–∞—Ä–∞–º–∞–Ω—ã',
            '–º—É—ç–ª–ª–∏—Ñ–∏', '–∞–∫—ä–∫—ä—ã–Ω–¥–∞', '—Ç–∞—Ä–∏—Ö–∏–π', '–º–µ–≤–∑—É–≥—ä–∞', '—Å–∏—è—Å–∏–π', '–∏—á—Ç–∏–º–∞–∏–π',
            '–∫–µ—á–º–∏—à–∏–º–∏–∑–¥–µ', '–∏–∑', '–∫—ä–∞–ª–¥—ã—Ä–≥—ä–∞–Ω', '–∏–Ω—Å–∞–Ω–ª–∞—Ä–≥—ä–∞', '–±–µ–¥–∏–∏–π', '–≤–µ—Å–∏–∫—ä–∞–ª—ã',
            '–ø—É–±–ª–∏—Ü–∏—Å—Ç–∏–∫', '—ç–¥–µ–±–∏—è—Ç—ã–º—ã–∑–¥–∞', '–±–æ—à–ª—É–∫—ä–ª–∞—Ä', '–º–µ–≤–¥–∂—É—Ç', '–æ–ª–≥—ä–∞–Ω—ã'
        ];
        
        for (let i = 0; i < paragraphs.length; i++) {
            const paragraph = paragraphs[i].toLowerCase();
            const wordCount = paragraph.split(/\s+/).length;
            
            // –ì–ª–∞–≤–Ω—ã–π –∞–±–∑–∞—Ü –µ—Å–ª–∏:
            // 1. –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            // 2. –ò–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª–∏–Ω—É (–Ω–µ –º–µ–Ω–µ–µ 15 —Å–ª–æ–≤)
            // 3. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã (–≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            const hasKeywords = mainKeywords.some(keyword => paragraph.includes(keyword));
            const isLongEnough = wordCount >= 15;
            const startsProperly = paragraphs[i].match(/^[–ê-–Ø–Å]/);
            
            if ((hasKeywords || isLongEnough) && startsProperly) {
                mainParagraphs.push(i);
            }
        }
        
        return mainParagraphs;
    }

    /** –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–±–∑–∞—Ü —Å —É—á–µ—Ç–æ–º –µ–≥–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ */
    formatParagraph(text, isMain, isFirst) {
        if (isFirst) {
            return `<h1>–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π</h1><div class="author">–ê–ª–∏–º –ú–∏–¥–∞—Ç</div><p class="${isMain ? 'main-paragraph' : ''}">${this.escapeHtml(text)}</p>`;
        }
        
        if (isMain) {
            return `<p class="main-paragraph">${this.escapeHtml(text)}</p>`;
        }
        
        return `<p>${this.escapeHtml(text)}</p>`;
    }

    /** –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü —Ç–æ—á–Ω–æ –ø–æ —Å–ª–æ–≤–∞–º –±–µ–∑ –ø–æ—Ç–µ—Ä—å */
    splitLongParagraphStrict(paragraph, isMain, isFirst, measureEl, maxHeight) {
        const words = paragraph.split(/\s+/).filter(Boolean);
        let best = 1;
        
        // –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
        let low = 1;
        let high = words.length;
        
        while (low <= high) {
            const mid = Math.floor((low + high) / 2);
            const sliceText = words.slice(0, mid).join(' ');
            const formatted = this.formatParagraph(sliceText, isMain, isFirst);
            const testHtml = this.formatSimplePage(formatted, 0);
            measureEl.innerHTML = testHtml;
            measureEl.offsetHeight;
            
            if (measureEl.scrollHeight <= maxHeight) {
                best = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        // –¢–æ—á–Ω–∞—è –¥–æ–≤–æ–¥–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É
        while (best < words.length) {
            const testSlice = words.slice(0, best + 1).join(' ');
            const testFormatted = this.formatParagraph(testSlice, isMain, isFirst);
            const testHtml = this.formatSimplePage(testFormatted, 0);
            measureEl.innerHTML = testHtml;
            measureEl.offsetHeight;
            
            if (measureEl.scrollHeight <= maxHeight) {
                best += 1;
            } else {
                break;
            }
        }
        
        const content = words.slice(0, best).join(' ');
        return {
            content: this.formatParagraph(content, isMain, isFirst),
            wordCount: best
        };
    }

    /** –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤: —Å–ª–æ–≤–æ –∑–∞ —Å–ª–æ–≤–æ–º –±–µ–∑ –ø–æ—Ç–µ—Ä—å */
    createPagesWordByWord(words) {
        console.log('üìÑ WORD-BY-WORD MODE: Creating pages without any losses...');
        
        const measureEl = this.createMeasureElement();
        const maxHeight = this.getMaxContentHeight();
        this.state.pages = [];
        let index = 0;
        let pageNumber = 0;
        
        while (index < words.length) {
            let wordCount = 1;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–∫–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
            while (index + wordCount < words.length) {
                const sliceText = words.slice(index, index + wordCount + 1).join(' ');
                const html = this.formatSimplePage(sliceText, pageNumber === 0 ? 0 : index);
                measureEl.innerHTML = html;
                measureEl.offsetHeight;
                
                if (measureEl.scrollHeight <= maxHeight) {
                    wordCount++;
                } else {
                    break;
                }
            }
            
            const pageText = words.slice(index, index + wordCount).join(' ');
            const formatted = this.formatSimplePage(pageText, pageNumber === 0 ? 0 : index);
            this.state.pages.push({ id: pageNumber, content: formatted, wordCount: wordCount });
            
            index += wordCount;
            pageNumber += 1;
            
            if (wordCount === 0) {
                console.error('‚ùå CRITICAL: No words fit, forcing single word');
                this.state.pages.push({ 
                    id: pageNumber, 
                    content: this.formatSimplePage(words[index] || '', index), 
                    wordCount: 1 
                });
                index += 1;
                pageNumber += 1;
            }
        }
        
        measureEl.remove();
        this.state.totalPages = this.state.pages.length;
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        const diff = this.validateTextIntegrity(this.preprocessText(this.state.bookContent), words);
        if (Math.abs(diff) > 0) {
            console.error(`‚ùå CRITICAL: Word-by-word mode still has ${diff} word difference!`);
        }
        
        console.log(`‚úÖ WORD-BY-WORD PAGES CREATED: ${this.state.totalPages} pages total`);
    }

    /** –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
    createMeasureElement() {
        const el = document.createElement('div');
        el.style.position = 'absolute';
        el.style.top = '-99999px';
        el.style.left = '-99999px';
        el.style.visibility = 'hidden';
        el.style.pointerEvents = 'none';
        el.style.zIndex = '-1';
        el.style.width = '680px'; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–∫ —É .page-content
        el.style.maxWidth = '680px';

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ –∏–∑ .page-content
        el.style.fontFamily = 'Charter, Georgia, "Times New Roman", serif';
        el.style.fontSize = `${this.state.settings.fontSize}px`;
        el.style.lineHeight = String(this.state.settings.lineHeight);
        el.style.letterSpacing = '-0.01em';
        el.style.textAlign = this.state.settings.textAlign;
        el.style.hyphens = 'auto';
        el.style.webkitHyphens = 'auto';
        el.style.userSelect = 'text';
        el.style.webkitUserSelect = 'text';
        
        // –í–∞–∂–Ω–æ: –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã –∏ —Å—Ç–∏–ª–∏ –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        el.style.padding = '0';
        el.style.margin = '0';
        el.style.border = 'none';
        el.style.boxSizing = 'border-box';

        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        el.style.maxHeight = `${this.getMaxContentHeight()}px`;
        el.style.overflow = 'hidden';
        
        document.body.appendChild(el);
        return el;
    }

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—á–µ—Ç–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
    getMaxContentHeight() {
        // –ë–µ—Ä–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –≤—ã—Å–æ—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ .page-content –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const pageContent = this.elements.pageContent;
        if (pageContent) {
            const rect = pageContent.getBoundingClientRect();
            // –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–∞ (–Ω–∞ —Ä–∞–Ω–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏), –≤—ã—á–∏—Å–ª–∏–º –ø–æ CSS calc
            if (rect.height > 0) {
                const safe = Math.max(0, Math.floor(rect.height - 4)); // –Ω–µ–±–æ–ª—å—à–æ–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
                console.log(`üìè Using actual page content height: ${rect.height}px -> safe ${safe}px`);
                return safe;
            }
        }
        
        const computed = this.computePageContentCssHeight();
        const safeComputed = Math.max(0, computed - 4);
        console.log(`üìè Using computed height: ${computed}px -> safe ${safeComputed}px`);
        return safeComputed;
    }

    computePageContentCssHeight() {
        // –î—É–±–ª–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É –∏–∑ CSS —Å —É—á–µ—Ç–æ–º safe-area
        const vh = window.innerHeight;
        const header = 56; // var(--header-height)
        const footer = 80; // var(--footer-height)
        const safeTop = 0; // –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        const safeBottom = 0;
        const padding = 48; // 24px —Å–≤–µ—Ä—Ö—É + 24px —Å–Ω–∏–∑—É
        
        const height = Math.max(0, Math.floor(vh - header - footer - safeTop - safeBottom - padding));
        console.log(`üìè Computed height: ${vh}vh - ${header}px(header) - ${footer}px(footer) - ${padding}px(padding) = ${height}px`);
        return height;
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ */
    validateTextIntegrity(originalText, originalWords) {
        let totalWordsInPages = 0;
        let allPageText = '';
        
        for (const page of this.state.pages) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = page.content;
            const pageText = tempDiv.textContent || tempDiv.innerText || '';
            const pageWords = pageText.split(/\s+/).filter(word => word.trim().length > 0);
            
            totalWordsInPages += pageWords.length;
            allPageText += pageText + ' ';
        }
        
        const originalWordCount = originalWords.length;
        const pageWordCount = totalWordsInPages;
        
        console.log(`üìä Text integrity check:`);
        console.log(`   Original words: ${originalWordCount}`);
        console.log(`   Page words: ${pageWordCount}`);
        const diff = originalWordCount - pageWordCount;
        console.log(`   Difference: ${diff}`);
        
        if (Math.abs(diff) > 10) {
            console.warn(`‚ö†Ô∏è WARNING: Significant word count difference detected!`);
            console.warn(`   This might indicate lost text during pagination.`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (originalWords.length > 0 && this.state.pages.length > 0) {
            const firstPageText = this.state.pages[0].content;
            const lastPageText = this.state.pages[this.state.pages.length - 1].content;
            
            const firstPageDiv = document.createElement('div');
            firstPageDiv.innerHTML = firstPageText;
            const firstPageWords = (firstPageDiv.textContent || '').split(/\s+/).filter(w => w.trim());
            
            const lastPageDiv = document.createElement('div');
            lastPageDiv.innerHTML = lastPageText;
            const lastPageWords = (lastPageDiv.textContent || '').split(/\s+/).filter(w => w.trim());
            
            if (firstPageWords.length > 0 && lastPageWords.length > 0) {
                console.log(`üìñ First page starts with: "${firstPageWords[0]}"`);
                console.log(`üìñ Last page ends with: "${lastPageWords[lastPageWords.length - 1]}"`);
                console.log(`üìñ Original starts with: "${originalWords[0]}"`);
                console.log(`üìñ Original ends with: "${originalWords[originalWords.length - 1]}"`);
            }
        }
        
        return diff;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    createMorePages(text) {
        console.log('üîß Force creating more pages...');
        
        // –ï—â–µ –±–æ–ª–µ–µ –º–µ–ª–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);
        console.log(`üìù Found ${sentences.length} sentences`);
        
        this.state.pages = [];
        const sentencesPerPage = Math.max(3, Math.floor(sentences.length / 50)); // –ú–∏–Ω–∏–º—É–º 50 —Å—Ç—Ä–∞–Ω–∏—Ü
        
        for (let i = 0; i < sentences.length; i += sentencesPerPage) {
            const pageSentences = sentences.slice(i, i + sentencesPerPage);
            const pageText = pageSentences.join('. ').trim() + '.';
            
            this.state.pages.push({
                id: this.state.pages.length,
                content: `<p>${this.escapeHtml(pageText)}</p>`,
                wordCount: this.countWords(pageText)
            });
        }
        
        this.state.totalPages = this.state.pages.length;
        console.log(`‚úÖ FORCE CREATED: ${this.state.totalPages} pages`);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    formatSimplePage(text, startIndex) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (startIndex === 0) {
            return `
                <h1>–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π</h1>
                <div class="author">–ê–ª–∏–º –ú–∏–¥–∞—Ç</div>
                <p>${this.escapeHtml(text)}</p>
            `;
        }
        
        return `<p>${this.escapeHtml(text)}</p>`;
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç
     */
    preprocessText(text) {
        return text
            .replace(/\r\n/g, '\n')
            .replace(/\n{3,}/g, '\n\n')
            .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
            .trim();
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
     */
    countWords(text) {
        return text.split(/\s+/).filter(word => word.length > 0).length;
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–∏–º–≤–æ–ª–æ–≤
     */
    escapeHtml(text) {
        const escapeMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        };
        
        return text.replace(/[&<>"']/g, match => escapeMap[match]);
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        console.log('üéÆ Setting up event handlers...');
        
        this.bindNavigationEvents();
        this.bindUIControlEvents();
        this.bindSettingsEvents();
        this.bindKeyboardEvents();
        this.bindGestureEvents();
        this.bindResizeEvents();
        console.log('‚úÖ Event handlers set up');
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    bindNavigationEvents() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.elements.prevButton) {
            this.elements.prevButton.addEventListener('click', () => {
                console.log('üîÑ Previous button clicked');
                this.goToPreviousPage();
            });
        }
        
        if (this.elements.nextButton) {
            this.elements.nextButton.addEventListener('click', () => {
                console.log('üîÑ Next button clicked');
                this.goToNextPage();
            });
        }
        
        // –ó–æ–Ω—ã –∫–∞—Å–∞–Ω–∏—è
        if (this.elements.leftTouchZone) {
            this.elements.leftTouchZone.addEventListener('click', () => {
                console.log('üîÑ Left zone clicked');
                this.goToPreviousPage();
            });
        }
        
        if (this.elements.rightTouchZone) {
            this.elements.rightTouchZone.addEventListener('click', () => {
                console.log('üîÑ Right zone clicked');
                this.goToNextPage();
            });
        }
        
        if (this.elements.centerTouchZone) {
            this.elements.centerTouchZone.addEventListener('click', () => {
                console.log('üîÑ Center zone clicked');
                this.toggleUI();
            });
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
     */
    bindUIControlEvents() {
        if (this.elements.settingsButton) {
            this.elements.settingsButton.addEventListener('click', () => this.openSettings());
        }
        
        if (this.elements.backButton) {
            this.elements.backButton.addEventListener('click', () => this.handleBackAction());
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    bindSettingsEvents() {
        console.log('üéÆ Binding settings events...');
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
        if (this.elements.closeSettingsButton) {
            this.elements.closeSettingsButton.addEventListener('click', (e) => {
                console.log('üîÑ Close settings clicked');
                e.preventDefault();
                e.stopPropagation();
                this.closeSettings();
            });
        }
        
        if (this.elements.settingsBackdrop) {
            this.elements.settingsBackdrop.addEventListener('click', (e) => {
                console.log('üîÑ Settings backdrop clicked');
                e.preventDefault();
                e.stopPropagation();
                this.closeSettings();
            });
        }
        
        // –Ø—Ä–∫–æ—Å—Ç—å
        if (this.elements.brightnessSlider) {
            this.elements.brightnessSlider.addEventListener('input', (event) => {
                console.log('üîÑ Brightness changed:', event.target.value);
                this.updateBrightness(parseInt(event.target.value));
            });
        }
        
        // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        if (this.elements.decreaseFontSize) {
            this.elements.decreaseFontSize.addEventListener('click', (e) => {
                console.log('üîÑ Decrease font size clicked');
                e.preventDefault();
                e.stopPropagation();
                this.adjustFontSize(-2);
            });
        }
        
        if (this.elements.increaseFontSize) {
            this.elements.increaseFontSize.addEventListener('click', (e) => {
                console.log('üîÑ Increase font size clicked');
                e.preventDefault();
                e.stopPropagation();
                this.adjustFontSize(2);
            });
        }
        
        // –¢–µ–º—ã
        document.querySelectorAll('.theme-option').forEach(button => {
            button.addEventListener('click', (e) => {
                console.log('üîÑ Theme clicked:', button.dataset.theme);
                e.preventDefault();
                e.stopPropagation();
                this.changeTheme(button.dataset.theme);
            });
        });
        
        // –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        document.querySelectorAll('.spacing-option').forEach(button => {
            button.addEventListener('click', (e) => {
                console.log('üîÑ Spacing clicked:', button.dataset.spacing);
                e.preventDefault();
                e.stopPropagation();
                this.changeLineHeight(parseFloat(button.dataset.spacing));
            });
        });
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        document.querySelectorAll('.align-option').forEach(button => {
            button.addEventListener('click', (e) => {
                console.log('üîÑ Alignment clicked:', button.dataset.align);
                e.preventDefault();
                e.stopPropagation();
                this.changeTextAlign(button.dataset.align);
            });
        });
        
        
        console.log('‚úÖ Settings events bound');
    }

    /** –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü */
    bindResizeEvents() {
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                this.recreatePagesForNewMetrics();
            }, 150);
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    bindKeyboardEvents() {
        document.addEventListener('keydown', (event) => {
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
                return;
            }
            
            switch (event.key) {
                case 'ArrowLeft':
                case 'PageUp':
                case 'h':
                    event.preventDefault();
                    console.log('‚å®Ô∏è Keyboard: Previous page');
                    this.goToPreviousPage();
                    break;
                    
                case 'ArrowRight':
                case 'PageDown':
                case 'l':
                case ' ':
                    event.preventDefault();
                    console.log('‚å®Ô∏è Keyboard: Next page');
                    this.goToNextPage();
                    break;
                    
                case 'Home':
                    event.preventDefault();
                    this.goToPage(0);
                    break;
                    
                case 'End':
                    event.preventDefault();
                    this.goToPage(this.state.totalPages - 1);
                    break;
            }
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∂–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    bindGestureEvents() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø–æ–≤
        let touchStartX = 0;
        
        if (this.elements.readingViewport) {
            this.elements.readingViewport.addEventListener('touchstart', (event) => {
                touchStartX = event.touches[0].clientX;
            });
            
            this.elements.readingViewport.addEventListener('touchend', (event) => {
                const touchEndX = event.changedTouches[0].clientX;
                const deltaX = touchEndX - touchStartX;
                
                if (Math.abs(deltaX) > 50) {
                    if (deltaX > 0) {
                        console.log('üëÜ Swipe: Previous page');
                        this.goToPreviousPage();
                    } else {
                        console.log('üëÜ Swipe: Next page');
                        this.goToNextPage();
                    }
                }
            });
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    renderCurrentPage() {
        console.log(`üìñ Rendering page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        
        const currentPage = this.state.pages[this.state.currentPageIndex];
        
        if (!currentPage) {
            console.error('‚ùå No page to render at index:', this.state.currentPageIndex);
            console.error('‚ùå Available pages:', this.state.pages.length);
            return;
        }
        
        if (!this.elements.pageContent) {
            console.error('‚ùå pageContent element not found');
            return;
        }
        
        // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
        this.performDirectDOMUpdate(currentPage.content);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.updateInterfaceState();
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.saveProgress();
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
     */
    performDirectDOMUpdate(content) {
        if (!this.elements.pageContent) return;
        
        this.elements.pageContent.style.opacity = '0.7';
        
        setTimeout(() => {
            this.elements.pageContent.innerHTML = content;
            this.applyTypographySettings();
            
            setTimeout(() => {
                this.elements.pageContent.style.opacity = '1';
            }, 50);
        }, 100);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    updateInterfaceState() {
        const currentIndex = this.state.currentPageIndex;
        const totalPages = this.state.totalPages;
        const progressPercentage = totalPages > 1 ? (currentIndex / (totalPages - 1)) * 100 : 0;
        
        console.log(`üìä UI Update: Page ${currentIndex + 1}/${totalPages}, Progress: ${Math.round(progressPercentage)}%`);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (this.elements.progressFill) {
            this.elements.progressFill.style.width = `${progressPercentage}%`;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        if (this.elements.currentProgress) {
            this.elements.currentProgress.textContent = Math.round(progressPercentage).toString();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è
        if (this.elements.readingTime) {
            const remainingPages = totalPages - currentIndex - 1;
            const estimatedMinutes = Math.ceil(remainingPages * 0.5); // 30 —Å–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            this.elements.readingTime.textContent = `${estimatedMinutes} –º–∏–Ω`;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.elements.prevButton) {
            this.elements.prevButton.disabled = currentIndex === 0;
            console.log(`üîÑ Prev button disabled: ${currentIndex === 0}`);
        }
        
        if (this.elements.nextButton) {
            this.elements.nextButton.disabled = currentIndex >= totalPages - 1;
            console.log(`üîÑ Next button disabled: ${currentIndex >= totalPages - 1}`);
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    goToNextPage() {
        console.log(`üìñ NEXT: Current ${this.state.currentPageIndex}, Total: ${this.state.totalPages}`);
        
        if (this.state.currentPageIndex < this.state.totalPages - 1) {
            this.state.currentPageIndex++;
            this.renderCurrentPage();
            console.log(`‚úÖ Moved to page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        } else {
            console.log('üö´ Already at last page');
        }
    }

    goToPreviousPage() {
        console.log(`üìñ PREV: Current ${this.state.currentPageIndex}, Total: ${this.state.totalPages}`);
        
        if (this.state.currentPageIndex > 0) {
            this.state.currentPageIndex--;
            this.renderCurrentPage();
            console.log(`‚úÖ Moved to page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        } else {
            console.log('üö´ Already at first page');
        }
    }

    goToPage(pageIndex) {
        const clampedIndex = Math.max(0, Math.min(pageIndex, this.state.totalPages - 1));
        
        if (clampedIndex !== this.state.currentPageIndex) {
            this.state.currentPageIndex = clampedIndex;
            this.renderCurrentPage();
            console.log(`üìñ Jumped to page: ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI
     */
    toggleUI() {
        if (this.state.isUIVisible) {
            this.hideUI();
        } else {
            this.showUI();
        }
    }

    showUI() {
        this.state.isUIVisible = true;
        
        if (this.elements.topNavigation) {
            this.elements.topNavigation.classList.add('visible');
        }
        if (this.elements.bottomControls) {
            this.elements.bottomControls.classList.add('visible');
        }
        
        console.log('üëÅÔ∏è UI shown');
    }

    hideUI() {
        this.state.isUIVisible = false;
        
        if (this.elements.topNavigation) {
            this.elements.topNavigation.classList.remove('visible');
        }
        if (this.elements.bottomControls) {
            this.elements.bottomControls.classList.remove('visible');
        }
        
        console.log('üôà UI hidden');
    }

    showUITemporarily() {
        this.showUI();
        
        setTimeout(() => {
            if (!this.state.isSettingsOpen) {
                this.hideUI();
            }
        }, 3000);
    }

    /**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
openSettings() {
    console.log('‚öôÔ∏è Settings opened');
    
    this.state.isSettingsOpen = true;
    
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (this.elements.settingsDrawer) {
        this.elements.settingsDrawer.classList.add('visible');
        console.log('‚úÖ Settings panel shown');
    } else {
            console.error('‚ùå settingsDrawer element not found in DOM');
            return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI
    this.showUI();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this.updateSettingsInterface();
}




    /**
    * –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    */
    closeSettings() {
        console.log('‚öôÔ∏è Settings closed');
        
        this.state.isSettingsOpen = false;
        
        if (this.elements.settingsDrawer) {
            this.elements.settingsDrawer.classList.remove('visible');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    updateSettingsInterface() {
        console.log('üîÑ Updating settings interface');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å
        if (this.elements.brightnessSlider) {
            this.elements.brightnessSlider.value = this.state.settings.brightness;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
        document.querySelectorAll('.theme-option').forEach(option => {
            option.classList.toggle('active', option.dataset.theme === this.state.settings.theme);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        document.querySelectorAll('.spacing-option').forEach(btn => {
            const spacing = parseFloat(btn.dataset.spacing);
            btn.classList.toggle('active', Math.abs(spacing - this.state.settings.lineHeight) < 0.1);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        document.querySelectorAll('.align-option').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.align === this.state.settings.textAlign);
        });
        
    }


        handleBackAction() {
            console.log('‚¨ÖÔ∏è Back action');
        }

        /**
         * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
         */
        applyTypographySettings() {
            if (!this.elements.pageContent) return;
            
            const { fontSize, lineHeight, textAlign } = this.state.settings;
            
            this.elements.pageContent.style.fontSize = `${fontSize}px`;
            this.elements.pageContent.style.lineHeight = lineHeight.toString();
            this.elements.pageContent.style.textAlign = textAlign;
        }

        /**
         * –†–∞–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (–∑–∞–≥–ª—É—à–∫–∏)
         */
        saveSettings() {
            try {
                localStorage.setItem(`${this.storageKey}-settings`, JSON.stringify(this.state.settings));
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to save settings:', error);
            }
        }

        loadSettings() {
            try {
                const savedSettings = localStorage.getItem(`${this.storageKey}-settings`);
                if (savedSettings) {
                    Object.assign(this.state.settings, JSON.parse(savedSettings));
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to load settings:', error);
            }
            this.applySettings();
        }

        applySettings() {
            document.body.setAttribute('data-theme', this.state.settings.theme);
            this.applyTypographySettings();
        }

        saveProgress() {
            try {
                const progressData = {
                    pageIndex: this.state.currentPageIndex,
                    totalPages: this.state.totalPages,
                    timestamp: Date.now()
                };
                localStorage.setItem(`${this.storageKey}-progress`, JSON.stringify(progressData));
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to save progress:', error);
            }
        }

        loadProgress() {
            try {
                const savedProgress = localStorage.getItem(`${this.storageKey}-progress`);
                if (savedProgress) {
                    const progressData = JSON.parse(savedProgress);
                    if (progressData.pageIndex < this.state.totalPages) {
                        this.state.currentPageIndex = progressData.pageIndex;
                        console.log(`üìñ Progress restored: page ${progressData.pageIndex + 1}`);
                    }
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to load progress:', error);
            }
        }

        /**
        * –£—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
        */
        updateLoadingStatus(message) {
            if (this.elements.loadingStatus) {
                this.elements.loadingStatus.textContent = message;
            }
            console.log(`üîÑ ${message}`);
        }

        hideLoading() {
            if (this.elements.loadingOverlay) {
                this.elements.loadingOverlay.classList.add('hidden');
            }
            
            if (this.elements.readerContainer) {
                this.elements.readerContainer.style.display = 'flex';
                this.elements.readerContainer.classList.add('ready');
            }
            
            setTimeout(() => {
                if (this.elements.loadingOverlay) {
                    this.elements.loadingOverlay.style.display = 'none';
                }
            }, 500);
        }

        showError(message) {
            this.updateLoadingStatus(message);
            console.error(`‚ùå ${message}`);
            
            const spinner = document.querySelector('.loading-spinner');
            if (spinner) {
                spinner.style.display = 'none';
            }
        }

    /**
     * –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    updateBrightness(brightness) {
        this.state.settings.brightness = brightness;
        document.documentElement.style.filter = `brightness(${brightness}%)`;
        this.saveSettings();
        console.log(`üîÜ Brightness: ${brightness}%`);
    }

    adjustFontSize(delta) {
        const newSize = Math.max(14, Math.min(24, this.state.settings.fontSize + delta));
        if (newSize !== this.state.settings.fontSize) {
            this.state.settings.fontSize = newSize;
            this.applyTypographySettings();
            this.saveSettings();
                this.recreatePagesForNewMetrics();
            console.log(`üìè Font size: ${newSize}px`);
        }
    }

    changeTheme(themeName) {
        this.state.settings.theme = themeName;
        document.body.setAttribute('data-theme', themeName);
        this.saveSettings();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
        document.querySelectorAll('.theme-option').forEach(option => {
            option.classList.toggle('active', option.dataset.theme === themeName);
        });
        
        console.log(`üé® Theme: ${themeName}`);
    }

    changeLineHeight(lineHeight) {
        this.state.settings.lineHeight = lineHeight;
        this.applyTypographySettings();
        this.saveSettings();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.spacing-option').forEach(btn => {
            const spacing = parseFloat(btn.dataset.spacing);
            btn.classList.toggle('active', Math.abs(spacing - lineHeight) < 0.1);
        });
        
            this.recreatePagesForNewMetrics();
        console.log(`üìê Line height: ${lineHeight}`);
        }

        changeTextAlign(alignment) {
            this.state.settings.textAlign = alignment;
            this.applyTypographySettings();
            this.saveSettings();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.align-option').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.align === alignment);
            });
            
            this.recreatePagesForNewMetrics();
            console.log(`üìê Text alignment: ${alignment}`);
        }

/** –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞/–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞/—à–∏—Ä–∏–Ω—ã */
    recreatePagesForNewMetrics() {
        const progressRatio = this.state.totalPages > 1 ? this.state.currentPageIndex / (this.state.totalPages - 1) : 0;
        this.createPages();
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–∏–∑–∫—É—é –ø–æ–∑–∏—Ü–∏—é —á—Ç–µ–Ω–∏—è
        const newIndex = Math.round(progressRatio * (this.state.totalPages - 1));
        this.state.currentPageIndex = Math.max(0, Math.min(newIndex, this.state.totalPages - 1));
        this.renderCurrentPage();
    }

    }

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log('üèÅ DOM loaded, initializing reader...');
    
    try {
        window.yandexBooksReader = new YandexBooksReader();
    } catch (error) {
        console.error('üí• Critical initialization error:', error);
        
        document.body.innerHTML = `
            <div style="
                display: flex; 
                align-items: center; 
                justify-content: center; 
                height: 100vh; 
                background: #000; 
                color: #fff; 
                font-family: -apple-system, BlinkMacSystemFont, sans-serif; 
                text-align: center;
                padding: 20px;
            ">
                <div>
                    <h1 style="font-size: 24px; margin-bottom: 16px;">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h1>
                    <p style="margin-bottom: 24px; opacity: 0.8;">${error.message}</p>
                    <button 
                        onclick="location.reload()" 
                        style="
                            padding: 12px 24px; 
                            background: #007aff; 
                            color: white; 
                            border: none; 
                            border-radius: 8px; 
                            cursor: pointer; 
                            font-size: 16px;
                        "
                    >
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }
});

/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏–¥–µ—Ä –≤ —Å—Ç–∏–ª–µ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –±–µ–∑ –ø–æ—Ç–µ—Ä—å —Ç–µ–∫—Å—Ç–∞
 */
class YandexBooksReader {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏–¥–µ—Ä–∞
        this.state = {
            bookContent: '',
            pages: [],
            currentPageIndex: 0,
            totalPages: 0,
            isUIVisible: false,
            isSettingsOpen: false,
            settings: {
                theme: 'dark',
                fontSize: 18,
                lineHeight: 1.6,
                textAlign: 'justify',
                brightness: 100,
            }
        };

        this.elements = {};
        this.wordsPerPage = 200; // –£–ú–ï–ù–¨–®–ò–õ–ò –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        this.storageKey = 'yandex-books-reader';
        
        // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.bindDOMElements();
        this.init();
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã
     */
    bindDOMElements() {
        const elementSelectors = {
            loadingOverlay: 'loadingOverlay',
            loadingStatus: 'loadingStatus',
            readerContainer: 'readerContainer',
            topNavigation: 'topNavigation',
            bottomControls: 'bottomControls',
            readingProgress: 'readingProgress',
            progressFill: 'progressFill',
            readingViewport: 'readingViewport',
            pageContent: 'pageContent',
            currentProgress: 'currentProgress',
            readingTime: 'readingTime',
            prevButton: 'prevButton',
            nextButton: 'nextButton',
            settingsButton: 'settingsButton',
            backButton: 'backButton',
            leftTouchZone: 'leftTouchZone',
            centerTouchZone: 'centerTouchZone',
            rightTouchZone: 'rightTouchZone',
            settingsDrawer: 'settingsDrawer',
            settingsBackdrop: 'settingsBackdrop',
            closeSettingsButton: 'closeSettingsButton',
            brightnessSlider: 'brightnessSlider',
            decreaseFontSize: 'decreaseFontSize',
            increaseFontSize: 'increaseFontSize',
        };

        Object.entries(elementSelectors).forEach(([key, id]) => {
            const element = document.getElementById(id);
            if (element) {
                this.elements[key] = element;
                console.log(`‚úÖ Found element: ${id}`);
            } else {
                console.warn(`‚ö†Ô∏è Element not found: ${id}`);
            }
        });

        console.log(`üîó DOM elements bound: ${Object.keys(this.elements).length}`);
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏–¥–µ—Ä–∞
     */
    async init() {
        try {
            console.log('üöÄ Initializing Yandex Books Reader...');
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            this.loadSettings();
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏...');
            await this.loadBookFile();
            
            this.updateLoadingStatus('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
            this.createPages();
            
            this.updateLoadingStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            this.setupEventHandlers();
            this.loadProgress();
            
            this.renderCurrentPage();
            this.hideLoading();
            this.showUITemporarily();
            
            console.log('‚úÖ Reader initialized successfully');
            console.log(`üìä Total pages: ${this.state.totalPages}`);
            
        } catch (error) {
            console.error('‚ùå Reader initialization failed:', error);
            this.showError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∫–Ω–∏–≥–∏
     */
    async loadBookFile() {
        try {
            console.log('üìö Loading Khadzhi-Girai.txt...');
            
            const response = await fetch('Khadzhi-Girai.txt');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            this.state.bookContent = await response.text();
            
            if (!this.state.bookContent.trim()) {
                throw new Error('–§–∞–π–ª –∫–Ω–∏–≥–∏ –ø—É—Å—Ç');
            }
            
            console.log(`üìö Book loaded: ${this.state.bookContent.length} characters`);
            
        } catch (error) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É: ${error.message}`);
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü: –ø–æ–¥–≥–æ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–µ –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
     */
    createPages() {
        console.log('üìÑ Creating pages with measured layout...');
        
        const normalizedText = this.preprocessText(this.state.bookContent);
        const words = normalizedText.split(/\s+/).filter(Boolean);
        this.state.pages = [];

        // –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–º–∏ –∂–µ —Å—Ç–∏–ª—è–º–∏, —á—Ç–æ –∏ —É .page-content
        const measureEl = this.createMeasureElement();
        const maxHeight = this.getMaxContentHeight();

        let index = 0;
        let pageNumber = 0;
        while (index < words.length) {
            // –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤, –ø–æ–º–µ—â–∞—é—â–∏—Ö—Å—è –ø–æ –≤—ã—Å–æ—Ç–µ
            let low = 1;
            let high = Math.min(words.length - index, 3000); // –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            let best = 1;

            while (low <= high) {
                const mid = Math.floor((low + high) / 2);
                const sliceText = words.slice(index, index + mid).join(' ');
                const html = this.formatSimplePage(sliceText, pageNumber === 0 ? 0 : index);
                measureEl.innerHTML = html;
                const h = measureEl.scrollHeight;

                if (h <= maxHeight) {
                    best = mid;
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }

            const pageText = words.slice(index, index + best).join(' ');
            const formatted = this.formatSimplePage(pageText, pageNumber === 0 ? 0 : index);
            this.state.pages.push({ id: pageNumber, content: formatted, wordCount: best });
            console.log(`üìÑ Created page ${pageNumber + 1}: ${best} words (fit height ${maxHeight}px)`);
            pageNumber += 1;
            index += best;

            // –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è (–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —à—Ä–∏—Ñ—Ç)
            if (best === 0) {
                // –í—Å—Ç–∞–≤–∏–º —Ö–æ—Ç—è –±—ã —Å–ª–æ–≤–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º
                const single = words[index];
                const fallback = this.formatSimplePage(single, index);
                this.state.pages.push({ id: pageNumber, content: fallback, wordCount: 1 });
                index += 1;
                pageNumber += 1;
            }
        }

        measureEl.remove();
        this.state.totalPages = this.state.pages.length;
        console.log(`‚úÖ PAGES CREATED: ${this.state.totalPages} pages total`);

        if (this.state.totalPages === 0) {
            // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            this.state.pages = [{ id: 0, content: '<p></p>', wordCount: 0 }];
            this.state.totalPages = 1;
        }
    }

    /** –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
    createMeasureElement() {
        const el = document.createElement('div');
        el.style.position = 'absolute';
        el.style.top = '-99999px';
        el.style.left = '-99999px';
        el.style.visibility = 'hidden';
        el.style.pointerEvents = 'none';
        el.style.zIndex = '-1';
        el.style.width = '100%';

        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∏–ª–∏ –∏–∑ .page-content
        const pageContent = this.elements.pageContent;
        const computed = pageContent ? getComputedStyle(pageContent) : null;
        if (computed) {
            el.style.fontFamily = computed.fontFamily;
            el.style.fontSize = computed.fontSize;
            el.style.lineHeight = computed.lineHeight;
            el.style.letterSpacing = computed.letterSpacing;
            el.style.textAlign = computed.textAlign;
            el.style.width = computed.width;
        } else {
            el.style.fontFamily = 'Georgia, serif';
            el.style.fontSize = `${this.state.settings.fontSize}px`;
            el.style.lineHeight = String(this.state.settings.lineHeight);
            el.style.textAlign = this.state.settings.textAlign;
            el.style.width = '680px';
        }

        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞, —Ä–∞–≤–Ω–∞—è –≤—ã—Å–æ—Ç–µ .page-content
        el.style.maxHeight = `${this.getMaxContentHeight()}px`;
        document.body.appendChild(el);
        return el;
    }

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—á–µ—Ç–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
    getMaxContentHeight() {
        // –ë–µ—Ä–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –≤—ã—Å–æ—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ .page-content –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const pageContent = this.elements.pageContent;
        if (pageContent) {
            const rect = pageContent.getBoundingClientRect();
            // –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–∞ (–Ω–∞ —Ä–∞–Ω–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏), –≤—ã—á–∏—Å–ª–∏–º –ø–æ CSS calc
            return Math.max(0, Math.floor(rect.height || 0)) || this.computePageContentCssHeight();
        }
        return this.computePageContentCssHeight();
    }

    computePageContentCssHeight() {
        // –î—É–±–ª–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É –∏–∑ CSS
        const vh = window.innerHeight;
        const header = 56; // var(--header-height)
        const footer = 80; // var(--footer-height)
        const safeTop = 0; // –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        const safeBottom = 0;
        const padding = 48;
        return Math.max(0, Math.floor(vh - header - footer - safeTop - safeBottom - padding));
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    createMorePages(text) {
        console.log('üîß Force creating more pages...');
        
        // –ï—â–µ –±–æ–ª–µ–µ –º–µ–ª–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);
        console.log(`üìù Found ${sentences.length} sentences`);
        
        this.state.pages = [];
        const sentencesPerPage = Math.max(3, Math.floor(sentences.length / 50)); // –ú–∏–Ω–∏–º—É–º 50 —Å—Ç—Ä–∞–Ω–∏—Ü
        
        for (let i = 0; i < sentences.length; i += sentencesPerPage) {
            const pageSentences = sentences.slice(i, i + sentencesPerPage);
            const pageText = pageSentences.join('. ').trim() + '.';
            
            this.state.pages.push({
                id: this.state.pages.length,
                content: `<p>${this.escapeHtml(pageText)}</p>`,
                wordCount: this.countWords(pageText)
            });
        }
        
        this.state.totalPages = this.state.pages.length;
        console.log(`‚úÖ FORCE CREATED: ${this.state.totalPages} pages`);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    formatSimplePage(text, startIndex) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (startIndex === 0) {
            return `
                <h1>–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π</h1>
                <div class="author">–ê–ª–∏–º –ú–∏–¥–∞—Ç</div>
                <p>${this.escapeHtml(text)}</p>
            `;
        }
        
        return `<p>${this.escapeHtml(text)}</p>`;
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç
     */
    preprocessText(text) {
        return text
            .replace(/\r\n/g, '\n')
            .replace(/\n{3,}/g, '\n\n')
            .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
            .trim();
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
     */
    countWords(text) {
        return text.split(/\s+/).filter(word => word.length > 0).length;
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–∏–º–≤–æ–ª–æ–≤
     */
    escapeHtml(text) {
        const escapeMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        };
        
        return text.replace(/[&<>"']/g, match => escapeMap[match]);
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        console.log('üéÆ Setting up event handlers...');
        
        this.bindNavigationEvents();
        this.bindUIControlEvents();
        this.bindSettingsEvents();
        this.bindKeyboardEvents();
        this.bindGestureEvents();
        this.bindResizeEvents();
        console.log('‚úÖ Event handlers set up');
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    bindNavigationEvents() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.elements.prevButton) {
            this.elements.prevButton.addEventListener('click', () => {
                console.log('üîÑ Previous button clicked');
                this.goToPreviousPage();
            });
        }
        
        if (this.elements.nextButton) {
            this.elements.nextButton.addEventListener('click', () => {
                console.log('üîÑ Next button clicked');
                this.goToNextPage();
            });
        }
        
        // –ó–æ–Ω—ã –∫–∞—Å–∞–Ω–∏—è
        if (this.elements.leftTouchZone) {
            this.elements.leftTouchZone.addEventListener('click', () => {
                console.log('üîÑ Left zone clicked');
                this.goToPreviousPage();
            });
        }
        
        if (this.elements.rightTouchZone) {
            this.elements.rightTouchZone.addEventListener('click', () => {
                console.log('üîÑ Right zone clicked');
                this.goToNextPage();
            });
        }
        
        if (this.elements.centerTouchZone) {
            this.elements.centerTouchZone.addEventListener('click', () => {
                console.log('üîÑ Center zone clicked');
                this.toggleUI();
            });
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
     */
    bindUIControlEvents() {
        if (this.elements.settingsButton) {
            this.elements.settingsButton.addEventListener('click', () => this.openSettings());
        }
        
        if (this.elements.backButton) {
            this.elements.backButton.addEventListener('click', () => this.handleBackAction());
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    bindSettingsEvents() {
        console.log('üéÆ Binding settings events...');
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
        if (this.elements.closeSettingsButton) {
            this.elements.closeSettingsButton.addEventListener('click', (e) => {
                console.log('üîÑ Close settings clicked');
                e.preventDefault();
                e.stopPropagation();
                this.closeSettings();
            });
        }
        
        if (this.elements.settingsBackdrop) {
            this.elements.settingsBackdrop.addEventListener('click', (e) => {
                console.log('üîÑ Settings backdrop clicked');
                e.preventDefault();
                e.stopPropagation();
                this.closeSettings();
            });
        }
        
        // –Ø—Ä–∫–æ—Å—Ç—å
        if (this.elements.brightnessSlider) {
            this.elements.brightnessSlider.addEventListener('input', (event) => {
                console.log('üîÑ Brightness changed:', event.target.value);
                this.updateBrightness(parseInt(event.target.value));
            });
        }
        
        // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        if (this.elements.decreaseFontSize) {
            this.elements.decreaseFontSize.addEventListener('click', (e) => {
                console.log('üîÑ Decrease font size clicked');
                e.preventDefault();
                e.stopPropagation();
                this.adjustFontSize(-2);
            });
        }
        
        if (this.elements.increaseFontSize) {
            this.elements.increaseFontSize.addEventListener('click', (e) => {
                console.log('üîÑ Increase font size clicked');
                e.preventDefault();
                e.stopPropagation();
                this.adjustFontSize(2);
            });
        }
        
        // –¢–µ–º—ã
        document.querySelectorAll('.theme-option').forEach(button => {
            button.addEventListener('click', (e) => {
                console.log('üîÑ Theme clicked:', button.dataset.theme);
                e.preventDefault();
                e.stopPropagation();
                this.changeTheme(button.dataset.theme);
            });
        });
        
        // –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        document.querySelectorAll('.spacing-option').forEach(button => {
            button.addEventListener('click', (e) => {
                console.log('üîÑ Spacing clicked:', button.dataset.spacing);
                e.preventDefault();
                e.stopPropagation();
                this.changeLineHeight(parseFloat(button.dataset.spacing));
            });
        });
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        document.querySelectorAll('.align-option').forEach(button => {
            button.addEventListener('click', (e) => {
                console.log('üîÑ Alignment clicked:', button.dataset.align);
                e.preventDefault();
                e.stopPropagation();
                this.changeTextAlign(button.dataset.align);
            });
        });
        
        
        console.log('‚úÖ Settings events bound');
    }

    /** –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü */
    bindResizeEvents() {
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                this.recreatePagesForNewMetrics();
            }, 150);
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    bindKeyboardEvents() {
        document.addEventListener('keydown', (event) => {
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
                return;
            }
            
            switch (event.key) {
                case 'ArrowLeft':
                case 'PageUp':
                case 'h':
                    event.preventDefault();
                    console.log('‚å®Ô∏è Keyboard: Previous page');
                    this.goToPreviousPage();
                    break;
                    
                case 'ArrowRight':
                case 'PageDown':
                case 'l':
                case ' ':
                    event.preventDefault();
                    console.log('‚å®Ô∏è Keyboard: Next page');
                    this.goToNextPage();
                    break;
                    
                case 'Home':
                    event.preventDefault();
                    this.goToPage(0);
                    break;
                    
                case 'End':
                    event.preventDefault();
                    this.goToPage(this.state.totalPages - 1);
                    break;
            }
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∂–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    bindGestureEvents() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø–æ–≤
        let touchStartX = 0;
        
        if (this.elements.readingViewport) {
            this.elements.readingViewport.addEventListener('touchstart', (event) => {
                touchStartX = event.touches[0].clientX;
            });
            
            this.elements.readingViewport.addEventListener('touchend', (event) => {
                const touchEndX = event.changedTouches[0].clientX;
                const deltaX = touchEndX - touchStartX;
                
                if (Math.abs(deltaX) > 50) {
                    if (deltaX > 0) {
                        console.log('üëÜ Swipe: Previous page');
                        this.goToPreviousPage();
                    } else {
                        console.log('üëÜ Swipe: Next page');
                        this.goToNextPage();
                    }
                }
            });
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    renderCurrentPage() {
        console.log(`üìñ Rendering page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        
        const currentPage = this.state.pages[this.state.currentPageIndex];
        
        if (!currentPage) {
            console.error('‚ùå No page to render at index:', this.state.currentPageIndex);
            console.error('‚ùå Available pages:', this.state.pages.length);
            return;
        }
        
        if (!this.elements.pageContent) {
            console.error('‚ùå pageContent element not found');
            return;
        }
        
        // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
        this.performDirectDOMUpdate(currentPage.content);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.updateInterfaceState();
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.saveProgress();
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
     */
    performDirectDOMUpdate(content) {
        if (!this.elements.pageContent) return;
        
        this.elements.pageContent.style.opacity = '0.7';
        
        setTimeout(() => {
            this.elements.pageContent.innerHTML = content;
            this.applyTypographySettings();
            
            setTimeout(() => {
                this.elements.pageContent.style.opacity = '1';
            }, 50);
        }, 100);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    updateInterfaceState() {
        const currentIndex = this.state.currentPageIndex;
        const totalPages = this.state.totalPages;
        const progressPercentage = totalPages > 1 ? (currentIndex / (totalPages - 1)) * 100 : 0;
        
        console.log(`üìä UI Update: Page ${currentIndex + 1}/${totalPages}, Progress: ${Math.round(progressPercentage)}%`);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (this.elements.progressFill) {
            this.elements.progressFill.style.width = `${progressPercentage}%`;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        if (this.elements.currentProgress) {
            this.elements.currentProgress.textContent = Math.round(progressPercentage).toString();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è
        if (this.elements.readingTime) {
            const remainingPages = totalPages - currentIndex - 1;
            const estimatedMinutes = Math.ceil(remainingPages * 0.5); // 30 —Å–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            this.elements.readingTime.textContent = `${estimatedMinutes} –º–∏–Ω`;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.elements.prevButton) {
            this.elements.prevButton.disabled = currentIndex === 0;
            console.log(`üîÑ Prev button disabled: ${currentIndex === 0}`);
        }
        
        if (this.elements.nextButton) {
            this.elements.nextButton.disabled = currentIndex >= totalPages - 1;
            console.log(`üîÑ Next button disabled: ${currentIndex >= totalPages - 1}`);
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    goToNextPage() {
        console.log(`üìñ NEXT: Current ${this.state.currentPageIndex}, Total: ${this.state.totalPages}`);
        
        if (this.state.currentPageIndex < this.state.totalPages - 1) {
            this.state.currentPageIndex++;
            this.renderCurrentPage();
            console.log(`‚úÖ Moved to page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        } else {
            console.log('üö´ Already at last page');
        }
    }

    goToPreviousPage() {
        console.log(`üìñ PREV: Current ${this.state.currentPageIndex}, Total: ${this.state.totalPages}`);
        
        if (this.state.currentPageIndex > 0) {
            this.state.currentPageIndex--;
            this.renderCurrentPage();
            console.log(`‚úÖ Moved to page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        } else {
            console.log('üö´ Already at first page');
        }
    }

    goToPage(pageIndex) {
        const clampedIndex = Math.max(0, Math.min(pageIndex, this.state.totalPages - 1));
        
        if (clampedIndex !== this.state.currentPageIndex) {
            this.state.currentPageIndex = clampedIndex;
            this.renderCurrentPage();
            console.log(`üìñ Jumped to page: ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI
     */
    toggleUI() {
        if (this.state.isUIVisible) {
            this.hideUI();
        } else {
            this.showUI();
        }
    }

    showUI() {
        this.state.isUIVisible = true;
        
        if (this.elements.topNavigation) {
            this.elements.topNavigation.classList.add('visible');
        }
        if (this.elements.bottomControls) {
            this.elements.bottomControls.classList.add('visible');
        }
        
        console.log('üëÅÔ∏è UI shown');
    }

    hideUI() {
        this.state.isUIVisible = false;
        
        if (this.elements.topNavigation) {
            this.elements.topNavigation.classList.remove('visible');
        }
        if (this.elements.bottomControls) {
            this.elements.bottomControls.classList.remove('visible');
        }
        
        console.log('üôà UI hidden');
    }

    showUITemporarily() {
        this.showUI();
        
        setTimeout(() => {
            if (!this.state.isSettingsOpen) {
                this.hideUI();
            }
        }, 3000);
    }

    /**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
openSettings() {
    console.log('‚öôÔ∏è Settings opened');
    
    this.state.isSettingsOpen = true;
    
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (this.elements.settingsDrawer) {
        this.elements.settingsDrawer.classList.add('visible');
        console.log('‚úÖ Settings panel shown');
    } else {
            console.error('‚ùå settingsDrawer element not found in DOM');
            return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI
    this.showUI();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this.updateSettingsInterface();
}




    /**
    * –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    */
    closeSettings() {
        console.log('‚öôÔ∏è Settings closed');
        
        this.state.isSettingsOpen = false;
        
        if (this.elements.settingsDrawer) {
            this.elements.settingsDrawer.classList.remove('visible');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    updateSettingsInterface() {
        console.log('üîÑ Updating settings interface');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å
        if (this.elements.brightnessSlider) {
            this.elements.brightnessSlider.value = this.state.settings.brightness;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
        document.querySelectorAll('.theme-option').forEach(option => {
            option.classList.toggle('active', option.dataset.theme === this.state.settings.theme);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        document.querySelectorAll('.spacing-option').forEach(btn => {
            const spacing = parseFloat(btn.dataset.spacing);
            btn.classList.toggle('active', Math.abs(spacing - this.state.settings.lineHeight) < 0.1);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        document.querySelectorAll('.align-option').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.align === this.state.settings.textAlign);
        });
        
    }


        handleBackAction() {
            console.log('‚¨ÖÔ∏è Back action');
        }

        /**
         * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
         */
        applyTypographySettings() {
            if (!this.elements.pageContent) return;
            
            const { fontSize, lineHeight, textAlign } = this.state.settings;
            
            this.elements.pageContent.style.fontSize = `${fontSize}px`;
            this.elements.pageContent.style.lineHeight = lineHeight.toString();
            this.elements.pageContent.style.textAlign = textAlign;
        }

        /**
         * –†–∞–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (–∑–∞–≥–ª—É—à–∫–∏)
         */
        saveSettings() {
            try {
                localStorage.setItem(`${this.storageKey}-settings`, JSON.stringify(this.state.settings));
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to save settings:', error);
            }
        }

        loadSettings() {
            try {
                const savedSettings = localStorage.getItem(`${this.storageKey}-settings`);
                if (savedSettings) {
                    Object.assign(this.state.settings, JSON.parse(savedSettings));
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to load settings:', error);
            }
            this.applySettings();
        }

        applySettings() {
            document.body.setAttribute('data-theme', this.state.settings.theme);
            this.applyTypographySettings();
        }

        saveProgress() {
            try {
                const progressData = {
                    pageIndex: this.state.currentPageIndex,
                    totalPages: this.state.totalPages,
                    timestamp: Date.now()
                };
                localStorage.setItem(`${this.storageKey}-progress`, JSON.stringify(progressData));
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to save progress:', error);
            }
        }

        loadProgress() {
            try {
                const savedProgress = localStorage.getItem(`${this.storageKey}-progress`);
                if (savedProgress) {
                    const progressData = JSON.parse(savedProgress);
                    if (progressData.pageIndex < this.state.totalPages) {
                        this.state.currentPageIndex = progressData.pageIndex;
                        console.log(`üìñ Progress restored: page ${progressData.pageIndex + 1}`);
                    }
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to load progress:', error);
            }
        }

        /**
        * –£—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
        */
        updateLoadingStatus(message) {
            if (this.elements.loadingStatus) {
                this.elements.loadingStatus.textContent = message;
            }
            console.log(`üîÑ ${message}`);
        }

        hideLoading() {
            if (this.elements.loadingOverlay) {
                this.elements.loadingOverlay.classList.add('hidden');
            }
            
            if (this.elements.readerContainer) {
                this.elements.readerContainer.style.display = 'flex';
                this.elements.readerContainer.classList.add('ready');
            }
            
            setTimeout(() => {
                if (this.elements.loadingOverlay) {
                    this.elements.loadingOverlay.style.display = 'none';
                }
            }, 500);
        }

        showError(message) {
            this.updateLoadingStatus(message);
            console.error(`‚ùå ${message}`);
            
            const spinner = document.querySelector('.loading-spinner');
            if (spinner) {
                spinner.style.display = 'none';
            }
        }

    /**
     * –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    updateBrightness(brightness) {
        this.state.settings.brightness = brightness;
        document.documentElement.style.filter = `brightness(${brightness}%)`;
        this.saveSettings();
        console.log(`üîÜ Brightness: ${brightness}%`);
    }

    adjustFontSize(delta) {
        const newSize = Math.max(14, Math.min(24, this.state.settings.fontSize + delta));
        if (newSize !== this.state.settings.fontSize) {
            this.state.settings.fontSize = newSize;
            this.applyTypographySettings();
            this.saveSettings();
                this.recreatePagesForNewMetrics();
            console.log(`üìè Font size: ${newSize}px`);
        }
    }

    changeTheme(themeName) {
        this.state.settings.theme = themeName;
        document.body.setAttribute('data-theme', themeName);
        this.saveSettings();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
        document.querySelectorAll('.theme-option').forEach(option => {
            option.classList.toggle('active', option.dataset.theme === themeName);
        });
        
        console.log(`üé® Theme: ${themeName}`);
    }

    changeLineHeight(lineHeight) {
        this.state.settings.lineHeight = lineHeight;
        this.applyTypographySettings();
        this.saveSettings();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.spacing-option').forEach(btn => {
            const spacing = parseFloat(btn.dataset.spacing);
            btn.classList.toggle('active', Math.abs(spacing - lineHeight) < 0.1);
        });
        
            this.recreatePagesForNewMetrics();
        console.log(`üìê Line height: ${lineHeight}`);
        }

        changeTextAlign(alignment) {
            this.state.settings.textAlign = alignment;
            this.applyTypographySettings();
            this.saveSettings();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.align-option').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.align === alignment);
            });
            
            this.recreatePagesForNewMetrics();
            console.log(`üìê Text alignment: ${alignment}`);
        }

/** –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞/–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞/—à–∏—Ä–∏–Ω—ã */
    recreatePagesForNewMetrics() {
        const progressRatio = this.state.totalPages > 1 ? this.state.currentPageIndex / (this.state.totalPages - 1) : 0;
        this.createPages();
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–∏–∑–∫—É—é –ø–æ–∑–∏—Ü–∏—é —á—Ç–µ–Ω–∏—è
        const newIndex = Math.round(progressRatio * (this.state.totalPages - 1));
        this.state.currentPageIndex = Math.max(0, Math.min(newIndex, this.state.totalPages - 1));
        this.renderCurrentPage();
    }

    }

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log('üèÅ DOM loaded, initializing reader...');
    
    try {
        window.yandexBooksReader = new YandexBooksReader();
    } catch (error) {
        console.error('üí• Critical initialization error:', error);
        
        document.body.innerHTML = `
            <div style="
                display: flex; 
                align-items: center; 
                justify-content: center; 
                height: 100vh; 
                background: #000; 
                color: #fff; 
                font-family: -apple-system, BlinkMacSystemFont, sans-serif; 
                text-align: center;
                padding: 20px;
            ">
                <div>
                    <h1 style="font-size: 24px; margin-bottom: 16px;">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h1>
                    <p style="margin-bottom: 24px; opacity: 0.8;">${error.message}</p>
                    <button 
                        onclick="location.reload()" 
                        style="
                            padding: 12px 24px; 
                            background: #007aff; 
                            color: white; 
                            border: none; 
                            border-radius: 8px; 
                            cursor: pointer; 
                            font-size: 16px;
                        "
                    >
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }
});

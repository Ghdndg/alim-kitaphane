/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏–¥–µ—Ä –≤ —Å—Ç–∏–ª–µ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ES6+ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö)
 */
class YandexBooksReader {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏–¥–µ—Ä–∞
        this.state = {
            bookContent: '',
            pages: [],
            currentPageIndex: 0,
            totalPages: 0,
            isUIVisible: false,
            isSettingsOpen: false,
            settings: {
                theme: 'dark',
                fontSize: 18,
                lineHeight: 1.6,
                textAlign: 'justify',
                brightness: 100,
                scrollMode: false
            }
        };

        this.elements = {};
        this.wordsPerPage = 280;
        this.storageKey = 'yandex-books-reader';
        
        // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.bindDOMElements();
        this.init();
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã
     */
    bindDOMElements() {
        const elementSelectors = {
            loadingOverlay: 'loadingOverlay',
            loadingStatus: 'loadingStatus',
            readerContainer: 'readerContainer',
            topNavigation: 'topNavigation',
            bottomControls: 'bottomControls',
            readingProgress: 'readingProgress',
            progressFill: 'progressFill',
            readingViewport: 'readingViewport',
            pageContent: 'pageContent',
            currentProgress: 'currentProgress',
            readingTime: 'readingTime',
            prevButton: 'prevButton',
            nextButton: 'nextButton',
            settingsButton: 'settingsButton',
            backButton: 'backButton',
            leftTouchZone: 'leftTouchZone',
            centerTouchZone: 'centerTouchZone',
            rightTouchZone: 'rightTouchZone',
            settingsDrawer: 'settingsDrawer',
            settingsBackdrop: 'settingsBackdrop',
            closeSettingsButton: 'closeSettingsButton',
            brightnessSlider: 'brightnessSlider',
            decreaseFontSize: 'decreaseFontSize',
            increaseFontSize: 'increaseFontSize',
            scrollModeToggle: 'scrollModeToggle'
        };

        Object.entries(elementSelectors).forEach(([key, id]) => {
            const element = document.getElementById(id);
            if (element) {
                this.elements[key] = element;
                console.log(`‚úÖ Found element: ${id}`);
            } else {
                console.warn(`‚ö†Ô∏è Element not found: ${id}`);
            }
        });

        console.log(`üîó DOM elements bound: ${Object.keys(this.elements).length}`);
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏–¥–µ—Ä–∞
     */
    async init() {
        try {
            console.log('üöÄ Initializing Yandex Books Reader...');
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            this.loadSettings();
            
            this.updateLoadingStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏...');
            await this.loadBookFile();
            
            this.updateLoadingStatus('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
            this.createPages();
            
            this.updateLoadingStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            this.setupEventHandlers();
            this.loadProgress();
            
            this.renderCurrentPage();
            this.hideLoading();
            this.showUITemporarily();
            
            console.log('‚úÖ Reader initialized successfully');
            console.log(`üìä Total pages: ${this.state.totalPages}`);
            
        } catch (error) {
            console.error('‚ùå Reader initialization failed:', error);
            this.showError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∫–Ω–∏–≥–∏
     */
    async loadBookFile() {
        try {
            console.log('üìö Loading Khadzhi-Girai.txt...');
            
            const response = await fetch('Khadzhi-Girai.txt');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            this.state.bookContent = await response.text();
            
            if (!this.state.bookContent.trim()) {
                throw new Error('–§–∞–π–ª –∫–Ω–∏–≥–∏ –ø—É—Å—Ç');
            }
            
            console.log(`üìö Book loaded: ${this.state.bookContent.length} characters`);
            
        } catch (error) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É: ${error.message}`);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    createPages() {
        console.log('üìÑ Creating pages...');
        
        const normalizedText = this.preprocessText(this.state.bookContent);
        const paragraphs = this.splitTextIntoParagraphs(normalizedText);
        
        this.state.pages = [];
        let currentPageParagraphs = [];
        let currentWordCount = 0;
        
        console.log(`üìù Processing ${paragraphs.length} paragraphs...`);
        
        for (let i = 0; i < paragraphs.length; i++) {
            const paragraph = paragraphs[i].trim();
            const paragraphWordCount = this.countWords(paragraph);
            
            if (currentWordCount + paragraphWordCount > this.wordsPerPage && currentPageParagraphs.length > 0) {
                this.addPage(currentPageParagraphs, currentWordCount);
                currentPageParagraphs = [paragraph];
                currentWordCount = paragraphWordCount;
            } else {
                currentPageParagraphs.push(paragraph);
                currentWordCount += paragraphWordCount;
            }
            
            if (i % 25 === 0) {
                this.updateLoadingStatus(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + 1}/${paragraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤...`);
            }
        }
        
        if (currentPageParagraphs.length > 0) {
            this.addPage(currentPageParagraphs, currentWordCount);
        }
        
        this.state.totalPages = this.state.pages.length;
        this.validatePagination(paragraphs);
        
        console.log(`‚úÖ Pages created: ${this.state.totalPages}`);
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç
     */
    preprocessText(text) {
        return text
            .replace(/\r\n/g, '\n')
            .replace(/\n{3,}/g, '\n\n')
            .replace(/\s+$/gm, '')
            .trim();
    }

    /**
     * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
     */
    splitTextIntoParagraphs(text) {
        return text
            .split('\n\n')
            .filter(paragraph => paragraph.trim().length > 0);
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
     */
    countWords(text) {
        return text
            .split(/\s+/)
            .filter(word => word.length > 0).length;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    addPage(paragraphs, wordCount) {
        const formattedContent = this.formatPageContent(paragraphs);
        
        const page = {
            id: this.state.pages.length,
            content: formattedContent,
            wordCount: wordCount
        };
        
        this.state.pages.push(page);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ HTML
     */
    formatPageContent(paragraphs) {
        return paragraphs
            .map(paragraph => this.formatParagraph(paragraph.trim()))
            .join('');
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
     */
    formatParagraph(text) {
        if (this.isMainTitle(text)) {
            return `<h1>${this.escapeHtml(text)}</h1>`;
        }
        
        if (this.isAuthor(text)) {
            return `<div class="author">${this.escapeHtml(text)}</div>`;
        }
        
        if (this.isChapterTitle(text)) {
            return `<h2>${this.escapeHtml(text)}</h2>`;
        }
        
        return `<p>${this.escapeHtml(text)}</p>`;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫–Ω–∏–≥–∏
     */
    isMainTitle(text) {
        return text === '–•–∞–¥–∂–∏-–ì–∏—Ä–∞–π' || text.includes('–•–∞–¥–∂–∏-–ì–∏—Ä–∞–π');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞
     */
    isAuthor(text) {
        return text === '–ê–ª–∏–º –ö—ä—É—Ä—Ç—Å–µ–∏—Ç' || text.includes('–ê–ª–∏–º –ö—ä—É—Ä—Ç—Å–µ–∏—Ç');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≥–ª–∞–≤—ã
     */
    isChapterTitle(text) {
        return text.length < 80 && (
            text.startsWith('–ì–ª–∞–≤–∞') ||
            text.startsWith('–ì–õ–ê–í–ê') ||
            /^[–ê-–Ø–Å\s\-\.]{3,50}$/.test(text) ||
            text === text.toUpperCase()
        );
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–∏–º–≤–æ–ª–æ–≤
     */
    escapeHtml(text) {
        const escapeMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        };
        
        return text.replace(/[&<>"']/g, match => escapeMap[match]);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    validatePagination(originalParagraphs) {
        const originalWordCount = originalParagraphs.reduce(
            (total, paragraph) => total + this.countWords(paragraph), 0
        );
        
        const paginatedWordCount = this.state.pages.reduce(
            (total, page) => total + page.wordCount, 0
        );
        
        const difference = Math.abs(originalWordCount - paginatedWordCount);
        
        if (difference > 25) {
            console.warn(`‚ö†Ô∏è Potential data loss detected: ${difference} words`);
        } else {
            console.log('‚úÖ Pagination completed without significant data loss');
        }
        
        console.log(`üìä Word count - Original: ${originalWordCount}, Paginated: ${paginatedWordCount}`);
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        console.log('üéÆ Setting up event handlers...');
        
        this.bindNavigationEvents();
        this.bindUIControlEvents();
        this.bindSettingsEvents();
        this.bindKeyboardEvents();
        this.bindGestureEvents();
        
        console.log('‚úÖ Event handlers set up');
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    bindNavigationEvents() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.elements.prevButton) {
            this.elements.prevButton.addEventListener('click', () => {
                console.log('üîÑ Previous button clicked');
                this.goToPreviousPage();
            });
        } else {
            console.warn('‚ö†Ô∏è prevButton not found');
        }
        
        if (this.elements.nextButton) {
            this.elements.nextButton.addEventListener('click', () => {
                console.log('üîÑ Next button clicked');
                this.goToNextPage();
            });
        } else {
            console.warn('‚ö†Ô∏è nextButton not found');
        }
        
        // –ó–æ–Ω—ã –∫–∞—Å–∞–Ω–∏—è
        if (this.elements.leftTouchZone) {
            this.elements.leftTouchZone.addEventListener('click', () => {
                console.log('üîÑ Left zone clicked');
                this.goToPreviousPage();
            });
        }
        
        if (this.elements.rightTouchZone) {
            this.elements.rightTouchZone.addEventListener('click', () => {
                console.log('üîÑ Right zone clicked');
                this.goToNextPage();
            });
        }
        
        if (this.elements.centerTouchZone) {
            this.elements.centerTouchZone.addEventListener('click', () => {
                console.log('üîÑ Center zone clicked');
                this.toggleUI();
            });
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
     */
    bindUIControlEvents() {
        if (this.elements.settingsButton) {
            this.elements.settingsButton.addEventListener('click', () => this.openSettings());
        }
        
        if (this.elements.backButton) {
            this.elements.backButton.addEventListener('click', () => this.handleBackAction());
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    bindSettingsEvents() {
        if (this.elements.closeSettingsButton) {
            this.elements.closeSettingsButton.addEventListener('click', () => this.closeSettings());
        }
        
        if (this.elements.settingsBackdrop) {
            this.elements.settingsBackdrop.addEventListener('click', () => this.closeSettings());
        }
        
        if (this.elements.brightnessSlider) {
            this.elements.brightnessSlider.addEventListener('input', (event) => {
                this.updateBrightness(parseInt(event.target.value));
            });
        }
        
        if (this.elements.decreaseFontSize) {
            this.elements.decreaseFontSize.addEventListener('click', () => this.adjustFontSize(-1));
        }
        
        if (this.elements.increaseFontSize) {
            this.elements.increaseFontSize.addEventListener('click', () => this.adjustFontSize(1));
        }
        
        if (this.elements.scrollModeToggle) {
            this.elements.scrollModeToggle.addEventListener('change', (event) => {
                this.toggleScrollMode(event.target.checked);
            });
        }
        
        // –í—ã–±–æ—Ä —Ç–µ–º—ã
        document.querySelectorAll('.theme-option').forEach(button => {
            button.addEventListener('click', () => {
                const theme = button.dataset.theme;
                if (theme) this.changeTheme(theme);
            });
        });
        
        // –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        document.querySelectorAll('.spacing-option').forEach(button => {
            button.addEventListener('click', () => {
                const spacing = parseFloat(button.dataset.spacing);
                if (spacing) this.changeLineHeight(spacing);
            });
        });
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        document.querySelectorAll('.align-option').forEach(button => {
            button.addEventListener('click', () => {
                const alignment = button.dataset.align;
                if (alignment) this.changeTextAlignment(alignment);
            });
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    bindKeyboardEvents() {
        document.addEventListener('keydown', (event) => {
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
                return;
            }
            
            switch (event.key) {
                case 'ArrowLeft':
                case 'PageUp':
                case 'h':
                    event.preventDefault();
                    console.log('‚å®Ô∏è Keyboard: Previous page');
                    this.goToPreviousPage();
                    break;
                    
                case 'ArrowRight':
                case 'PageDown':
                case 'l':
                case ' ':
                    event.preventDefault();
                    console.log('‚å®Ô∏è Keyboard: Next page');
                    this.goToNextPage();
                    break;
                    
                case 'Home':
                case 'g':
                    event.preventDefault();
                    this.goToPage(0);
                    break;
                    
                case 'End':
                case 'G':
                    event.preventDefault();
                    this.goToPage(this.state.totalPages - 1);
                    break;
                    
                case 'Escape':
                    if (this.state.isSettingsOpen) {
                        this.closeSettings();
                    } else if (this.state.isUIVisible) {
                        this.hideUI();
                    }
                    break;
            }
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∂–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    bindGestureEvents() {
        let touchStartX = 0;
        let touchStartY = 0;
        const swipeThreshold = 50;
        
        if (this.elements.readingViewport) {
            this.elements.readingViewport.addEventListener('touchstart', (event) => {
                touchStartX = event.touches[0].clientX;
                touchStartY = event.touches[0].clientY;
            });
            
            this.elements.readingViewport.addEventListener('touchend', (event) => {
                const touchEndX = event.changedTouches[0].clientX;
                const touchEndY = event.changedTouches[0].clientY;
                
                const deltaX = touchEndX - touchStartX;
                const deltaY = touchEndY - touchStartY;
                
                if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > swipeThreshold) {
                    if (deltaX > 0) {
                        console.log('üëÜ Swipe: Previous page');
                        this.goToPreviousPage();
                    } else {
                        console.log('üëÜ Swipe: Next page');
                        this.goToNextPage();
                    }
                }
            });
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø—Ä—è–º–æ–π DOM —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥)
     */
    renderCurrentPage() {
        console.log(`üìñ Rendering page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        
        const currentPage = this.state.pages[this.state.currentPageIndex];
        
        if (!currentPage) {
            console.error('‚ùå No page to render');
            return;
        }
        
        if (!this.elements.pageContent) {
            console.error('‚ùå pageContent element not found');
            return;
        }
        
        // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM –±–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ DOM
        this.performDirectDOMUpdate(currentPage.content);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.updateInterfaceState();
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.saveProgress();
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
     */
    performDirectDOMUpdate(content) {
        if (!this.elements.pageContent) return;
        
        // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        this.elements.pageContent.style.opacity = '0.7';
        this.elements.pageContent.style.transform = 'translateY(8px)';
        
        setTimeout(() => {
            // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ innerHTML (–±–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ DOM)
            this.elements.pageContent.innerHTML = content;
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –Ω–æ–≤–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
            this.applyTypographySettings();
            
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                this.elements.pageContent.style.opacity = '1';
                this.elements.pageContent.style.transform = 'translateY(0)';
            }, 50);
        }, 100);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    updateInterfaceState() {
        const currentIndex = this.state.currentPageIndex;
        const totalPages = this.state.totalPages;
        const progressPercentage = totalPages > 1 ? (currentIndex / (totalPages - 1)) * 100 : 0;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (this.elements.progressFill) {
            this.elements.progressFill.style.width = `${progressPercentage}%`;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∞—Ö)
        if (this.elements.currentProgress) {
            this.elements.currentProgress.textContent = Math.round(progressPercentage).toString();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è
        if (this.elements.readingTime) {
            const remainingPages = totalPages - currentIndex - 1;
            const estimatedMinutes = Math.ceil(remainingPages * (this.wordsPerPage / 220));
            this.elements.readingTime.textContent = `${estimatedMinutes} –º–∏–Ω`;
        }
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.elements.prevButton) {
            this.elements.prevButton.disabled = currentIndex === 0;
        }
        
        if (this.elements.nextButton) {
            this.elements.nextButton.disabled = currentIndex === totalPages - 1;
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    goToNextPage() {
        console.log(`üìñ Attempting to go to next page. Current: ${this.state.currentPageIndex}, Total: ${this.state.totalPages}`);
        
        if (this.state.currentPageIndex < this.state.totalPages - 1) {
            this.state.currentPageIndex++;
            this.renderCurrentPage();
            console.log(`‚úÖ Moved to page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        } else {
            console.log('üö´ Already at last page');
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    goToPreviousPage() {
        console.log(`üìñ Attempting to go to previous page. Current: ${this.state.currentPageIndex}, Total: ${this.state.totalPages}`);
        
        if (this.state.currentPageIndex > 0) {
            this.state.currentPageIndex--;
            this.renderCurrentPage();
            console.log(`‚úÖ Moved to page ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        } else {
            console.log('üö´ Already at first page');
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    goToPage(pageIndex) {
        const clampedIndex = Math.max(0, Math.min(pageIndex, this.state.totalPages - 1));
        
        if (clampedIndex !== this.state.currentPageIndex) {
            this.state.currentPageIndex = clampedIndex;
            this.renderCurrentPage();
            console.log(`üìñ Jumped to page: ${this.state.currentPageIndex + 1}/${this.state.totalPages}`);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    toggleUI() {
        if (this.state.isUIVisible) {
            this.hideUI();
        } else {
            this.showUI();
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     */
    showUI() {
        this.state.isUIVisible = true;
        
        if (this.elements.topNavigation) {
            this.elements.topNavigation.classList.add('visible');
        }
        if (this.elements.bottomControls) {
            this.elements.bottomControls.classList.add('visible');
        }
        
        console.log('üëÅÔ∏è UI shown');
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     */
    hideUI() {
        this.state.isUIVisible = false;
        
        if (this.elements.topNavigation) {
            this.elements.topNavigation.classList.remove('visible');
        }
        if (this.elements.bottomControls) {
            this.elements.bottomControls.classList.remove('visible');
        }
        
        console.log('üôà UI hidden');
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ä–µ–º–µ–Ω–Ω–æ
     */
    showUITemporarily() {
        this.showUI();
        
        setTimeout(() => {
            if (!this.state.isSettingsOpen) {
                this.hideUI();
            }
        }, 3000);
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    openSettings() {
        this.state.isSettingsOpen = true;
        
        if (this.elements.settingsDrawer) {
            this.elements.settingsDrawer.classList.add('visible');
        }
        
        this.showUI();
        this.updateSettingsInterface();
        console.log('‚öôÔ∏è Settings opened');
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    closeSettings() {
        this.state.isSettingsOpen = false;
        
        if (this.elements.settingsDrawer) {
            this.elements.settingsDrawer.classList.remove('visible');
        }
        
        console.log('‚öôÔ∏è Settings closed');
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    updateSettingsInterface() {
        if (this.elements.brightnessSlider) {
            this.elements.brightnessSlider.value = this.state.settings.brightness.toString();
        }
        
        if (this.elements.scrollModeToggle) {
            this.elements.scrollModeToggle.checked = this.state.settings.scrollMode;
        }
        
        document.querySelectorAll('.theme-option').forEach(option => {
            const isActive = option.dataset.theme === this.state.settings.theme;
            option.classList.toggle('active', isActive);
        });
        
        document.querySelectorAll('.spacing-option').forEach(option => {
            const spacing = parseFloat(option.dataset.spacing);
            const isActive = Math.abs(spacing - this.state.settings.lineHeight) < 0.1;
            option.classList.toggle('active', isActive);
        });
        
        document.querySelectorAll('.align-option').forEach(option => {
            const isActive = option.dataset.align === this.state.settings.textAlign;
            option.classList.toggle('active', isActive);
        });
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
     */
    changeTheme(themeName) {
        this.state.settings.theme = themeName;
        document.body.setAttribute('data-theme', themeName);
        this.saveSettings();
        this.updateSettingsInterface();
        console.log(`üé® Theme changed to: ${themeName}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —è—Ä–∫–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
     */
    updateBrightness(brightness) {
        this.state.settings.brightness = brightness;
        document.documentElement.style.filter = `brightness(${brightness}%)`;
        this.saveSettings();
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
     */
    adjustFontSize(delta) {
        const newSize = Math.max(14, Math.min(24, this.state.settings.fontSize + delta));
        
        if (newSize !== this.state.settings.fontSize) {
            this.state.settings.fontSize = newSize;
            this.applyTypographySettings();
            this.saveSettings();
            console.log(`üìè Font size changed to: ${newSize}px`);
        }
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
     */
    changeLineHeight(lineHeight) {
        this.state.settings.lineHeight = lineHeight;
        this.applyTypographySettings();
        this.saveSettings();
        this.updateSettingsInterface();
        console.log(`üìê Line height changed to: ${lineHeight}`);
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
     */
    changeTextAlignment(alignment) {
        this.state.settings.textAlign = alignment;
        this.applyTypographySettings();
        this.saveSettings();
        this.updateSettingsInterface();
        console.log(`üìÑ Text alignment changed to: ${alignment}`);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
     */
    toggleScrollMode(enabled) {
        this.state.settings.scrollMode = enabled;
        document.body.classList.toggle('scroll-mode', enabled);
        this.saveSettings();
        console.log(`üìú Scroll mode ${enabled ? 'enabled' : 'disabled'}`);
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
     */
    applyTypographySettings() {
        if (!this.elements.pageContent) return;
        
        const { fontSize, lineHeight, textAlign } = this.state.settings;
        
        this.elements.pageContent.style.fontSize = `${fontSize}px`;
        this.elements.pageContent.style.lineHeight = lineHeight.toString();
        this.elements.pageContent.style.textAlign = textAlign;
        
        document.documentElement.style.setProperty('--font-size-base', `${fontSize}px`);
        document.documentElement.style.setProperty('--line-height-base', lineHeight.toString());
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ "–ù–∞–∑–∞–¥"
     */
    handleBackAction() {
        console.log('‚¨ÖÔ∏è Back action');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
     */
    saveSettings() {
        try {
            localStorage.setItem(
                `${this.storageKey}-settings`,
                JSON.stringify(this.state.settings)
            );
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to save settings:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
     */
    loadSettings() {
        try {
            const savedSettings = localStorage.getItem(`${this.storageKey}-settings`);
            
            if (savedSettings) {
                const parsedSettings = JSON.parse(savedSettings);
                Object.assign(this.state.settings, parsedSettings);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to load settings:', error);
        }
        
        this.applySettings();
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    applySettings() {
        document.body.setAttribute('data-theme', this.state.settings.theme);
        document.documentElement.style.filter = `brightness(${this.state.settings.brightness}%)`;
        document.body.classList.toggle('scroll-mode', this.state.settings.scrollMode);
        this.applyTypographySettings();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
     */
    saveProgress() {
        try {
            const progressData = {
                pageIndex: this.state.currentPageIndex,
                totalPages: this.state.totalPages,
                timestamp: Date.now()
            };
            
            localStorage.setItem(
                `${this.storageKey}-progress`,
                JSON.stringify(progressData)
            );
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to save progress:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
     */
    loadProgress() {
        try {
            const savedProgress = localStorage.getItem(`${this.storageKey}-progress`);
            
            if (savedProgress) {
                const progressData = JSON.parse(savedProgress);
                
                if (progressData.pageIndex < this.state.totalPages) {
                    this.state.currentPageIndex = progressData.pageIndex;
                    console.log(`üìñ Progress restored: page ${progressData.pageIndex + 1}`);
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Failed to load progress:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateLoadingStatus(message) {
        if (this.elements.loadingStatus) {
            this.elements.loadingStatus.textContent = message;
        }
        console.log(`üîÑ ${message}`);
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoading() {
        if (this.elements.loadingOverlay) {
            this.elements.loadingOverlay.classList.add('hidden');
        }
        
        if (this.elements.readerContainer) {
            this.elements.readerContainer.style.display = 'flex';
            this.elements.readerContainer.classList.add('ready');
        }
        
        setTimeout(() => {
            if (this.elements.loadingOverlay) {
                this.elements.loadingOverlay.style.display = 'none';
            }
        }, 500);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
     */
    showError(message) {
        this.updateLoadingStatus(message);
        console.error(`‚ùå ${message}`);
        
        const spinner = document.querySelector('.loading-spinner');
        if (spinner) {
            spinner.style.display = 'none';
        }
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log('üèÅ DOM loaded, initializing reader...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∏–¥–µ—Ä–∞
        window.yandexBooksReader = new YandexBooksReader();
        
    } catch (error) {
        console.error('üí• Critical initialization error:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
        document.body.innerHTML = `
            <div style="
                display: flex; 
                align-items: center; 
                justify-content: center; 
                height: 100vh; 
                background: #000; 
                color: #fff; 
                font-family: -apple-system, BlinkMacSystemFont, sans-serif; 
                text-align: center;
                padding: 20px;
            ">
                <div>
                    <h1 style="font-size: 24px; margin-bottom: 16px;">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h1>
                    <p style="margin-bottom: 24px; opacity: 0.8;">${error.message}</p>
                    <button 
                        onclick="location.reload()" 
                        style="
                            padding: 12px 24px; 
                            background: #007aff; 
                            color: white; 
                            border: none; 
                            border-radius: 8px; 
                            cursor: pointer; 
                            font-size: 16px;
                        "
                    >
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }
});

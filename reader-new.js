// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–Ω–∏–≥–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
(async function checkAccess() {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    const accessToken = localStorage.getItem('accessToken');
    
    console.log('Reader access check:', {
        hasUser: !!currentUser.email,
        userEmail: currentUser.email,
        hasToken: !!accessToken
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!currentUser.email || !accessToken) {
        console.error('Access denied: No user or token');
        window.location.replace('/index.html');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫—É –∫–Ω–∏–≥–∏
    try {
        const response = await fetch('/api/users/library', {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            const bookId = 1; // ID –∫–Ω–∏–≥–∏ –•–∞–¥–∂–∏ –ì–∏—Ä–∞–π
            
            if (!data.library || !data.library.some(book => book.id === bookId)) {
                console.error('Access denied: Book not in library');
                window.location.replace('/index.html');
                return;
            }
            console.log('‚úÖ Access granted - book is in user library');
        } else {
            console.error('Failed to fetch library');
            window.location.replace('/index.html');
            return;
        }
    } catch (error) {
        console.error('Access check error:', error);
    }
})();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentPage = 1;
let totalPages = 1;
let currentChapter = 0;
let isBookmarked = false;
let readingSettings = {
    fontSize: 16,
    fontFamily: 'Inter',
    theme: 'light',
    textWidth: 'medium',
    lineHeight: 1.6
};

// –î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ (–≥–ª–∞–≤—ã)
const chapters = [
    {
        title: "–ö—ä–∏—Ä–∏—à",
        content: `
            <h2 class="chapter-title">–ö—ä–∏—Ä–∏—à</h2>
            <div class="text-block">
                <p>–ê–ª–∏–º –ú–∏–¥–∞—Ç –∫—ä–∞–ª–µ–º–∏–Ω–∏–Ω—ä –∞—Å–µ—Ä–∏ - "–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π" —Ç–∞—Ä–∏—Ö–∏–π —Ä–æ–º–∞–Ω—ã, –ö—ä—ã—Ä—ã–º –•–∞–Ω–¥—ã—Ä—ã–Ω—ã–Ω—ä –±—É—é–∫ —à–∞—Ö—Å–∏–µ—Ç–ª–µ—Ä–∏–Ω–¥–µ–Ω –±–∏—Å–∏ –∞–∫—ä–∫—ä—ã–Ω–¥–∞. –ë—É —ç—Å–µ—Ä —Å–∞–¥–µ–¥–∂–µ —Ç–∞—Ä–∏—Ö–∏–π –≤–∞–∫—ä–∞–ª–∞—Ä—ã –∞–Ω–ª–∞—Ç–º–∞–π, –±–µ–ª—å–∫–∏ –±–∏—Ä —Ö–∞–ª–∫—ä–Ω—ã–Ω—ä –º–∏–ª–ª–∏–π —Ä—É—Ö—ã–Ω—ã, –∞–¥–µ—Ç–ª–µ—Ä–∏–Ω–∏ –≤–µ –∏—Ö—Ç–∏–∫—ä–∞–¥–ª–∞—Ä—ã–Ω—ã –∫–æ—Å—å—Ç–µ—Ä–µ.</p>
                
                <p>–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π –•–∞–Ω - –ö—ä—ã—Ä—ã–º —Ç–∞—Ä–∏—Ö–∏–Ω–∏–Ω—ä —ç–Ω –±—É—é–∫ —à–∞—Ö—Å–∏–µ—Ç–ª–µ—Ä–∏–Ω–¥–µ–Ω –±–∏—Å–∏. –û–Ω—ã–Ω—ä –∑–∞–º–∞–Ω—ã–Ω–¥–∞ –ö—ä—ã—Ä—ã–º –•–∞–Ω–¥—ã—Ä—ã —ç–≤–¥–∂–∏–Ω–¥–µ —ç–¥–∏. –î–∏–ø–ª–æ–º–∞—Ç–∏—è, —Ç–∏–¥–∂–∞—Ä–µ—Ç –≤–µ —Å–∞–Ω–∞—Ç –∏–Ω–∫–∏—à–∞—Ñ —ç—Ç–º–∏—à—Ç–∏. –ö—ä—ã—Ä—ã–º —Ç–∞—Ç–∞—Ä–ª–∞—Ä—ã –±—É—Ç—é–Ω –¥—é–Ω—å—è–¥–∞ —Ö—é—Ä–º–µ—Ç–ª–µ –∫—ä–∞—Ä–∞–ª—ã—Ä–¥—ã.</p>
                
                <p>–†–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä –±–∏–∑–Ω–∏ XV-XVI –∞—Å—ã—Ä–ª–∞—Ä—ã–Ω–∞ –∞–ª—ã–ø –±–∞—Ä–∞. –û –∑–∞–º–∞–Ω –ö—ä—ã—Ä—ã–º - –®–∏—Ä–∫ –Æ–ª—ã–Ω—ã–Ω—ä –º–∞—Ä—Ö–∏–∑ –Ω–æ–∫—Ç—ä–∞–ª–∞—Ä—ã–Ω–¥–∞–Ω –±–∏—Å–∏ —ç–¥–∏. –ë—É—é–∫ —Ç–∏–¥–∂–∞—Ä–µ—Ç –π–æ–ª–ª–∞—Ä—ã –±—É —Ç–æ–ø—Ä–∞–∫—ä–ª–∞—Ä–Ω—ã –∫–µ—á–∏—Ä–¥–∏. –®–µ—Ä–∫–ª–µ—Ä–¥–µ–Ω –≤–µ –ì—ä–∞—Ä–±–¥–∞–Ω —Ç–¥–∂–∏—Ä–ª–µ—Ä –∫–µ–ª–∏—Ä–¥–∏.</p>
                
                <p>–õ—è–∫–∏–Ω –±—É —Ä–æ–º–∞–Ω–Ω—ã–Ω—ä –∞—Å—ã–ª –∫—ä—ã–º–º–µ—Ç–∏ –æ–Ω–¥–∞ –∫–∏, –æ –±–∏–∑–≥–µ —ç—Å–∫–∏ –ö—ä—ã—Ä—ã–º–Ω—ã–Ω—ä –≥—É–Ω—å–¥–∞–ª—ã–∫—ä —Ö–∞—è—Ç—ã–Ω—ã –∫–æ—Å—å—Ç–µ—Ä–µ. –•–∞–ª–∫—ä –Ω–∞—Å—ã–ª —è—à–∞–π–¥—ã —ç–¥–∏, –Ω–µ —Ñ–∏–∫–∏—Ä —ç—Ç–∏—Ä–¥–∏, –Ω–µ–≥–µ –∏–Ω–∞–Ω—ã—Ä–¥—ã - –±—É—Ç—é–Ω –±—É–Ω–ª–∞—Ä —ç—Å–µ—Ä–¥–µ –∞—á—ã–∫—ä –∫–æ—Å—å—Ç–µ—Ä–∏–ª—å–¥–∏.</p>
            </div>
        `
    },
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≥–ª–∞–≤—ã –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initializeReader();
    initializeButtons();
    loadSettings();
    loadReadingProgress();
    loadAllContent();
    
    // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        debounce(() => {
            calculatePageDimensions();
            restoreScrollPosition();
        }, 300)();
    });
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
function calculatePageDimensions() {
    const wrapper = document.querySelector('.text-content-wrapper');
    const textContent = document.getElementById('textContent');
    
    if (!wrapper || !textContent) return;
    
    // –®–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã = —à–∏—Ä–∏–Ω–∞ wrapper
    const pageWidth = wrapper.clientWidth;
    
    // –û–±—â–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—É—á–∏—Ç—ã–≤–∞—è –∫–æ–ª–æ–Ω–∫–∏)
    const scrollWidth = textContent.scrollWidth;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    totalPages = Math.ceil(scrollWidth / pageWidth);
    
    // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–æ–ª–ª–∞
    currentPage = Math.floor(wrapper.scrollLeft / pageWidth) + 1;
    
    console.log('üìê Page dimensions:', {
        pageWidth,
        scrollWidth,
        currentPage,
        totalPages,
        scrollLeft: wrapper.scrollLeft
    });
    
    updatePageNumbers();
    updateNavigationButtons();
}

// –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
function previousPage() {
    const wrapper = document.querySelector('.text-content-wrapper');
    if (!wrapper) return;
    
    const pageWidth = wrapper.clientWidth;
    wrapper.scrollBy({
        left: -pageWidth,
        behavior: 'smooth'
    });
}

// –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞  
function nextPage() {
    const wrapper = document.querySelector('.text-content-wrapper');
    if (!wrapper) return;
    
    const pageWidth = wrapper.clientWidth;
    wrapper.scrollBy({
        left: pageWidth,
        behavior: 'smooth'
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
function updateNavigationButtons() {
    const wrapper = document.querySelector('.text-content-wrapper');
    const prevBtn = document.querySelector('.prev-btn');
    const nextBtn = document.querySelector('.next-btn');
    
    if (!wrapper || !prevBtn || !nextBtn) return;
    
    const pageWidth = wrapper.clientWidth;
    const scrollLeft = wrapper.scrollLeft;
    const maxScroll = wrapper.scrollWidth - pageWidth;
    
    prevBtn.disabled = scrollLeft <= 10; // –î–æ–ø—É—Å–∫ 10px
    nextBtn.disabled = scrollLeft >= maxScroll - 10;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function updatePageNumbers() {
    const pageDisplay = document.getElementById('pageDisplay');
    if (pageDisplay) {
        pageDisplay.textContent = `${currentPage} / ${totalPages}`;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —á—Ç–µ–Ω–∏—è
function saveReadingProgress() {
    const wrapper = document.querySelector('.text-content-wrapper');
    if (!wrapper) return;
    
    const progress = {
        scrollLeft: wrapper.scrollLeft,
        chapter: currentChapter,
        timestamp: new Date().toISOString()
    };
    
    localStorage.setItem('readingProgress_book1', JSON.stringify(progress));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ —á—Ç–µ–Ω–∏—è
function loadReadingProgress() {
    const saved = localStorage.getItem('readingProgress_book1');
    if (saved) {
        try {
            const progress = JSON.parse(saved);
            currentChapter = progress.chapter || 0;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            setTimeout(() => {
                const wrapper = document.querySelector('.text-content-wrapper');
                if (wrapper && progress.scrollLeft) {
                    wrapper.scrollLeft = progress.scrollLeft;
                    calculatePageDimensions();
                }
            }, 100);
        } catch (e) {
            console.error('Error loading progress:', e);
        }
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
function restoreScrollPosition() {
    const wrapper = document.querySelector('.text-content-wrapper');
    if (!wrapper) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const scrollPercent = wrapper.scrollLeft / (wrapper.scrollWidth - wrapper.clientWidth) || 0;
    
    // –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    setTimeout(() => {
        const newMaxScroll = wrapper.scrollWidth - wrapper.clientWidth;
        wrapper.scrollLeft = scrollPercent * newMaxScroll;
        calculatePageDimensions();
    }, 50);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function loadAllContent() {
    const textContent = document.getElementById('textContent');
    if (!textContent) return;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥–ª–∞–≤—ã —Ä–∞–∑–æ–º
    const allContent = chapters.map(chapter => chapter.content).join('');
    textContent.innerHTML = allContent;
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    setTimeout(() => {
        calculatePageDimensions();
    }, 100);
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
function changeFontSize(delta) {
    const wrapper = document.querySelector('.text-content-wrapper');
    if (!wrapper) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const scrollPercent = wrapper.scrollLeft / (wrapper.scrollWidth - wrapper.clientWidth) || 0;
    
    readingSettings.fontSize = Math.max(12, Math.min(24, readingSettings.fontSize + delta));
    document.getElementById('fontSizeDisplay').textContent = readingSettings.fontSize + 'px';
    
    applySettings();
    saveSettings();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
    setTimeout(() => {
        const newMaxScroll = wrapper.scrollWidth - wrapper.clientWidth;
        wrapper.scrollLeft = scrollPercent * newMaxScroll;
        calculatePageDimensions();
    }, 100);
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞
function changeFontFamily(family) {
    const wrapper = document.querySelector('.text-content-wrapper');
    if (!wrapper) return;
    
    const scrollPercent = wrapper.scrollLeft / (wrapper.scrollWidth - wrapper.clientWidth) || 0;
    
    readingSettings.fontFamily = family;
    applySettings();
    saveSettings();
    
    setTimeout(() => {
        const newMaxScroll = wrapper.scrollWidth - wrapper.clientWidth;
        wrapper.scrollLeft = scrollPercent * newMaxScroll;
        calculatePageDimensions();
    }, 100);
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
function setTextWidth(width) {
    const wrapper = document.querySelector('.text-content-wrapper');
    if (!wrapper) return;
    
    const scrollPercent = wrapper.scrollLeft / (wrapper.scrollWidth - wrapper.clientWidth) || 0;
    
    readingSettings.textWidth = width;
    
    const widthButtons = document.querySelectorAll('.width-btn');
    widthButtons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.width === width);
    });
    
    applySettings();
    saveSettings();
    
    setTimeout(() => {
        const newMaxScroll = wrapper.scrollWidth - wrapper.clientWidth;
        wrapper.scrollLeft = scrollPercent * newMaxScroll;
        calculatePageDimensions();
    }, 100);
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–∂—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
function setLineHeight(height) {
    const wrapper = document.querySelector('.text-content-wrapper');
    if (!wrapper) return;
    
    const scrollPercent = wrapper.scrollLeft / (wrapper.scrollWidth - wrapper.clientWidth) || 0;
    
    readingSettings.lineHeight = height;
    
    const heightButtons = document.querySelectorAll('.lh-btn');
    heightButtons.forEach(btn => {
        btn.classList.toggle('active', parseFloat(btn.dataset.height) === height);
    });
    
    applySettings();
    saveSettings();
    
    setTimeout(() => {
        const newMaxScroll = wrapper.scrollWidth - wrapper.clientWidth;
        wrapper.scrollLeft = scrollPercent * newMaxScroll;
        calculatePageDimensions();
    }, 100);
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function applySettings() {
    const textContent = document.querySelector('.text-content');
    const readerContainer = document.querySelector('.reader-container');
    
    if (!textContent) return;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä
    textContent.style.fontSize = readingSettings.fontSize + 'px';
    textContent.style.fontFamily = readingSettings.fontFamily;
    textContent.style.lineHeight = readingSettings.lineHeight;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É
    if (readerContainer) {
        readerContainer.classList.remove('narrow', 'medium', 'wide');
        readerContainer.classList.add(readingSettings.textWidth);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    document.body.setAttribute('data-theme', readingSettings.theme);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    localStorage.setItem('readerSettings', JSON.stringify(readingSettings));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSettings() {
    const saved = localStorage.getItem('readerSettings');
    if (saved) {
        try {
            readingSettings = { ...readingSettings, ...JSON.parse(saved) };
            applySettings();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            document.getElementById('fontSizeDisplay').textContent = readingSettings.fontSize + 'px';
            
            document.querySelectorAll('.width-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.width === readingSettings.textWidth);
            });
            
            document.querySelectorAll('.lh-btn').forEach(btn => {
                btn.classList.toggle('active', parseFloat(btn.dataset.height) === readingSettings.lineHeight);
            });
        } catch (e) {
            console.error('Error loading settings:', e);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
function initializeButtons() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelector('.prev-btn')?.addEventListener('click', previousPage);
    document.querySelector('.next-btn')?.addEventListener('click', nextPage);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞
    document.getElementById('decreaseFont')?.addEventListener('click', () => changeFontSize(-1));
    document.getElementById('increaseFont')?.addEventListener('click', () => changeFontSize(1));
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏...
    document.querySelector('.settings-btn')?.addEventListener('click', openSettings);
    document.querySelector('.close-modal')?.addEventListener('click', closeSettings);
    document.querySelector('.toc-btn')?.addEventListener('click', openTableOfContents);
    document.querySelector('.close-sidebar')?.addEventListener('click', closeTableOfContents);
    document.querySelector('.back-btn')?.addEventListener('click', () => window.location.href = 'index.html');
    
    // –°–ª—É—à–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const wrapper = document.querySelector('.text-content-wrapper');
    if (wrapper) {
        wrapper.addEventListener('scroll', debounce(() => {
            calculatePageDimensions();
            saveReadingProgress();
        }, 150));
    }
}

// Debounce helper
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function initializeReader() {
    const bookTitle = document.getElementById('bookTitle');
    const bookAuthor = document.getElementById('bookAuthor');
    
    if (bookTitle) bookTitle.textContent = '–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π';
    if (bookAuthor) bookAuthor.textContent = '–ê–ª–∏–º –ú–∏–¥–∞—Ç';
}

function openSettings() {
    document.getElementById('settingsModal').style.display = 'flex';
}

function closeSettings() {
    document.getElementById('settingsModal').style.display = 'none';
    saveSettings();
}

function openTableOfContents() {
    document.getElementById('sidebar').classList.add('open');
}

function closeTableOfContents() {
    document.getElementById('sidebar').classList.remove('open');
}

function setTheme(theme) {
    readingSettings.theme = theme;
    applySettings();
    saveSettings();
}

function updateProgressBar() {
    const progressBar = document.getElementById('progressBar');
    const wrapper = document.querySelector('.text-content-wrapper');
    
    if (progressBar && wrapper) {
        const progress = (wrapper.scrollLeft / (wrapper.scrollWidth - wrapper.clientWidth)) * 100;
        progressBar.style.width = Math.min(100, progress) + '%';
    }
}

function scrollToTop() {
    const wrapper = document.querySelector('.text-content-wrapper');
    if (wrapper) {
        wrapper.scrollTo({ left: 0, behavior: 'smooth' });
    }
}

// –ö–æ–ø–∏—Ä—É–µ–º –≥–ª–∞–≤—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ chapters)
// TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –≥–ª–∞–≤—ã


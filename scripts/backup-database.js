require('dotenv').config();
const fs = require('fs');
const path = require('path');
const telegramService = require('../services/telegram');

async function backupDatabase() {
    try {
        const dbPath = process.env.DB_PATH || './database/krym_chitalka.db';
        const backupDir = path.join(__dirname, '../backups');
        
        // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(backupDir)) {
            fs.mkdirSync(backupDir, { recursive: true });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if (!fs.existsSync(dbPath)) {
            console.error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', dbPath);
            return;
        }
        
        // –°–æ–∑–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        const date = new Date();
        const dateStr = date.toISOString().replace(/[:.]/g, '-').slice(0, -5);
        const backupFileName = `backup_${dateStr}.db`;
        const backupPath = path.join(backupDir, backupFileName);
        
        // –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        fs.copyFileSync(dbPath, backupPath);
        
        console.log('‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω:', backupFileName);
        console.log('üìÇ –ü—É—Ç—å:', backupPath);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ç–∫–∞–ø –≤ Telegram
        await telegramService.sendDocument(
            backupPath,
            `üì¶ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\nüìÖ ${date.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`
        );
        
        console.log('‚úÖ –ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        cleanOldBackups(backupDir, 7);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await telegramService.sendMessage(
            `‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞!</b>\n\n${error.message}`
        );
    }
}

function cleanOldBackups(backupDir, daysToKeep) {
    try {
        const files = fs.readdirSync(backupDir);
        const now = Date.now();
        const maxAge = daysToKeep * 24 * 60 * 60 * 1000; // –¥–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        files.forEach(file => {
            const filePath = path.join(backupDir, file);
            const stats = fs.statSync(filePath);
            const age = now - stats.mtimeMs;
            
            if (age > maxAge) {
                fs.unlinkSync(filePath);
                console.log('üóëÔ∏è  –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø:', file);
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø
backupDatabase();


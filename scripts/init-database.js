const { query, db } = require('../config/database');
require('dotenv').config();

const initDatabase = async () => {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await query(`
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(100) NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                is_active INTEGER DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–Ω–∏–≥
        await query(`
            CREATE TABLE IF NOT EXISTS books (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title VARCHAR(255) NOT NULL,
                subtitle VARCHAR(255),
                author VARCHAR(255) NOT NULL,
                description TEXT,
                price DECIMAL(10,2) NOT NULL,
                cover_image_url VARCHAR(500),
                content_file_url VARCHAR(500),
                content_preview TEXT,
                genre VARCHAR(100),
                language VARCHAR(50) DEFAULT '–ö—Ä—ã–º—Å–∫–æ—Ç–∞—Ç–∞—Ä—Å–∫–∏–π',
                pages INTEGER DEFAULT 0,
                rating DECIMAL(3,2) DEFAULT 0,
                reviews_count INTEGER DEFAULT 0,
                is_active INTEGER DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∫—É–ø–æ–∫
        await query(`
            CREATE TABLE IF NOT EXISTS purchases (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                book_id INTEGER REFERENCES books(id) ON DELETE CASCADE,
                payment_id VARCHAR(255) UNIQUE,
                amount DECIMAL(10,2) NOT NULL,
                currency VARCHAR(3) DEFAULT 'RUB',
                status VARCHAR(50) DEFAULT 'pending',
                yukassa_payment_id VARCHAR(255),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                completed_at DATETIME,
                UNIQUE(user_id, book_id)
            );
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Å—Å–∏–π —á—Ç–µ–Ω–∏—è
        await query(`
            CREATE TABLE IF NOT EXISTS reading_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                book_id INTEGER REFERENCES books(id) ON DELETE CASCADE,
                current_page INTEGER DEFAULT 1,
                current_chapter INTEGER DEFAULT 0,
                reading_progress DECIMAL(5,2) DEFAULT 0,
                last_read_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                reading_settings TEXT,
                UNIQUE(user_id, book_id)
            );
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–ª–∞–¥–æ–∫
        await query(`
            CREATE TABLE IF NOT EXISTS bookmarks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                book_id INTEGER REFERENCES books(id) ON DELETE CASCADE,
                page_number INTEGER NOT NULL,
                chapter_number INTEGER,
                note TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await query(`CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`);
        await query(`CREATE INDEX IF NOT EXISTS idx_purchases_user_id ON purchases(user_id)`);
        await query(`CREATE INDEX IF NOT EXISTS idx_purchases_payment_id ON purchases(payment_id)`);
        await query(`CREATE INDEX IF NOT EXISTS idx_reading_sessions_user_book ON reading_sessions(user_id, book_id)`);
        await query(`CREATE INDEX IF NOT EXISTS idx_bookmarks_user_book ON bookmarks(user_id, book_id)`);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏
        const bookExists = await query('SELECT id FROM books WHERE title = ?', ['–ê–ª–∏–º –ú–∏–¥–∞—Ç']);
        
        if (bookExists.rows.length === 0) {
            await query(`
                INSERT INTO books (
                    title, subtitle, author, description, price, genre, pages, rating, reviews_count,
                    content_preview
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `, [
                '–ê–ª–∏–º –ú–∏–¥–∞—Ç',
                '–•–∞–¥–∂–∏ –ì–∏—Ä–∞–π (–¢–∞—Ä–∏—Ö–∏–π —Ä–æ–º–∞–Ω)',
                '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –æ –∫—Ä—ã–º—Å–∫–æ—Ç–∞—Ç–∞—Ä—Å–∫–æ–º –Ω–∞—Å–ª–µ–¥–∏–∏',
                '–≠–ø–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω, –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π –∫—Ä—ã–º—Å–∫–æ—Ç–∞—Ç–∞—Ä—Å–∫–æ–π —Å–µ–º—å–∏. –û—Ç –∑–æ–ª–æ—Ç–æ–≥–æ –≤–µ–∫–∞ –ö—Ä—ã–º—Å–∫–æ–≥–æ —Ö–∞–Ω—Å—Ç–≤–∞ –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π. –ò—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –≤ –º–µ–Ω—è—é—â–µ–º—Å—è –º–∏—Ä–µ.',
                299.00,
                '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω',
                520,
                4.8,
                234,
                '–ö—ä—ã—Ä—ã–º... –ë—É —Å—ë–∑ –∫—ä–∞–ª—å–±–∏–º–¥–µ –Ω–µ –∫—ä–∞–¥–∞—Ä —á–µ—à–∏—Ç –¥—É–π–≥—É–ª–∞—Ä —É–π–∞–Ω–¥—ã—Ä–∞...'
            ]);
            console.log('üìö –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞');
        }

        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        console.log('üìä –°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:');
        console.log('   - users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)');
        console.log('   - books (–∫–Ω–∏–≥–∏)');
        console.log('   - purchases (–ø–æ–∫—É–ø–∫–∏)');
        console.log('   - reading_sessions (—Å–µ—Å—Å–∏–∏ —á—Ç–µ–Ω–∏—è)');
        console.log('   - bookmarks (–∑–∞–∫–ª–∞–¥–∫–∏)');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
        db.close((err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
            } else {
                console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ');
            }
        });
        process.exit(0);
    }
};

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
initDatabase();
